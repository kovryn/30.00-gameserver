#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Mover

#include "Basic.hpp"

#include "AnimGraphRuntime_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Mover_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "NetworkPrediction_classes.hpp"


namespace SDK
{

// Class Mover.AirMovementUtils
// 0x0000 (0x0028 - 0x0028)
class UAirMovementUtils final : public UBlueprintFunctionLibrary
{
public:
	static struct FProposedMove ComputeControlledFreeMove(const struct FFreeMoveParams& InParams);
	static bool IsValidLandingSpot(class USceneComponent* UpdatedComponent, class UPrimitiveComponent* UpdatedPrimitive, const struct FVector& Location, const struct FHitResult& Hit, float FloorSweepDistance, float MaxWalkSlopeCosine, struct FFloorCheckResult* OutFloorResult);
	static float TryMoveToFallAlongSurface(class USceneComponent* UpdatedComponent, class UPrimitiveComponent* UpdatedPrimitive, class UMoverComponent* MoverComponent, const struct FVector& Delta, float PctOfDeltaToMove, const struct FQuat& Rotation, const struct FVector& Normal, struct FHitResult* Hit, bool bHandleImpact, float FloorSweepDistance, float MaxWalkSlopeCosine, struct FFloorCheckResult* OutFloorResult, struct FMovementRecord* MoveRecord);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AirMovementUtils">();
	}
	static class UAirMovementUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAirMovementUtils>();
	}
};

// Class Mover.MoverComponent
// 0x0270 (0x0310 - 0x00A0)
class UMoverComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(const struct FMoverTimeStep& TimeStep, const struct FMoverInputCmdContext& InputCmd)> OnPreSimulationTick; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMoverTimeStep& TimeStep, struct FMoverSyncState* SyncState, struct FMoverAuxStateContext* AuxState)> OnPostMovement; // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMoverTimeStep& TimeStep)> OnPostSimulationTick;      // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FMoverTimeStep& CurrentTimeStep, const struct FMoverTimeStep& ExpungedTimeStep)> OnPostSimulationRollback; // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FName& PreviousMovementModeName, const class FName& NewMovementModeName)> OnMovementModeChanged; // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            BackendClass;                                      // 0x00F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UBaseMovementMode*>   MovementModes;                                     // 0x00F8(0x0050)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   StartingMovementMode;                              // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBaseMovementModeTransition*>    Transitions;                                       // 0x0150(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FMoverDataPersistence>          PersistentSyncStateDataTypes;                      // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                InputProducer;                                     // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovementMixer*                         MovementMixer;                                     // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x8];                                      // 0x0180(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        UpdatedComponent;                                  // 0x0188(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    UpdatedCompAsPrimitive;                            // 0x0190(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        PrimaryVisualComponent;                            // 0x0198(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A0[0x128];                                    // 0x01A0(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        SharedSettings;                                    // 0x02C8(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                          bHasGravityOverride;                               // 0x02D8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GravityAccelOverride;                              // 0x02E0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSupportsKinematicBasedMovement;                   // 0x02F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovementModeStateMachine*              ModeFSM;                                           // 0x0300(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMoverBlackboard*                       SimBlackboard;                                     // 0x0308(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UBaseMovementMode* AddMovementModeFromClass(class FName ModeName, TSubclassOf<class UBaseMovementMode> MovementMode);
	bool AddMovementModeFromObject(class FName ModeName, class UBaseMovementMode* MovementMode);
	void HandleImpact(struct FMoverOnImpactParams* ImpactParams);
	void K2_QueueLayeredMove(const int32& MoveAsRawData);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	void QueueNextMode(class FName DesiredModeName, bool bShouldReenter);
	bool RemoveMovementMode(class FName ModeName);
	void SetGravityOverride(bool bOverrideGravity, const struct FVector& GravityAcceleration);

	class UBaseMovementMode* FindMovementMode(TSubclassOf<class UBaseMovementMode> MovementMode) const;
	const class UObject* FindSharedSettings_BP(TSubclassOf<class UObject> SharedSetting) const;
	class UObject* FindSharedSettings_Mutable_BP(TSubclassOf<class UObject> SharedSetting) const;
	TArray<struct FTrajectorySampleInfo> GetFutureTrajectory(float FutureSeconds, float SamplesPerSecond) const;
	struct FVector GetGravityAcceleration() const;
	const struct FMoverInputCmdContext GetLastInputCmd() const;
	class UPrimitiveComponent* GetMovementBase() const;
	class FName GetMovementBaseBoneName() const;
	struct FVector GetMovementIntent() const;
	class FName GetMovementModeName() const;
	const class UMoverBlackboard* GetSimBlackboard() const;
	const struct FMoverSyncState GetSyncState() const;
	struct FRotator GetTargetOrientation() const;
	struct FVector GetUpDirection() const;
	struct FVector GetVelocity() const;
	bool HasValidCachedInputCmd() const;
	bool HasValidCachedState() const;
	void K2_FindActiveLayeredMove(bool* DidSucceed, int32* TargetAsRawBytes) const;
	bool TryGetFloorCheckHitResult(struct FHitResult* OutHitResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverComponent">();
	}
	static class UMoverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverComponent>();
	}
};

// Class Mover.CharacterMoverComponent
// 0x0000 (0x0310 - 0x0310)
class UCharacterMoverComponent final : public UMoverComponent
{
public:
	bool IsAirborne() const;
	bool IsFalling() const;
	bool IsOnGround() const;
	bool IsSlopeSliding() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterMoverComponent">();
	}
	static class UCharacterMoverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterMoverComponent>();
	}
};

// Class Mover.CommonLegacyMovementSettings
// 0x0058 (0x0080 - 0x0028)
class UCommonLegacyMovementSettings final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GroundMovementModeName;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AirMovementModeName;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSlopeCosine;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorSweepDistance;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepHeight;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundFriction;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSeparateBrakingFriction : 1;                   // 0x004C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakingFriction;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingFrictionFactor;                             // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningRate;                                       // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurningBoost;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreBaseRotation;                               // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpUpwardsSpeed;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingStartImmersionDepth;                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingIdealImmersionDepth;                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwimmingStopImmersionDepth;                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLegacyMovementSettings">();
	}
	static class UCommonLegacyMovementSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLegacyMovementSettings>();
	}
};

// Class Mover.FloorQueryUtils
// 0x0000 (0x0028 - 0x0028)
class UFloorQueryUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool IsHitSurfaceWalkable(const struct FHitResult& Hit, float MaxWalkSlopeCosine);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FloorQueryUtils">();
	}
	static class UFloorQueryUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFloorQueryUtils>();
	}
};

// Class Mover.GroundMovementUtils
// 0x0000 (0x0028 - 0x0028)
class UGroundMovementUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool CanStepUpOnHitSurface(const struct FHitResult& Hit);
	static struct FProposedMove ComputeControlledGroundMove(const struct FGroundMoveParams& InParams);
	static struct FVector ComputeDeflectedMoveOntoRamp(const struct FVector& OrigMoveDelta, const struct FHitResult& RampHitResult, float MaxWalkSlopeCosine, const bool bHitFromLineTrace);
	static float TryWalkToSlideAlongSurface(class USceneComponent* UpdatedComponent, class UPrimitiveComponent* UpdatedPrimitive, class UMoverComponent* MoverComponent, const struct FVector& Delta, float PctOfDeltaToMove, const struct FQuat& Rotation, const struct FVector& Normal, struct FHitResult* Hit, bool bHandleImpact, struct FMovementRecord* MoveRecord, float MaxWalkSlopeCosine, float MaxStepHeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroundMovementUtils">();
	}
	static class UGroundMovementUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroundMovementUtils>();
	}
};

// Class Mover.TurnGeneratorInterface
// 0x0000 (0x0000 - 0x0000)
class ITurnGeneratorInterface final
{
public:
	struct FRotator GetTurn(const struct FRotator& TargetOrientation, const struct FMoverTickStartData& FullStartState, const struct FMoverDefaultSyncState& MoverState, const struct FMoverTimeStep& TimeStep, const struct FProposedMove& ProposedMove, class UMoverBlackboard* SimBlackboard);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TurnGeneratorInterface">();
	}
	static class ITurnGeneratorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITurnGeneratorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class Mover.LinearTurnGenerator
// 0x0018 (0x0040 - 0x0028)
class ULinearTurnGenerator final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadingRate;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchRate;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollRate;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LinearTurnGenerator">();
	}
	static class ULinearTurnGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULinearTurnGenerator>();
	}
};

// Class Mover.ExactDampedTurnGenerator
// 0x0010 (0x0038 - 0x0028)
class UExactDampedTurnGenerator final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HalfLifeSeconds;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExactDampedTurnGenerator">();
	}
	static class UExactDampedTurnGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExactDampedTurnGenerator>();
	}
};

// Class Mover.BlueprintableTurnGenerator
// 0x0008 (0x0030 - 0x0028)
class UBlueprintableTurnGenerator final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintableTurnGenerator">();
	}
	static class UBlueprintableTurnGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintableTurnGenerator>();
	}
};

// Class Mover.MovementMixer
// 0x0008 (0x0030 - 0x0028)
class UMovementMixer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementMixer">();
	}
	static class UMovementMixer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementMixer>();
	}
};

// Class Mover.MoverBackendLiaisonInterface
// 0x0000 (0x0000 - 0x0000)
class IMoverBackendLiaisonInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverBackendLiaisonInterface">();
	}
	static class IMoverBackendLiaisonInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMoverBackendLiaisonInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class Mover.MoverBlackboard
// 0x0050 (0x0078 - 0x0028)
class UMoverBlackboard final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverBlackboard">();
	}
	static class UMoverBlackboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverBlackboard>();
	}
};

// Class Mover.MoverDataModelBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UMoverDataModelBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector GetLocationFromSyncState(const struct FMoverDefaultSyncState& SyncState);
	static struct FVector GetMoveDirectionIntentFromInputs(const struct FCharacterDefaultInputs& Inputs);
	static struct FVector GetMoveDirectionIntentFromSyncState(const struct FMoverDefaultSyncState& SyncState);
	static struct FRotator GetOrientationFromSyncState(const struct FMoverDefaultSyncState& SyncState);
	static struct FVector GetVelocityFromSyncState(const struct FMoverDefaultSyncState& SyncState);
	static void SetMoveIntent(struct FCharacterDefaultInputs& Inputs, const struct FVector& WorldDirectionIntent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverDataModelBlueprintLibrary">();
	}
	static class UMoverDataModelBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverDataModelBlueprintLibrary>();
	}
};

// Class Mover.MoverDebugComponent
// 0x0078 (0x0118 - 0x00A0)
class UMoverDebugComponent final : public UActorComponent
{
public:
	float                                         LookaheadSeconds;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LookaheadSamplesPerSecond;                         // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTrajectory;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowTrail;                                        // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowCorrections;                                  // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HistoryTrackingSeconds;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HistorySamplesPerSecond;                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x64];                                      // 0x00B4(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHistoryTrackingRollback(const struct FMoverTimeStep& NewTimeStep, const struct FMoverTimeStep& InvalidatedTimeStep);
	void OnMovementSimRollback(const struct FMoverTimeStep& NewTimeStep, const struct FMoverTimeStep& InvalidatedTimeStep);
	void OnMovementSimTick(const struct FMoverTimeStep& TimeStep);
	void SetHistoryTracking(float SecondsToTrack, float SamplesPerSecond);

	TArray<struct FTrajectorySampleInfo> GetPastTrajectory() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverDebugComponent">();
	}
	static class UMoverDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverDebugComponent>();
	}
};

// Class Mover.MoverDeveloperSettings
// 0x0008 (0x0038 - 0x0030)
class UMoverDeveloperSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	int32                                         MaxTimesToRefundSubstep;                           // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverDeveloperSettings">();
	}
	static class UMoverDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverDeveloperSettings>();
	}
};

// Class Mover.MoverNetworkPhysicsLiaisonComponent
// 0x0130 (0x01D0 - 0x00A0)
class UMoverNetworkPhysicsLiaisonComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x130];                                     // 0x00A0(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentPhysicsStateChanged(class UPrimitiveComponent* ChangedComponent, EComponentPhysicsStateChange StateChange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverNetworkPhysicsLiaisonComponent">();
	}
	static class UMoverNetworkPhysicsLiaisonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverNetworkPhysicsLiaisonComponent>();
	}
};

// Class Mover.MoverNetworkPredictionLiaisonComponent
// 0x0020 (0x02B0 - 0x0290)
class UMoverNetworkPredictionLiaisonComponent final : public UNetworkPredictionComponent
{
public:
	uint8                                         Pad_290[0x20];                                     // 0x0290(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverNetworkPredictionLiaisonComponent">();
	}
	static class UMoverNetworkPredictionLiaisonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverNetworkPredictionLiaisonComponent>();
	}
};

// Class Mover.MoverInputProducerInterface
// 0x0000 (0x0000 - 0x0000)
class IMoverInputProducerInterface final
{
public:
	void ProduceInput(int32 SimTimeMs, struct FMoverInputCmdContext* InputCmdResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverInputProducerInterface">();
	}
	static class IMoverInputProducerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMoverInputProducerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class Mover.MoverDataCollectionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMoverDataCollectionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearDataFromCollection(struct FMoverDataCollection& Collection);
	static void K2_AddDataToCollection(struct FMoverDataCollection& Collection, const int32& SourceAsRawBytes);
	static void K2_GetDataFromCollection(bool* DidSucceed, const struct FMoverDataCollection& Collection, int32* TargetAsRawBytes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoverDataCollectionLibrary">();
	}
	static class UMoverDataCollectionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoverDataCollectionLibrary>();
	}
};

// Class Mover.BaseMovementModeTransition
// 0x0008 (0x0030 - 0x0028)
class UBaseMovementModeTransition : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnTrigger(const struct FSimulationTickParams& Params_0);

	struct FTransitionEvalResult K2_OnEvaluate(const struct FSimulationTickParams& Params_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseMovementModeTransition">();
	}
	static class UBaseMovementModeTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseMovementModeTransition>();
	}
};

// Class Mover.PhysicsJumpCheck
// 0x0008 (0x0038 - 0x0030)
class UPhysicsJumpCheck final : public UBaseMovementModeTransition
{
public:
	float                                         JumpUpwardsSpeed;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TransitionToMode;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsJumpCheck">();
	}
	static class UPhysicsJumpCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsJumpCheck>();
	}
};

// Class Mover.PhysicsCharacterMovementModeInterface
// 0x0000 (0x0000 - 0x0000)
class IPhysicsCharacterMovementModeInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsCharacterMovementModeInterface">();
	}
	static class IPhysicsCharacterMovementModeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPhysicsCharacterMovementModeInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class Mover.WaterMovementUtils
// 0x0000 (0x0028 - 0x0028)
class UWaterMovementUtils final : public UBlueprintFunctionLibrary
{
public:
	static struct FProposedMove ComputeControlledWaterMove(const struct FWaterMoveParams& InParams);
	static void UpdateWaterSplineData(const struct FUpdateWaterSplineDataParams& UpdateWaterSplineDataParams, struct FWaterCheckResult* OutWaterResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMovementUtils">();
	}
	static class UWaterMovementUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterMovementUtils>();
	}
};

// Class Mover.BaseMovementMode
// 0x0020 (0x0048 - 0x0028)
class UBaseMovementMode : public UObject
{
public:
	TSubclassOf<class UObject>                    SharedSettingsClass;                               // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBaseMovementModeTransition*>    Transitions;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnRegistered(const class FName ModeName);
	struct FMoverTickEndData K2_OnSimulationTick(const struct FSimulationTickParams& Params_0);
	void K2_OnUnregistered();

	const class UMoverBlackboard* GetBlackboard() const;
	class UMoverBlackboard* GetBlackboard_Mutable() const;
	class UMoverComponent* GetMoverComponent() const;
	struct FProposedMove K2_OnGenerateMove(const struct FMoverTickStartData& StartState, const struct FMoverTimeStep& TimeStep) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseMovementMode">();
	}
	static class UBaseMovementMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseMovementMode>();
	}
};

// Class Mover.FallingMode
// 0x0038 (0x0080 - 0x0048)
class UFallingMode : public UBaseMovementMode
{
public:
	TMulticastInlineDelegate<void(const class FName& NextMovementModeName, const struct FHitResult& HitResult)> OnLanded; // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         AirControlPercentage;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingDeceleration;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverTerminalSpeedFallingDeceleration;              // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerminalMovementPlaneSpeed;                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldClampTerminalVerticalSpeed;                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalFallingDeceleration;                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerminalVerticalSpeed;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSimulationTick(const struct FSimulationTickParams& Params_0, struct FMoverTickEndData* OutputState);

	void OnGenerateMove(const struct FMoverTickStartData& StartState, const struct FMoverTimeStep& TimeStep, struct FProposedMove* OutProposedMove) const;
	void ProcessLanded(const struct FFloorCheckResult& FloorResult, struct FVector* Velocity, struct FRelativeBaseInfo* BaseInfo, struct FMoverTickEndData* TickEndData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FallingMode">();
	}
	static class UFallingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFallingMode>();
	}
};

// Class Mover.FlyingMode
// 0x0008 (0x0050 - 0x0048)
class UFlyingMode : public UBaseMovementMode
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSimulationTick(const struct FSimulationTickParams& Params_0, struct FMoverTickEndData* OutputState);

	void OnGenerateMove(const struct FMoverTickStartData& StartState, const struct FMoverTimeStep& TimeStep, struct FProposedMove* OutProposedMove) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyingMode">();
	}
	static class UFlyingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlyingMode>();
	}
};

// Class Mover.SwimmingMode
// 0x00B0 (0x00F8 - 0x0048)
class USwimmingMode : public UBaseMovementMode
{
public:
	struct FSwimmingControlSettings               SurfaceSwimmingWaterControlSettings;               // 0x0048(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSimulationTick(const struct FSimulationTickParams& Params_0, struct FMoverTickEndData* OutputState);

	void OnGenerateMove(const struct FMoverTickStartData& StartState, const struct FMoverTimeStep& TimeStep, struct FProposedMove* OutProposedMove) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SwimmingMode">();
	}
	static class USwimmingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<USwimmingMode>();
	}
};

// Class Mover.WalkingMode
// 0x0010 (0x0058 - 0x0048)
class UWalkingMode : public UBaseMovementMode
{
public:
	class UObject*                                TurnGenerator;                                     // 0x0048(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UObject* GetTurnGenerator();
	void OnSimulationTick(const struct FSimulationTickParams& Params_0, struct FMoverTickEndData* OutputState);
	void SetTurnGeneratorClass(TSubclassOf<class UObject> TurnGeneratorClass);

	void OnGenerateMove(const struct FMoverTickStartData& StartState, const struct FMoverTimeStep& TimeStep, struct FProposedMove* OutProposedMove) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WalkingMode">();
	}
	static class UWalkingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWalkingMode>();
	}
};

// Class Mover.BasedMovementUtils
// 0x0000 (0x0028 - 0x0028)
class UBasedMovementUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool GetMovementBaseTransform(const class UPrimitiveComponent* MovementBase, const class FName BoneName, struct FVector* OutLocation, struct FQuat* OutQuat);
	static bool IsADynamicBase(const class UPrimitiveComponent* MovementBase);
	static bool IsBaseSimulatingPhysics(const class UPrimitiveComponent* MovementBase);
	static bool TransformBasedDirectionToWorld(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FVector& LocalDirection, struct FVector* OutDirectionWorldSpace);
	static bool TransformBasedLocationToWorld(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FVector& LocalLocation, struct FVector* OutLocationWorldSpace);
	static bool TransformBasedRotatorToWorld(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FRotator& LocalRotator, struct FRotator* OutWorldSpaceRotator);
	static void TransformDirectionToLocal(const struct FQuat& BaseQuat, const struct FVector& WorldSpaceDirection, struct FVector* OutLocalDirection);
	static void TransformDirectionToWorld(const struct FQuat& BaseQuat, const struct FVector& LocalDirection, struct FVector* OutDirectionWorldSpace);
	static void TransformLocationToLocal(const struct FVector& BasePos, const struct FQuat& BaseQuat, const struct FVector& WorldSpaceLocation, struct FVector* OutLocalLocation);
	static void TransformLocationToWorld(const struct FVector& BasePos, const struct FQuat& BaseQuat, const struct FVector& LocalLocation, struct FVector* OutLocationWorldSpace);
	static void TransformRotatorToLocal(const struct FQuat& BaseQuat, const struct FRotator& WorldSpaceRotator, struct FRotator* OutLocalRotator);
	static void TransformRotatorToWorld(const struct FQuat& BaseQuat, const struct FRotator& LocalRotator, struct FRotator* OutWorldSpaceRotator);
	static bool TransformWorldDirectionToBased(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FVector& WorldSpaceDirection, struct FVector* OutLocalDirection);
	static bool TransformWorldLocationToBased(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FVector& WorldSpaceLocation, struct FVector* OutLocalLocation);
	static bool TransformWorldRotatorToBased(const class UPrimitiveComponent* MovementBase, const class FName BoneName, const struct FRotator& WorldSpaceRotator, struct FRotator* OutLocalRotator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasedMovementUtils">();
	}
	static class UBasedMovementUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasedMovementUtils>();
	}
};

// Class Mover.MovementUtils
// 0x0000 (0x0028 - 0x0028)
class UMovementUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool CanEscapeGravity(const struct FVector& PriorVelocity, const struct FVector& NewVelocity, const struct FVector& GravityAccel, float DeltaSeconds);
	static struct FRotator ComputeAngularVelocity(const struct FRotator& From, const struct FRotator& To, float DeltaSeconds, float TurningRateLimit);
	static struct FVector ComputeCombinedVelocity(const struct FComputeCombinedVelocityParams& InParams);
	static struct FVector ComputeDirectionIntent(const struct FVector& MoveInput, EMoveInputType MoveInputType);
	static struct FVector ComputeSlideDelta(const struct FVector& Delta, const float PctOfDeltaToMove, const struct FVector& Normal, const struct FHitResult& Hit);
	static struct FVector ComputeVelocity(const struct FComputeVelocityParams& InParams);
	static struct FVector ComputeVelocityFromGravity(const struct FVector& GravityAccel, float DeltaSeconds);
	static struct FVector ComputeVelocityFromPositions(const struct FVector& FromPos, const struct FVector& ToPos, float DeltaSeconds);
	static struct FVector ConstrainToPlane(const struct FVector& Vector, const struct FPlane& MovementPlane, bool bMaintainMagnitude);
	static bool IsExceedingMaxSpeed(const struct FVector& Velocity, float InMaxSpeed);
	static float TryMoveToSlideAlongSurface(class USceneComponent* UpdatedComponent, class UPrimitiveComponent* UpdatedPrimitive, class UMoverComponent* MoverComponent, const struct FVector& Delta, float PctOfDeltaToMove, const struct FQuat& Rotation, const struct FVector& Normal, struct FHitResult* Hit, bool bHandleImpact, struct FMovementRecord* MoveRecord);
	static bool TrySafeMoveUpdatedComponent(class USceneComponent* UpdatedComponent, class UPrimitiveComponent* UpdatedPrimitive, const struct FVector& Delta, const struct FQuat& NewRotation, bool bSweep, struct FHitResult* OutHit, ETeleportType Teleport, struct FMovementRecord* MoveRecord);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementUtils">();
	}
	static class UMovementUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementUtils>();
	}
};

// Class Mover.PlayMoverMontageCallbackProxy
// 0x0000 (0x00A8 - 0x00A8)
class UPlayMoverMontageCallbackProxy final : public UPlayMontageCallbackProxy
{
public:
	static class UPlayMoverMontageCallbackProxy* CreateProxyObjectForPlayMoverMontage(class UMoverComponent* InMoverComponent, class UAnimMontage* MontageToPlay, float PlayRate, float StartingPosition, class FName StartingSection);

	void OnMoverMontageEnded(class FName IgnoredNotifyName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayMoverMontageCallbackProxy">();
	}
	static class UPlayMoverMontageCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayMoverMontageCallbackProxy>();
	}
};

// Class Mover.MovementSettingsInterface
// 0x0000 (0x0000 - 0x0000)
class IMovementSettingsInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementSettingsInterface">();
	}
	static class IMovementSettingsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMovementSettingsInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class Mover.NullMovementMode
// 0x0000 (0x0048 - 0x0048)
class UNullMovementMode final : public UBaseMovementMode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NullMovementMode">();
	}
	static class UNullMovementMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNullMovementMode>();
	}
};

// Class Mover.MovementModeStateMachine
// 0x0070 (0x0098 - 0x0028)
class UMovementModeStateMachine final : public UObject
{
public:
	TMap<class FName, class UBaseMovementMode*>   Modes;                                             // 0x0028(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UImmediateMovementModeTransition*       QueuedModeTransition;                              // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x18];                                      // 0x0080(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementModeStateMachine">();
	}
	static class UMovementModeStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementModeStateMachine>();
	}
};

// Class Mover.ImmediateMovementModeTransition
// 0x0008 (0x0038 - 0x0030)
class UImmediateMovementModeTransition final : public UBaseMovementModeTransition
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImmediateMovementModeTransition">();
	}
	static class UImmediateMovementModeTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImmediateMovementModeTransition>();
	}
};

// Class Mover.PhysicsDrivenFallingMode
// 0x0018 (0x0098 - 0x0080)
class UPhysicsDrivenFallingMode final : public UFallingMode
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TwistTorqueLimit;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingTorqueLimit;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetHeight;                                      // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsDrivenFallingMode">();
	}
	static class UPhysicsDrivenFallingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsDrivenFallingMode>();
	}
};

// Class Mover.PhysicsDrivenFlyingMode
// 0x0010 (0x0060 - 0x0050)
class UPhysicsDrivenFlyingMode final : public UFlyingMode
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TwistTorqueLimit;                                  // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingTorqueLimit;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsDrivenFlyingMode">();
	}
	static class UPhysicsDrivenFlyingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsDrivenFlyingMode>();
	}
};

// Class Mover.PhysicsDrivenSwimmingMode
// 0x0010 (0x0108 - 0x00F8)
class UPhysicsDrivenSwimmingMode final : public USwimmingMode
{
public:
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetHeight;                                      // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsDrivenSwimmingMode">();
	}
	static class UPhysicsDrivenSwimmingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsDrivenSwimmingMode>();
	}
};

// Class Mover.PhysicsDrivenWalkingMode
// 0x0030 (0x0088 - 0x0058)
class UPhysicsDrivenWalkingMode final : public UWalkingMode
{
public:
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialForceLimit;                                  // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrictionForceLimit;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TwistTorqueLimit;                                  // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingTorqueLimit;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetHeight;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundDamping;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalVelocityToTarget;                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FractionalDownwardVelocityToTarget;                // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUnsupportedTimeBeforeFalling;                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsDrivenWalkingMode">();
	}
	static class UPhysicsDrivenWalkingMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsDrivenWalkingMode>();
	}
};

// Class Mover.PhysicsMoverManager
// 0x0020 (0x0050 - 0x0030)
class UPhysicsMoverManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsMoverManager">();
	}
	static class UPhysicsMoverManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsMoverManager>();
	}
};

}

