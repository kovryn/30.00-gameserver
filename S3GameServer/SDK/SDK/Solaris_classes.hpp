#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Solaris_structs.hpp"
#include "VerseNative_classes.hpp"


namespace SDK
{

// Class Solaris.VerseStruct
// 0x0050 (0x0110 - 0x00C0)
class UVerseStruct final : public UScriptStruct
{
public:
	uint32                                        VerseClassFlags;                                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFunction*                              InitFunction;                                      // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ModuleClass;                                       // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  Guid;                                              // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFunction*                              FactoryFunction;                                   // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFunction*                              OverrideFactoryFunction;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVerseEffectSet                        ConstructorEffects;                                // 0x00F8(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackageRelativeVerseScope;                         // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseStruct">();
	}
	static class UVerseStruct* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseStruct>();
	}
};

// Class Solaris.SolarisWeakMapLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisWeakMapLibrary final : public UObject
{
public:
	static void Call(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void CompletelyAssignedPersistentVarRefCall(const class FString& Path, const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void CompletelyAssignedRefCall(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void FitsInPlayerMap(const struct FGenericValueType& Value);
	static void PersistentVarCall(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void PersistentVarRefCall(const class FString& Path, const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void RefCall(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key);
	static void Type(class UClass* KeyType, class UClass* ValueType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisWeakMapLibrary">();
	}
	static class USolarisWeakMapLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisWeakMapLibrary>();
	}
};

// Class Solaris.VerseAssetsConfig
// 0x0010 (0x0038 - 0x0028)
class UVerseAssetsConfig final : public UObject
{
public:
	TArray<struct FVerseAssetConfig>              AssetConfigs;                                      // 0x0028(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseAssetsConfig">();
	}
	static class UVerseAssetsConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseAssetsConfig>();
	}
};

// Class Solaris.VerseDigest
// 0x0098 (0x00C0 - 0x0028)
class UVerseDigest final : public UObject
{
public:
	TArray<uint8>                                 DigestCode;                                        // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ManifestCode;                                      // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FManifestDependency>            DependencyPackages;                                // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<struct FSoftObjectPath>                  ClassImports;                                      // 0x0058(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 ProjectName;                                       // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerseDigestVariant                           Variant;                                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        VerseVersion;                                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDigest">();
	}
	static class UVerseDigest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDigest>();
	}
};

// Class Solaris.VerseEnum
// 0x0008 (0x0070 - 0x0068)
class UVerseEnum final : public UEnum
{
public:
	EVerseEnumFlags                               VerseEnumFlags;                                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseEnum">();
	}
	static class UVerseEnum* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseEnum>();
	}
};

// Class Solaris.SolarisArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisArrayLibrary final : public UObject
{
public:
	static int64 Add(const TArray<struct FGenericElementType>& Array, const struct FGenericElementType& new_item);
	static void Call(const TArray<struct FGenericElementType>& Array, int64 Index_0);
	static TArray<struct FGenericElementType> Concat(const TArray<struct FGenericElementType>& LHS, const TArray<struct FGenericElementType>& RHS);
	static TArray<struct FGenericElementType> ConcatEquals(TArray<struct FGenericElementType>* LHS, const TArray<struct FGenericElementType>& RHS);
	static void Empty(const TArray<struct FGenericElementType>& Array);
	static int64 Length(const TArray<struct FGenericElementType>& Array);
	static void Move(const TArray<struct FGenericElementType>& Target, const TArray<struct FGenericElementType>& Source);
	static void RefCall(const TArray<struct FGenericElementType>& Array, int64 Index_0);
	static void UnsafeCall(const TArray<struct FGenericElementType>& Array, int64 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisArrayLibrary">();
	}
	static class USolarisArrayLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisArrayLibrary>();
	}
};

// Class Solaris.SolarisCoroutineLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisCoroutineLibrary final : public UObject
{
public:
	static void TaskCancel(class UObject* Task);
	static void TaskComplete(class UObject* Task);
	static void TaskGetReturnProperty(class UObject* Task);
	static int64 TaskGetState(class UObject* Task);
	static class UObject* TaskMake(class UClass* Type, class UObject* Caller, int64 CallerResumeState, int64 CallerCancelState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisCoroutineLibrary">();
	}
	static class USolarisCoroutineLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisCoroutineLibrary>();
	}
};

// Class Solaris.GameFeature_SolarisObserver
// 0x0018 (0x0040 - 0x0028)
class UGameFeature_SolarisObserver final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameFeature_SolarisObserver">();
	}
	static class UGameFeature_SolarisObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameFeature_SolarisObserver>();
	}
};

// Class Solaris.SolarisMapLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisMapLibrary final : public UObject
{
public:
	static void Add(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, const struct FGenericKeyType& Key, const struct FGenericValueType& Value);
	static TMap<struct FGenericKeyType, struct FGenericValueType> Concat(const TMap<struct FGenericKeyType, struct FGenericValueType>& LHS, const TMap<struct FGenericKeyType, struct FGenericValueType>& RHS);
	static struct FGenericKeyType GetKeyByIndex(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, int64 Index_0);
	static int64 GetNextValidIndex(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, int64 InitialIndex);
	static struct FGenericValueType GetValueByIndex(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map, int64 Index_0);
	static void InitMap(TMap<struct FGenericKeyType, struct FGenericValueType>* Map);
	static int64 Length(const TMap<struct FGenericKeyType, struct FGenericValueType>& Map);
	static void Move(TMap<struct FGenericKeyType, struct FGenericValueType>* Dest, const TMap<struct FGenericKeyType, struct FGenericValueType>& Src);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMapLibrary">();
	}
	static class USolarisMapLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMapLibrary>();
	}
};

// Class Solaris.SolarisMathLibrary_Bool
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Bool final : public UObject
{
public:
	static void Query();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Bool">();
	}
	static class USolarisMathLibrary_Bool* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Bool>();
	}
};

// Class Solaris.SolarisMathLibrary_Int
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Int final : public UObject
{
public:
	static void abs(int64 Value);
	static void Add(int64 LHS, int64 RHS);
	static void AddEquals(int64* LHS, int64 RHS);
	static void CheckConstrainedInt(int64 Min, int64 Max, int64 Value);
	static void Divide(int64 LHS, int64 RHS);
	static void Greater(int64 LHS, int64 RHS);
	static void GreaterEqual(int64 LHS, int64 RHS);
	static void Less(int64 LHS, int64 RHS);
	static void LessEqual(int64 LHS, int64 RHS);
	static void Multiply(int64 LHS, int64 RHS);
	static void MultiplyEquals(int64* LHS, int64 RHS);
	static void Negate(int64 Value);
	static bool PredicateEqual(int64 LHS, int64 RHS);
	static bool PredicateGreater(int64 LHS, int64 RHS);
	static bool PredicateGreaterEqual(int64 LHS, int64 RHS);
	static bool PredicateLess(int64 LHS, int64 RHS);
	static bool PredicateLessEqual(int64 LHS, int64 RHS);
	static bool PredicateNotEqual(int64 LHS, int64 RHS);
	static void Subtract(int64 LHS, int64 RHS);
	static void SubtractEquals(int64* LHS, int64 RHS);
	static int32 UncheckedConvertI32I64(int64 RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Int">();
	}
	static class USolarisMathLibrary_Int* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Int>();
	}
};

// Class Solaris.SolarisMathLibrary_Rational
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Rational final : public UObject
{
public:
	static void ceil(const struct FVerseRational& Val);
	static void floor(const struct FVerseRational& Val);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Rational">();
	}
	static class USolarisMathLibrary_Rational* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Rational>();
	}
};

// Class Solaris.SolarisMathLibrary_Float
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Float final : public UObject
{
public:
	static double abs(double Value);
	static double Add(double LHS, double RHS);
	static void AddEquals(double* LHS, double RHS);
	static void CheckConstrainedFloat(double Min, double Max, double Value);
	static double Divide(double LHS, double RHS);
	static void DivideEquals(double* LHS, double RHS);
	static void Greater(double LHS, double RHS);
	static void GreaterEqual(double LHS, double RHS);
	static void Less(double LHS, double RHS);
	static void LessEqual(double LHS, double RHS);
	static double Multiply(double LHS, double RHS);
	static void MultiplyEquals(double* LHS, double RHS);
	static double MultiplyFloatInt(double LHS, int64 RHS);
	static double MultiplyIntFloat(int64 LHS, double RHS);
	static double Negate(double Value);
	static double Subtract(double LHS, double RHS);
	static void SubtractEquals(double* LHS, double RHS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Float">();
	}
	static class USolarisMathLibrary_Float* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Float>();
	}
};

// Class Solaris.SolarisMathLibrary_String
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_String final : public UObject
{
public:
	static void Add(const int32& String, int8 Character);
	static void Call(const int32& String, int64 Index_0);
	static int32 Concat(const int32& LHS, const int32& RHS);
	static int32 ConcatEquals(int32* LHS, const int32& RHS);
	static int64 Length(const int32& Array);
	static void Make();
	static int32 MakeLiteral();
	static void Move(const int32& Destination, const int32& Source);
	static void RefCall(const int32& String, int64 Index_0);
	static void UncheckedCall(const int32& String, int64 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_String">();
	}
	static class USolarisMathLibrary_String* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_String>();
	}
};

// Class Solaris.SolarisMathLibrary_Option
// 0x0000 (0x0028 - 0x0028)
class USolarisMathLibrary_Option final : public UObject
{
public:
	static void Make();
	static void Query();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisMathLibrary_Option">();
	}
	static class USolarisMathLibrary_Option* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisMathLibrary_Option>();
	}
};

// Class Solaris.SolarisGameFeaturePluginObserver
// 0x0008 (0x0030 - 0x0028)
class USolarisGameFeaturePluginObserver final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisGameFeaturePluginObserver">();
	}
	static class USolarisGameFeaturePluginObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGameFeaturePluginObserver>();
	}
};

// Class Solaris.SolarisGameSettings
// 0x0018 (0x0040 - 0x0028)
class USolarisGameSettings final : public UObject
{
public:
	TArray<class FString>                         Blacklist;                                         // 0x0028(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         MaxAllowedSize;                                    // 0x0038(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisGameSettings">();
	}
	static class USolarisGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisGameSettings>();
	}
};

// Class Solaris.SolarisUtilLibrary
// 0x0000 (0x0028 - 0x0028)
class USolarisUtilLibrary final : public UObject
{
public:
	static void AddPropertyToSubobjectExclusionList(int64 InstancingGraph, int64 Property);
	static int64 Addressof(int64 Value);
	static void CallFinalFunctionWithContext();
	static void CallFunction();
	static int64 Dereference(int64 Reference);
	static class UObject* GetCurrentlyInstantiatedObject();
	static void GetFunctionForInterfaceMethod(class UObject* Object, class FName MethodName);
	static int64 GetOptionValue(int64 Option);
	static bool HasInterface(class UObject* Object, class UClass* InterfaceClass);
	static void InstanceFunction(class UObject* Object, class FName MethodName);
	static void InstantiateObject(class UClass* Class_0, int64 InstancingGraph);
	static bool IsNonNullObject(class UObject* Object);
	static bool IsOptionSet(int64 Option);
	static bool MakeOptionFromValue(class UObject* Property, int64 Value);
	static int64 MakeUnsetOption();
	static bool ObjectHasNoFlags(class UObject* Object, int32 Flags_0);
	static void ReadClassVar();
	static bool ReferenceIsValid(int64 Reference);
	static int64 ReplaceOptionValue(int64 ResultProperty, int64 Option, int64 Value);
	static int64 Validate(int64 Property, int64 Value);
	static void WriteClassVar();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SolarisUtilLibrary">();
	}
	static class USolarisUtilLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USolarisUtilLibrary>();
	}
};

// Class Solaris.VerseClass
// 0x01A0 (0x03A0 - 0x0200)
class UVerseClass final : public UVerseClassBase
{
public:
	uint32                                        SolClassFlags;                                     // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UObject>>            TaskClasses;                                       // 0x0208(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UObject>>              InterfaceClasses;                                  // 0x0218(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TFieldPath<class FProperty>> InterfaceMethodFunctionProperties;                // 0x0268(0x0050)(NativeAccessSpecifierPublic)
	class UFunction*                              InitInstanceFunction;                              // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVersePersistentVar>            PersistentVars;                                    // 0x02C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVerseSessionVar>               SessionVars;                                       // 0x02D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVerseClassVarAccessors> VarAccessors;                                  // 0x02E0(0x0050)(NativeAccessSpecifierPublic)
	struct FVerseEffectSet                        ConstructorEffects;                                // 0x0330(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackageRelativeVerseScope;                         // 0x0338(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                MangledToDisplayNameMap;                           // 0x0348(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseClass">();
	}
	static class UVerseClass* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseClass>();
	}
};

// Class Solaris.VerseDebugData
// 0x0010 (0x0038 - 0x0028)
class UVerseDebugData final : public UObject
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDebugData">();
	}
	static class UVerseDebugData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDebugData>();
	}
};

// Class Solaris.VerseDynamicallyTypedValueLibrary
// 0x0000 (0x0028 - 0x0028)
class UVerseDynamicallyTypedValueLibrary final : public UObject
{
public:
	static void ConvertFromDynamicallyTypedValue(int32 RuntimeType, int32 Value);
	static void ConvertToDynamicallyTypedValue(int32 RuntimeType, int32 Value);
	static void Equal(int32 Left, int32 Right);
	static void MakeRuntimeTypeArray(int32 ElementType);
	static void MakeRuntimeTypeChar32();
	static void MakeRuntimeTypeChar8();
	static void MakeRuntimeTypeClass();
	static void MakeRuntimeTypeDynamic();
	static void MakeRuntimeTypeEnum(class FName Name_0);
	static void MakeRuntimeTypeFloat();
	static void MakeRuntimeTypeFunction();
	static void MakeRuntimeTypeInt64();
	static void MakeRuntimeTypeLogic();
	static void MakeRuntimeTypeMap(int32 KeyType, int32 ValueType);
	static void MakeRuntimeTypeObject();
	static void MakeRuntimeTypeOption(int32 ValueType);
	static void MakeRuntimeTypeString();
	static void MakeRuntimeTypeStruct(class UStruct* Struct);
	static void MakeRuntimeTypeTuple(const TArray<int32>& ValueType);
	static void NotEqual(int32 Left, int32 Right);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VerseDynamicallyTypedValueLibrary">();
	}
	static class UVerseDynamicallyTypedValueLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVerseDynamicallyTypedValueLibrary>();
	}
};

}

