#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchQuestsRuntime

#include "Basic.hpp"

#include "MatchQuestsRuntime_classes.hpp"
#include "MatchQuestsRuntime_parameters.hpp"


namespace SDK
{

// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.OnLandedFromBus
// (Final, Native, Private)
// Parameters:
// class AFortPlayerControllerZone*        PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerStateComponent_MatchQuests::OnLandedFromBus(class AFortPlayerControllerZone* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerStateComponent_MatchQuests", "OnLandedFromBus");

	Params::FortPlayerStateComponent_MatchQuests_OnLandedFromBus Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.Server_SetSelectedQuest
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const TScriptInterface<class IQuestDefinitionInterface>&Quest                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerStateComponent_MatchQuests::Server_SetSelectedQuest(const TScriptInterface<class IQuestDefinitionInterface>& Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerStateComponent_MatchQuests", "Server_SetSelectedQuest");

	Params::FortPlayerStateComponent_MatchQuests_Server_SetSelectedQuest Parms{};

	Parms.Quest = Quest;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.TryToGrantSelectedQuest
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FFortGamePhaseUpdatedEvent&FortGamePhaseUpdatedEvent                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortPlayerStateComponent_MatchQuests::TryToGrantSelectedQuest(const struct FFortGamePhaseUpdatedEvent& FortGamePhaseUpdatedEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerStateComponent_MatchQuests", "TryToGrantSelectedQuest");

	Params::FortPlayerStateComponent_MatchQuests_TryToGrantSelectedQuest Parms{};

	Parms.FortGamePhaseUpdatedEvent = std::move(FortGamePhaseUpdatedEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.OnRep_QuestOffering
// (Final, Native, Private, Const)

void UFortPlayerStateComponent_MatchQuests::OnRep_QuestOffering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerStateComponent_MatchQuests", "OnRep_QuestOffering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.FortPlayerStateComponent_MatchQuests.OnRep_SquadSelections
// (Final, Native, Private, Const)

void UFortPlayerStateComponent_MatchQuests::OnRep_SquadSelections() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerStateComponent_MatchQuests", "OnRep_SquadSelections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_LogAvailableQuestsPool
// (Final, Exec, Native, Private)

void UMatchQuestsCheatManager::MatchQuests_LogAvailableQuestsPool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_LogAvailableQuestsPool");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_LogRNGSeeds
// (Final, Exec, Native, Private)

void UMatchQuestsCheatManager::MatchQuests_LogRNGSeeds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_LogRNGSeeds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_ForceQuestInOffer
// (Final, Exec, Native, Private, Const)
// Parameters:
// const class FString&                    QuestName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchQuestsCheatManager::MatchQuests_ForceQuestInOffer(const class FString& QuestName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_ForceQuestInOffer");

	Params::MatchQuestsCheatManager_MatchQuests_ForceQuestInOffer Parms{};

	Parms.QuestName = std::move(QuestName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_LogReportSimulatedRolls
// (Final, Exec, Native, Private, Const)
// Parameters:
// const int32                             RollsToSimulate                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMatchQuestsCheatManager::MatchQuests_LogReportSimulatedRolls(const int32 RollsToSimulate) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_LogReportSimulatedRolls");

	Params::MatchQuestsCheatManager_MatchQuests_LogReportSimulatedRolls Parms{};

	Parms.RollsToSimulate = RollsToSimulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_LogSquadSelections
// (Final, Exec, Native, Private, Const)

void UMatchQuestsCheatManager::MatchQuests_LogSquadSelections() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_LogSquadSelections");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MatchQuestsRuntime.MatchQuestsCheatManager.MatchQuests_RollNewOffer
// (Final, Exec, Native, Private, Const)

void UMatchQuestsCheatManager::MatchQuests_RollNewOffer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchQuestsCheatManager", "MatchQuests_RollNewOffer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

