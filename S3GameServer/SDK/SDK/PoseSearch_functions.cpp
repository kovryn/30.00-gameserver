#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PoseSearch

#include "Basic.hpp"

#include "PoseSearch_classes.hpp"
#include "PoseSearch_parameters.hpp"


namespace SDK
{

// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult*     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMotionMatchingAnimNodeReference ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMotionMatchingAnimNodeReference UMotionMatchingAnimNodeLibrary::ConvertToMotionMatchingNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "ConvertToMotionMatchingNode");

	Params::MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNode Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.ConvertToMotionMatchingNodePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMotionMatchingAnimNodeReference*MotionMatchingNode                                     (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::ConvertToMotionMatchingNodePure(const struct FAnimNodeReference& Node, struct FMotionMatchingAnimNodeReference* MotionMatchingNode, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "ConvertToMotionMatchingNodePure");

	Params::MotionMatchingAnimNodeLibrary_ConvertToMotionMatchingNodePure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MotionMatchingNode != nullptr)
		*MotionMatchingNode = std::move(Parms.MotionMatchingNode);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.GetMotionMatchingSearchResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMotionMatchingAnimNodeReference&MotionMatchingNode                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPoseSearchBlueprintResult*      Result                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   bIsResultValid                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::GetMotionMatchingSearchResult(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, struct FPoseSearchBlueprintResult* Result, bool* bIsResultValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "GetMotionMatchingSearchResult");

	Params::MotionMatchingAnimNodeLibrary_GetMotionMatchingSearchResult Parms{};

	Parms.MotionMatchingNode = std::move(MotionMatchingNode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	if (bIsResultValid != nullptr)
		*bIsResultValid = Parms.bIsResultValid;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.ResetDatabasesToSearch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMotionMatchingAnimNodeReference&MotionMatchingNode                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EPoseSearchInterruptMode                InterruptMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::ResetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, EPoseSearchInterruptMode InterruptMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "ResetDatabasesToSearch");

	Params::MotionMatchingAnimNodeLibrary_ResetDatabasesToSearch Parms{};

	Parms.MotionMatchingNode = std::move(MotionMatchingNode);
	Parms.InterruptMode = InterruptMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabasesToSearch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMotionMatchingAnimNodeReference&MotionMatchingNode                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<class UPoseSearchDatabase*>&Databases                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPoseSearchInterruptMode                InterruptMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::SetDatabasesToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, const TArray<class UPoseSearchDatabase*>& Databases, EPoseSearchInterruptMode InterruptMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "SetDatabasesToSearch");

	Params::MotionMatchingAnimNodeLibrary_SetDatabasesToSearch Parms{};

	Parms.MotionMatchingNode = std::move(MotionMatchingNode);
	Parms.Databases = std::move(Databases);
	Parms.InterruptMode = InterruptMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetDatabaseToSearch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMotionMatchingAnimNodeReference&MotionMatchingNode                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UPoseSearchDatabase*              Database                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPoseSearchInterruptMode                InterruptMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::SetDatabaseToSearch(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, class UPoseSearchDatabase* Database, EPoseSearchInterruptMode InterruptMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "SetDatabaseToSearch");

	Params::MotionMatchingAnimNodeLibrary_SetDatabaseToSearch Parms{};

	Parms.MotionMatchingNode = std::move(MotionMatchingNode);
	Parms.Database = Database;
	Parms.InterruptMode = InterruptMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PoseSearch.MotionMatchingAnimNodeLibrary.SetInterruptMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMotionMatchingAnimNodeReference&MotionMatchingNode                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EPoseSearchInterruptMode                InterruptMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMotionMatchingAnimNodeLibrary::SetInterruptMode(const struct FMotionMatchingAnimNodeReference& MotionMatchingNode, EPoseSearchInterruptMode InterruptMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MotionMatchingAnimNodeLibrary", "SetInterruptMode");

	Params::MotionMatchingAnimNodeLibrary_SetInterruptMode Parms{};

	Parms.MotionMatchingNode = std::move(MotionMatchingNode);
	Parms.InterruptMode = InterruptMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PoseSearch.PoseSearchFeatureChannel_Heading.BP_GetWorldRotation
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UAnimInstance*              AnimInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat UPoseSearchFeatureChannel_Heading::BP_GetWorldRotation(const class UAnimInstance* AnimInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoseSearchFeatureChannel_Heading", "BP_GetWorldRotation");

	Params::PoseSearchFeatureChannel_Heading_BP_GetWorldRotation Parms{};

	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchFeatureChannel_Position.BP_GetWorldPosition
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UAnimInstance*              AnimInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPoseSearchFeatureChannel_Position::BP_GetWorldPosition(const class UAnimInstance* AnimInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoseSearchFeatureChannel_Position", "BP_GetWorldPosition");

	Params::PoseSearchFeatureChannel_Position_BP_GetWorldPosition Parms{};

	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchFeatureChannel_TimeToEvent.BP_GetTimeToEvent
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UAnimInstance*              AnimInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPoseSearchFeatureChannel_TimeToEvent::BP_GetTimeToEvent(const class UAnimInstance* AnimInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoseSearchFeatureChannel_TimeToEvent", "BP_GetTimeToEvent");

	Params::PoseSearchFeatureChannel_TimeToEvent_BP_GetTimeToEvent Parms{};

	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchFeatureChannel_Velocity.BP_GetWorldVelocity
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const class UAnimInstance*              AnimInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPoseSearchFeatureChannel_Velocity::BP_GetWorldVelocity(const class UAnimInstance* AnimInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoseSearchFeatureChannel_Velocity", "BP_GetWorldVelocity");

	Params::PoseSearchFeatureChannel_Velocity_BP_GetWorldVelocity Parms{};

	Parms.AnimInstance = AnimInstance;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.ConvertToPoseHistoryNode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult*     Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoseSearchHistoryCollectorAnimNodeReferenceReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FPoseSearchHistoryCollectorAnimNodeReference UPoseSearchHistoryCollectorAnimNodeLibrary::ConvertToPoseHistoryNode(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchHistoryCollectorAnimNodeLibrary", "ConvertToPoseHistoryNode");

	Params::PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNode Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.ConvertToPoseHistoryNodePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAnimNodeReference&        Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPoseSearchHistoryCollectorAnimNodeReference*PoseSearchHistoryCollectorNode                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchHistoryCollectorAnimNodeLibrary::ConvertToPoseHistoryNodePure(const struct FAnimNodeReference& Node, struct FPoseSearchHistoryCollectorAnimNodeReference* PoseSearchHistoryCollectorNode, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchHistoryCollectorAnimNodeLibrary", "ConvertToPoseHistoryNodePure");

	Params::PoseSearchHistoryCollectorAnimNodeLibrary_ConvertToPoseHistoryNodePure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PoseSearchHistoryCollectorNode != nullptr)
		*PoseSearchHistoryCollectorNode = std::move(Parms.PoseSearchHistoryCollectorNode);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.GetPoseHistoryNodeTrajectory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPoseSearchHistoryCollectorAnimNodeReference&PoseSearchHistoryCollectorNode                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPoseSearchQueryTrajectory*      Trajectory                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void UPoseSearchHistoryCollectorAnimNodeLibrary::GetPoseHistoryNodeTrajectory(const struct FPoseSearchHistoryCollectorAnimNodeReference& PoseSearchHistoryCollectorNode, struct FPoseSearchQueryTrajectory* Trajectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchHistoryCollectorAnimNodeLibrary", "GetPoseHistoryNodeTrajectory");

	Params::PoseSearchHistoryCollectorAnimNodeLibrary_GetPoseHistoryNodeTrajectory Parms{};

	Parms.PoseSearchHistoryCollectorNode = std::move(PoseSearchHistoryCollectorNode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Trajectory != nullptr)
		*Trajectory = std::move(Parms.Trajectory);
}


// Function PoseSearch.PoseSearchHistoryCollectorAnimNodeLibrary.SetPoseHistoryNodeTrajectory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseSearchHistoryCollectorAnimNodeReference&PoseSearchHistoryCollectorNode                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPoseSearchQueryTrajectory&Trajectory                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UPoseSearchHistoryCollectorAnimNodeLibrary::SetPoseHistoryNodeTrajectory(const struct FPoseSearchHistoryCollectorAnimNodeReference& PoseSearchHistoryCollectorNode, const struct FPoseSearchQueryTrajectory& Trajectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchHistoryCollectorAnimNodeLibrary", "SetPoseHistoryNodeTrajectory");

	Params::PoseSearchHistoryCollectorAnimNodeLibrary_SetPoseHistoryNodeTrajectory Parms{};

	Parms.PoseSearchHistoryCollectorNode = std::move(PoseSearchHistoryCollectorNode);
	Parms.Trajectory = std::move(Trajectory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PoseSearch.PoseSearchMultiSequence.GetSequence
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName&                      Role                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequenceBase* UPoseSearchMultiSequence::GetSequence(const class FName& Role) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PoseSearchMultiSequence", "GetSequence");

	Params::PoseSearchMultiSequence_GetSequence Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PoseSearch.PoseSearchTrajectoryLibrary.GetTrajectorySampleAtTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FPoseSearchQueryTrajectory&InTrajectory                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoseSearchQueryTrajectorySample*OutTrajectorySample                                    (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bExtrapolate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchTrajectoryLibrary::GetTrajectorySampleAtTime(const struct FPoseSearchQueryTrajectory& InTrajectory, float Time, struct FPoseSearchQueryTrajectorySample* OutTrajectorySample, bool bExtrapolate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchTrajectoryLibrary", "GetTrajectorySampleAtTime");

	Params::PoseSearchTrajectoryLibrary_GetTrajectorySampleAtTime Parms{};

	Parms.InTrajectory = std::move(InTrajectory);
	Parms.Time = Time;
	Parms.bExtrapolate = bExtrapolate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrajectorySample != nullptr)
		*OutTrajectorySample = std::move(Parms.OutTrajectorySample);
}


// Function PoseSearch.PoseSearchTrajectoryLibrary.HandleTrajectoryWorldCollisions
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UAnimInstance*              AnimInstance                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPoseSearchQueryTrajectory&InTrajectory                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bApplyGravity                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FloorCollisionsOffset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoseSearchQueryTrajectory*      OutTrajectory                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FPoseSearchTrajectory_WorldCollisionResults*CollisionResult                                        (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// EDrawDebugTrace                         DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxObstacleHeight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchTrajectoryLibrary::HandleTrajectoryWorldCollisions(const class UObject* WorldContextObject, const class UAnimInstance* AnimInstance, const struct FPoseSearchQueryTrajectory& InTrajectory, bool bApplyGravity, float FloorCollisionsOffset, struct FPoseSearchQueryTrajectory* OutTrajectory, struct FPoseSearchTrajectory_WorldCollisionResults* CollisionResult, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DrawDebugType, bool bIgnoreSelf, float MaxObstacleHeight, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchTrajectoryLibrary", "HandleTrajectoryWorldCollisions");

	Params::PoseSearchTrajectoryLibrary_HandleTrajectoryWorldCollisions Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AnimInstance = AnimInstance;
	Parms.InTrajectory = std::move(InTrajectory);
	Parms.bApplyGravity = bApplyGravity;
	Parms.FloorCollisionsOffset = FloorCollisionsOffset;
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.MaxObstacleHeight = MaxObstacleHeight;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTrajectory != nullptr)
		*OutTrajectory = std::move(Parms.OutTrajectory);

	if (CollisionResult != nullptr)
		*CollisionResult = std::move(Parms.CollisionResult);
}


// Function PoseSearch.PoseSearchTrajectoryLibrary.PoseSearchGenerateTrajectory
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UAnimInstance*              InAnimInstance                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPoseSearchTrajectoryData& InTrajectoryData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoseSearchQueryTrajectory&      InOutTrajectory                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float&                                  InOutDesiredControllerYawLastUpdate                    (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPoseSearchQueryTrajectory*      OutTrajectory                                          (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   InHistorySamplingInterval                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTrajectoryHistoryCount                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPredictionSamplingInterval                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTrajectoryPredictionCount                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchTrajectoryLibrary::PoseSearchGenerateTrajectory(const class UAnimInstance* InAnimInstance, const struct FPoseSearchTrajectoryData& InTrajectoryData, float InDeltaTime, struct FPoseSearchQueryTrajectory& InOutTrajectory, float& InOutDesiredControllerYawLastUpdate, struct FPoseSearchQueryTrajectory* OutTrajectory, float InHistorySamplingInterval, int32 InTrajectoryHistoryCount, float InPredictionSamplingInterval, int32 InTrajectoryPredictionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchTrajectoryLibrary", "PoseSearchGenerateTrajectory");

	Params::PoseSearchTrajectoryLibrary_PoseSearchGenerateTrajectory Parms{};

	Parms.InAnimInstance = InAnimInstance;
	Parms.InTrajectoryData = std::move(InTrajectoryData);
	Parms.InDeltaTime = InDeltaTime;
	Parms.InOutTrajectory = std::move(InOutTrajectory);
	Parms.InOutDesiredControllerYawLastUpdate = InOutDesiredControllerYawLastUpdate;
	Parms.InHistorySamplingInterval = InHistorySamplingInterval;
	Parms.InTrajectoryHistoryCount = InTrajectoryHistoryCount;
	Parms.InPredictionSamplingInterval = InPredictionSamplingInterval;
	Parms.InTrajectoryPredictionCount = InTrajectoryPredictionCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutTrajectory = std::move(Parms.InOutTrajectory);
	InOutDesiredControllerYawLastUpdate = Parms.InOutDesiredControllerYawLastUpdate;

	if (OutTrajectory != nullptr)
		*OutTrajectory = std::move(Parms.OutTrajectory);
}


// Function PoseSearch.PoseSearchLibrary.MotionMatch
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UObject*>&           AssetsToSearch                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FName                       PoseHistoryName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPoseSearchContinuingProperties&ContinuingProperties                                   (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FPoseSearchFutureProperties&Future                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPoseSearchBlueprintResult*      Result                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             DebugSessionUniqueIdentifier                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchLibrary::MotionMatch(class UAnimInstance* AnimInstance, const TArray<class UObject*>& AssetsToSearch, const class FName PoseHistoryName, const struct FPoseSearchContinuingProperties& ContinuingProperties, const struct FPoseSearchFutureProperties& Future, struct FPoseSearchBlueprintResult* Result, const int32 DebugSessionUniqueIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchLibrary", "MotionMatch");

	Params::PoseSearchLibrary_MotionMatch Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.AssetsToSearch = std::move(AssetsToSearch);
	Parms.PoseHistoryName = PoseHistoryName;
	Parms.ContinuingProperties = std::move(ContinuingProperties);
	Parms.Future = std::move(Future);
	Parms.DebugSessionUniqueIdentifier = DebugSessionUniqueIdentifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function PoseSearch.PoseSearchLibrary.MotionMatchMulti
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<class ACharacter*>&        Characters                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class FName>&              Roles                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class UObject*>&           AssetsToSearch                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FName                       PoseHistoryName                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FPoseSearchContinuingProperties&ContinuingProperties                                   (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPoseSearchBlueprintResult*      Result                                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             DebugSessionUniqueIdentifier                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPoseSearchLibrary::MotionMatchMulti(const TArray<class ACharacter*>& Characters, const TArray<class FName>& Roles, const TArray<class UObject*>& AssetsToSearch, const class FName PoseHistoryName, const struct FPoseSearchContinuingProperties& ContinuingProperties, struct FPoseSearchBlueprintResult* Result, const int32 DebugSessionUniqueIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PoseSearchLibrary", "MotionMatchMulti");

	Params::PoseSearchLibrary_MotionMatchMulti Parms{};

	Parms.Characters = std::move(Characters);
	Parms.Roles = std::move(Roles);
	Parms.AssetsToSearch = std::move(AssetsToSearch);
	Parms.PoseHistoryName = PoseHistoryName;
	Parms.ContinuingProperties = std::move(ContinuingProperties);
	Parms.DebugSessionUniqueIdentifier = DebugSessionUniqueIdentifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

