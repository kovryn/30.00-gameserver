#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NitroGameplayRuntime

#include "Basic.hpp"

#include "NitroGameplayRuntime_classes.hpp"
#include "NitroGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function NitroGameplayRuntime.FortGA_NitroBashBase.BP_OnVehicleDestroyedBuiding
// (Event, Public, BlueprintEvent)

void UFortGA_NitroBashBase::BP_OnVehicleDestroyedBuiding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGA_NitroBashBase", "BP_OnVehicleDestroyedBuiding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitroGameplayRuntime.FortGCNL_Nitro_Active_Base.UpdateCurrentSpeed
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewCurrentSpeed                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGCNL_Nitro_Active_Base::UpdateCurrentSpeed(float NewCurrentSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGCNL_Nitro_Active_Base", "UpdateCurrentSpeed");

	Params::FortGCNL_Nitro_Active_Base_UpdateCurrentSpeed Parms{};

	Parms.NewCurrentSpeed = NewCurrentSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortGCNL_Nitro_Active_Base.UpdateDurationAndVFXParameters
// (Final, Native, Private)

void AFortGCNL_Nitro_Active_Base::UpdateDurationAndVFXParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGCNL_Nitro_Active_Base", "UpdateDurationAndVFXParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortGCNL_Nitro_Active_Base.UpdateRemainingDuration
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewRemainingDuration                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGCNL_Nitro_Active_Base::UpdateRemainingDuration(float NewRemainingDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGCNL_Nitro_Active_Base", "UpdateRemainingDuration");

	Params::FortGCNL_Nitro_Active_Base_UpdateRemainingDuration Parms{};

	Parms.NewRemainingDuration = NewRemainingDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortPawnComponent_NitroPlayerState.EndNitroState
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UFortPawnComponent_NitroPlayerState::EndNitroState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_NitroPlayerState", "EndNitroState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortPawnComponent_NitroPlayerState.HandleControllerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      OldController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      NewController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_NitroPlayerState::HandleControllerChanged(class APawn* Pawn, class AController* OldController, class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_NitroPlayerState", "HandleControllerChanged");

	Params::FortPawnComponent_NitroPlayerState_HandleControllerChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.OldController = OldController;
	Parms.NewController = NewController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortPawnComponent_NitroPlayerState.StartNitroPlayerStateMovement
// (Native, Public, BlueprintCallable)

void UFortPawnComponent_NitroPlayerState::StartNitroPlayerStateMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_NitroPlayerState", "StartNitroPlayerStateMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortWeaponNitroGauntlets.CleanupAsyncTargeting
// (Final, Native, Public, BlueprintCallable)

void AFortWeaponNitroGauntlets::CleanupAsyncTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponNitroGauntlets", "CleanupAsyncTargeting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortWeaponNitroGauntlets.UpdatePunchPreviewNative
// (Final, Native, Public, BlueprintCallable)

void AFortWeaponNitroGauntlets::UpdatePunchPreviewNative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponNitroGauntlets", "UpdatePunchPreviewNative");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroGameplayRuntime.FortWeaponNitroGauntlets.IsAirPunch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFortWeaponNitroGauntlets::IsAirPunch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponNitroGauntlets", "IsAirPunch");

	Params::FortWeaponNitroGauntlets_IsAirPunch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitroGameplayRuntime.NitroGameplayAnalytics.RegisterNitroAnalytics
// (Final, BlueprintAuthorityOnly, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class AFortPlayerController*      FortPlayerController                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Source                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNitroGameplayAnalytics::RegisterNitroAnalytics(const class AFortPlayerController* FortPlayerController, const class FString& Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NitroGameplayAnalytics", "RegisterNitroAnalytics");

	Params::NitroGameplayAnalytics_RegisterNitroAnalytics Parms{};

	Parms.FortPlayerController = FortPlayerController;
	Parms.Source = std::move(Source);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

