#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "MantisRuntime_classes.hpp"
#include "MantisRuntime_parameters.hpp"


namespace SDK
{

// Function MantisRuntime.FortMantisAnimInstance.OnMantisTechniqueEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             TechniqueIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisAnimInstance::OnMantisTechniqueEnded(const int32 TechniqueIndex, const class FName TechniqueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisAnimInstance", "OnMantisTechniqueEnded");

	Params::FortMantisAnimInstance_OnMantisTechniqueEnded Parms{};

	Parms.TechniqueIndex = TechniqueIndex;
	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortMantisAnimInstance.OnMantisTechniqueStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             TechniqueIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisAnimInstance::OnMantisTechniqueStarted(const int32 TechniqueIndex, const class FName TechniqueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisAnimInstance", "OnMantisTechniqueStarted");

	Params::FortMantisAnimInstance_OnMantisTechniqueStarted Parms{};

	Parms.TechniqueIndex = TechniqueIndex;
	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortMantisLayerAnimInstance.OnMantisTechniqueEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             TechniqueIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisLayerAnimInstance::OnMantisTechniqueEnded(const int32 TechniqueIndex, const class FName TechniqueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisLayerAnimInstance", "OnMantisTechniqueEnded");

	Params::FortMantisLayerAnimInstance_OnMantisTechniqueEnded Parms{};

	Parms.TechniqueIndex = TechniqueIndex;
	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortMantisLayerAnimInstance.OnMantisTechniqueStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             TechniqueIndex                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisLayerAnimInstance::OnMantisTechniqueStarted(const int32 TechniqueIndex, const class FName TechniqueName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisLayerAnimInstance", "OnMantisTechniqueStarted");

	Params::FortMantisLayerAnimInstance_OnMantisTechniqueStarted Parms{};

	Parms.TechniqueIndex = TechniqueIndex;
	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_MantisAbilityTechniqueStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTagContainer&     OwningTags                                             (Parm, NativeAccessSpecifierPublic)
// class FName                             SequenceName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StartsSequence                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EndsSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_MantisAbilityTechniqueStarted(const struct FGameplayTagContainer& OwningTags, class FName SequenceName, bool StartsSequence, bool EndsSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_MantisAbilityTechniqueStarted");

	Params::FortGameplayAbility_Mantis_BP_MantisAbilityTechniqueStarted Parms{};

	Parms.OwningTags = std::move(OwningTags);
	Parms.SequenceName = SequenceName;
	Parms.StartsSequence = StartsSequence;
	Parms.EndsSequence = EndsSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisInputEvent
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// const EFortMantisTechniqueActivationInputTypeInputType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EFortMantisTechniqueActivationTimingTypeInputTiming                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bDidInputStartTechnique                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bDidInputQueueTechnique                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             InputHeldDuration                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_OnMantisInputEvent(const EFortMantisTechniqueActivationInputType InputType, const EFortMantisTechniqueActivationTimingType InputTiming, const bool bDidInputStartTechnique, const bool bDidInputQueueTechnique, const float InputHeldDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnMantisInputEvent");

	Params::FortGameplayAbility_Mantis_BP_OnMantisInputEvent Parms{};

	Parms.InputType = InputType;
	Parms.InputTiming = InputTiming;
	Parms.bDidInputStartTechnique = bDidInputStartTechnique;
	Parms.bDidInputQueueTechnique = bDidInputQueueTechnique;
	Parms.InputHeldDuration = InputHeldDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisPreTechniqueSelection
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UFortGameplayAbility_Mantis::BP_OnMantisPreTechniqueSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnMantisPreTechniqueSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisTechniqueHit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayAbilityTargetDataHandle&TargetDataHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              ApplicationTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_OnMantisTechniqueHit(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle, const struct FGameplayTag& ApplicationTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnMantisTechniqueHit");

	Params::FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit Parms{};

	Parms.TargetDataHandle = std::move(TargetDataHandle);
	Parms.ApplicationTag = std::move(ApplicationTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyEvent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFortMantisNotifyEvent            NotifyEvent                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAnimNotify_Mantis*     Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_OnTechniqueNotifyEvent(const EFortMantisNotifyEvent NotifyEvent, const class UFortAnimNotify_Mantis* Notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnTechniqueNotifyEvent");

	Params::FortGameplayAbility_Mantis_BP_OnTechniqueNotifyEvent Parms{};

	Parms.NotifyEvent = NotifyEvent;
	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyWindowEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFortMantisNotifyWindow           NotifyWindow                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAnimNotifyState_Mantis*Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_OnTechniqueNotifyWindowEnded(const EFortMantisNotifyWindow NotifyWindow, const class UFortAnimNotifyState_Mantis* Notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnTechniqueNotifyWindowEnded");

	Params::FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowEnded Parms{};

	Parms.NotifyWindow = NotifyWindow;
	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnTechniqueNotifyWindowStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EFortMantisNotifyWindow           NotifyWindow                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAnimNotifyState_Mantis*Notify                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::BP_OnTechniqueNotifyWindowStarted(const EFortMantisNotifyWindow NotifyWindow, const class UFortAnimNotifyState_Mantis* Notify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "BP_OnTechniqueNotifyWindowStarted");

	Params::FortGameplayAbility_Mantis_BP_OnTechniqueNotifyWindowStarted Parms{};

	Parms.NotifyWindow = NotifyWindow;
	Parms.Notify = Notify;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.ConfigureRootMotionWarping
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutAllowTranslationWarp                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutAllowRotationWarp                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor**                          OutTargetActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutSnapshotTargetActorLocation                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutWarpTranslationToLocation                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         outTargetLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::ConfigureRootMotionWarping(const class FName TechniqueName, bool* bOutAllowTranslationWarp, bool* bOutAllowRotationWarp, class AActor** OutTargetActor, bool* bOutSnapshotTargetActorLocation, bool* bOutWarpTranslationToLocation, struct FVector* outTargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "ConfigureRootMotionWarping");

	Params::FortGameplayAbility_Mantis_ConfigureRootMotionWarping Parms{};

	Parms.TechniqueName = TechniqueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutAllowTranslationWarp != nullptr)
		*bOutAllowTranslationWarp = Parms.bOutAllowTranslationWarp;

	if (bOutAllowRotationWarp != nullptr)
		*bOutAllowRotationWarp = Parms.bOutAllowRotationWarp;

	if (OutTargetActor != nullptr)
		*OutTargetActor = Parms.OutTargetActor;

	if (bOutSnapshotTargetActorLocation != nullptr)
		*bOutSnapshotTargetActorLocation = Parms.bOutSnapshotTargetActorLocation;

	if (bOutWarpTranslationToLocation != nullptr)
		*bOutWarpTranslationToLocation = Parms.bOutWarpTranslationToLocation;

	if (outTargetLocation != nullptr)
		*outTargetLocation = std::move(Parms.outTargetLocation);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.ConfigureRootMotionWarpingAlternativeBehavior
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor**                          OutTargetActor                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutSnapshotTargetActorLocation                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMantisWarpTranslationMethod*       OutWarpTranslationMethod                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutWarpTranslationVector                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMantisWarpRotationMethod*          OutWarpRotationMethod                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator*                        OutStaticRotation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::ConfigureRootMotionWarpingAlternativeBehavior(const class FName TechniqueName, class AActor** OutTargetActor, bool* bOutSnapshotTargetActorLocation, EFortMantisWarpTranslationMethod* OutWarpTranslationMethod, struct FVector* OutWarpTranslationVector, EFortMantisWarpRotationMethod* OutWarpRotationMethod, struct FRotator* OutStaticRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "ConfigureRootMotionWarpingAlternativeBehavior");

	Params::FortGameplayAbility_Mantis_ConfigureRootMotionWarpingAlternativeBehavior Parms{};

	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);

	if (OutTargetActor != nullptr)
		*OutTargetActor = Parms.OutTargetActor;

	if (bOutSnapshotTargetActorLocation != nullptr)
		*bOutSnapshotTargetActorLocation = Parms.bOutSnapshotTargetActorLocation;

	if (OutWarpTranslationMethod != nullptr)
		*OutWarpTranslationMethod = Parms.OutWarpTranslationMethod;

	if (OutWarpTranslationVector != nullptr)
		*OutWarpTranslationVector = std::move(Parms.OutWarpTranslationVector);

	if (OutWarpRotationMethod != nullptr)
		*OutWarpRotationMethod = Parms.OutWarpRotationMethod;

	if (OutStaticRotation != nullptr)
		*OutStaticRotation = std::move(Parms.OutStaticRotation);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.FillMetadataForTechnique
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFortMantisTechniqueMetadata*    OutTechniqueMetadata                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void UFortGameplayAbility_Mantis::FillMetadataForTechnique(const class FName TechniqueName, struct FFortMantisTechniqueMetadata* OutTechniqueMetadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "FillMetadataForTechnique");

	Params::FortGameplayAbility_Mantis_FillMetadataForTechnique Parms{};

	Parms.TechniqueName = TechniqueName;

	UObject::ProcessEvent(Func, &Parms);

	if (OutTechniqueMetadata != nullptr)
		*OutTechniqueMetadata = std::move(Parms.OutTechniqueMetadata);
}


// Function MantisRuntime.FortGameplayAbility_Mantis.OnMontageBlendingOut
// (Final, Native, Protected)

void UFortGameplayAbility_Mantis::OnMontageBlendingOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "OnMontageBlendingOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortGameplayAbility_Mantis.OnMontageCancelled
// (Final, Native, Protected)

void UFortGameplayAbility_Mantis::OnMontageCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "OnMontageCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortGameplayAbility_Mantis.OnMontageFinished
// (Final, Native, Protected)

void UFortGameplayAbility_Mantis::OnMontageFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "OnMontageFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortGameplayAbility_Mantis.GetDynamicMontageNameForTechnique
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class FName                       TechniqueName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UFortGameplayAbility_Mantis::GetDynamicMontageNameForTechnique(const class FName TechniqueName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "GetDynamicMontageNameForTechnique");

	Params::FortGameplayAbility_Mantis_GetDynamicMontageNameForTechnique Parms{};

	Parms.TechniqueName = TechniqueName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortGameplayAbility_Mantis.GetLevelForGameplayEffectContainer
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayTag&              ApplicationTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFortGameplayAbility_Mantis::GetLevelForGameplayEffectContainer(const struct FGameplayTag& ApplicationTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_Mantis", "GetLevelForGameplayEffectContainer");

	Params::FortGameplayAbility_Mantis_GetLevelForGameplayEffectContainer Parms{};

	Parms.ApplicationTag = std::move(ApplicationTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.IsSpecificInputPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EFortMantisTechniqueActivationInputType InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::IsSpecificInputPressed(EFortMantisTechniqueActivationInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "IsSpecificInputPressed");

	Params::FortMantisPawnComponent_IsSpecificInputPressed Parms{};

	Parms.InputType = InputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.OnCharacterMovementPreUpdate
// (Final, Native, Protected)
// Parameters:
// class UCharacterMovementComponent*      CharMoveComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisPawnComponent::OnCharacterMovementPreUpdate(class UCharacterMovementComponent* CharMoveComp, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "OnCharacterMovementPreUpdate");

	Params::FortMantisPawnComponent_OnCharacterMovementPreUpdate Parms{};

	Parms.CharMoveComp = CharMoveComp;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.OnOwnerWeaponHolstered
// (Final, Native, Protected)

void UFortMantisPawnComponent::OnOwnerWeaponHolstered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "OnOwnerWeaponHolstered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.OnPostPhysicsRotation
// (Final, Native, Protected)
// Parameters:
// class UCharacterMovementComponent*      CharMoveComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisPawnComponent::OnPostPhysicsRotation(class UCharacterMovementComponent* CharMoveComp, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "OnPostPhysicsRotation");

	Params::FortMantisPawnComponent_OnPostPhysicsRotation Parms{};

	Parms.CharMoveComp = CharMoveComp;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.SetBranchRule
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EFortMantisBranchRule                   InBranchRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMantisBranchPath                   InBranchPath                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisPawnComponent::SetBranchRule(EFortMantisBranchRule InBranchRule, EFortMantisBranchPath InBranchPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "SetBranchRule");

	Params::FortMantisPawnComponent_SetBranchRule Parms{};

	Parms.InBranchRule = InBranchRule;
	Parms.InBranchPath = InBranchPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.SetLockOnState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisPawnComponent::SetLockOnState(bool bEnabled, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "SetLockOnState");

	Params::FortMantisPawnComponent_SetLockOnState Parms{};

	Parms.bEnabled = bEnabled;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.SimulateInputEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFortMantisTechniqueActivationInputType InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMantisTechniqueActivationTimingTypeInputTiming                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForceProcessEvent                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisPawnComponent::SimulateInputEvent(EFortMantisTechniqueActivationInputType InputType, EFortMantisTechniqueActivationTimingType InputTiming, const bool bForceProcessEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "SimulateInputEvent");

	Params::FortMantisPawnComponent_SimulateInputEvent Parms{};

	Parms.InputType = InputType;
	Parms.InputTiming = InputTiming;
	Parms.bForceProcessEvent = bForceProcessEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisPawnComponent.TryManuallyEndCurrentTechnique
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::TryManuallyEndCurrentTechnique()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "TryManuallyEndCurrentTechnique");

	Params::FortMantisPawnComponent_TryManuallyEndCurrentTechnique Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.TryManuallyStartTechnique
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             TechniqueDataIndex                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::TryManuallyStartTechnique(const int32 TechniqueDataIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "TryManuallyStartTechnique");

	Params::FortMantisPawnComponent_TryManuallyStartTechnique Parms{};

	Parms.TechniqueDataIndex = TechniqueDataIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.GetCurrentTechniqueMetadata
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFortMantisTechniqueMetadataReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FFortMantisTechniqueMetadata UFortMantisPawnComponent::GetCurrentTechniqueMetadata() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "GetCurrentTechniqueMetadata");

	Params::FortMantisPawnComponent_GetCurrentTechniqueMetadata Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.GetLockOnTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFortMantisPawnComponent::GetLockOnTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "GetLockOnTarget");

	Params::FortMantisPawnComponent_GetLockOnTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.GetMontageForCurrentTechnique
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UAnimMontage*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UAnimMontage* UFortMantisPawnComponent::GetMontageForCurrentTechnique() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "GetMontageForCurrentTechnique");

	Params::FortMantisPawnComponent_GetMontageForCurrentTechnique Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.HasCurrentTechniqueMetadataBeenSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::HasCurrentTechniqueMetadataBeenSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "HasCurrentTechniqueMetadataBeenSet");

	Params::FortMantisPawnComponent_HasCurrentTechniqueMetadataBeenSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.HasLockOnTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::HasLockOnTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "HasLockOnTarget");

	Params::FortMantisPawnComponent_HasLockOnTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisPawnComponent.IsPerformingLockOn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMantisPawnComponent::IsPerformingLockOn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisPawnComponent", "IsPerformingLockOn");

	Params::FortMantisPawnComponent_IsPerformingLockOn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnEquip
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnEquip(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnEquip");

	Params::FortMantisWeaponComponent_OnEquip Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnPreActivatePrimaryAbility
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnPreActivatePrimaryAbility(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnPreActivatePrimaryAbility");

	Params::FortMantisWeaponComponent_OnPreActivatePrimaryAbility Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnPreActivateSecondaryAbility
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnPreActivateSecondaryAbility(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnPreActivateSecondaryAbility");

	Params::FortMantisWeaponComponent_OnPreActivateSecondaryAbility Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnReleaseSecondaryFire
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnReleaseSecondaryFire(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnReleaseSecondaryFire");

	Params::FortMantisWeaponComponent_OnReleaseSecondaryFire Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnReleaseTrigger
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnReleaseTrigger(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnReleaseTrigger");

	Params::FortMantisWeaponComponent_OnReleaseTrigger Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnRep_ReplayAnimInstanceInfo
// (Final, Native, Protected)

void UFortMantisWeaponComponent::OnRep_ReplayAnimInstanceInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnRep_ReplayAnimInstanceInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnUnEquip
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnUnEquip(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnUnEquip");

	Params::FortMantisWeaponComponent_OnUnEquip Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.OnWeaponAbilitiesRemoved
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortWeaponAbilityRemovalReason         RemovalReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMantisWeaponComponent::OnWeaponAbilitiesRemoved(class AFortWeapon* Weapon, EFortWeaponAbilityRemovalReason RemovalReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "OnWeaponAbilitiesRemoved");

	Params::FortMantisWeaponComponent_OnWeaponAbilitiesRemoved Parms{};

	Parms.Weapon = Weapon;
	Parms.RemovalReason = RemovalReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MantisRuntime.FortMantisWeaponComponent.GetAnimInstanceInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFortMantisReplicatedAnimInstanceInfoReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFortMantisReplicatedAnimInstanceInfo UFortMantisWeaponComponent::GetAnimInstanceInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMantisWeaponComponent", "GetAnimInstanceInfo");

	Params::FortMantisWeaponComponent_GetAnimInstanceInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

