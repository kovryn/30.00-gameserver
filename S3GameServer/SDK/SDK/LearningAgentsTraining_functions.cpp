#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgentsTraining

#include "Basic.hpp"

#include "LearningAgentsTraining_classes.hpp"
#include "LearningAgentsTraining_parameters.hpp"


namespace SDK
{

// Function LearningAgentsTraining.LearningAgentsCompletions.CompletionAnd
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELearningAgentsCompletion               A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::CompletionAnd(ELearningAgentsCompletion A, ELearningAgentsCompletion B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "CompletionAnd");

	Params::LearningAgentsCompletions_CompletionAnd Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.CompletionNot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELearningAgentsCompletion               A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               NotRunningType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::CompletionNot(ELearningAgentsCompletion A, ELearningAgentsCompletion NotRunningType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "CompletionNot");

	Params::LearningAgentsCompletions_CompletionNot Parms{};

	Parms.A = A;
	Parms.NotRunningType = NotRunningType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.CompletionOr
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELearningAgentsCompletion               A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::CompletionOr(ELearningAgentsCompletion A, ELearningAgentsCompletion B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "CompletionOr");

	Params::LearningAgentsCompletions_CompletionOr Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.IsCompletionCompleted
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ELearningAgentsCompletion         Completion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsCompletions::IsCompletionCompleted(const ELearningAgentsCompletion Completion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "IsCompletionCompleted");

	Params::LearningAgentsCompletions_IsCompletionCompleted Parms{};

	Parms.Completion = Completion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.IsCompletionRunning
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ELearningAgentsCompletion         Completion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsCompletions::IsCompletionRunning(const ELearningAgentsCompletion Completion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "IsCompletionRunning");

	Params::LearningAgentsCompletions_IsCompletionRunning Parms{};

	Parms.Completion = Completion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.IsCompletionTermination
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ELearningAgentsCompletion         Completion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsCompletions::IsCompletionTermination(const ELearningAgentsCompletion Completion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "IsCompletionTermination");

	Params::LearningAgentsCompletions_IsCompletionTermination Parms{};

	Parms.Completion = Completion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.IsCompletionTruncation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const ELearningAgentsCompletion         Completion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsCompletions::IsCompletionTruncation(const ELearningAgentsCompletion Completion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "IsCompletionTruncation");

	Params::LearningAgentsCompletions_IsCompletionTruncation Parms{};

	Parms.Completion = Completion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletion
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletion(const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletion");

	Params::LearningAgentsCompletions_MakeCompletion Parms{};

	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnCondition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              bCondition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnCondition(const bool bCondition, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnCondition");

	Params::LearningAgentsCompletions_MakeCompletionOnCondition Parms{};

	Parms.bCondition = bCondition;
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnEpisodeStepsRecorded
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const int32                             EpisodeSteps                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaxEpisodeSteps                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnEpisodeStepsRecorded(const int32 EpisodeSteps, const int32 MaxEpisodeSteps, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnEpisodeStepsRecorded");

	Params::LearningAgentsCompletions_MakeCompletionOnEpisodeStepsRecorded Parms{};

	Parms.EpisodeSteps = EpisodeSteps;
	Parms.MaxEpisodeSteps = MaxEpisodeSteps;
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnLocationDifferenceAboveThreshold
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceThreshold                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnLocationDifferenceAboveThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnLocationDifferenceAboveThreshold");

	Params::LearningAgentsCompletions_MakeCompletionOnLocationDifferenceAboveThreshold Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.DistanceThreshold = DistanceThreshold;
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnLocationDifferenceBelowThreshold
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceThreshold                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnLocationDifferenceBelowThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnLocationDifferenceBelowThreshold");

	Params::LearningAgentsCompletions_MakeCompletionOnLocationDifferenceBelowThreshold Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.DistanceThreshold = DistanceThreshold;
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnLocationOutsideBounds
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                BoundsTransform                                        (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoundsMins                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   BoundsMaxs                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnLocationOutsideBounds(const struct FVector& Location, const struct FTransform& BoundsTransform, const struct FVector& BoundsMins, const struct FVector& BoundsMaxs, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnLocationOutsideBounds");

	Params::LearningAgentsCompletions_MakeCompletionOnLocationOutsideBounds Parms{};

	Parms.Location = std::move(Location);
	Parms.BoundsTransform = std::move(BoundsTransform);
	Parms.BoundsMins = std::move(BoundsMins);
	Parms.BoundsMaxs = std::move(BoundsMaxs);
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsCompletions.MakeCompletionOnTimeElapsed
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             Time                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             TimeThreshold                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsCompletion         CompletionType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsCompletions::MakeCompletionOnTimeElapsed(const float Time, const float TimeThreshold, const ELearningAgentsCompletion CompletionType, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCompletions", "MakeCompletionOnTimeElapsed");

	Params::LearningAgentsCompletions_MakeCompletionOnTimeElapsed Parms{};

	Parms.Time = Time;
	Parms.TimeThreshold = TimeThreshold;
	Parms.CompletionType = CompletionType;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.MakeImitationTrainer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsImitationTrainer>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsImitationTrainer*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsImitationTrainer* ULearningAgentsImitationTrainer::MakeImitationTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, TSubclassOf<class ULearningAgentsImitationTrainer> Class_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsImitationTrainer", "MakeImitationTrainer");

	Params::LearningAgentsImitationTrainer_MakeImitationTrainer Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.BeginTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class ULearningAgentsRecording*   Recording                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsImitationTrainerSettings&ImitationTrainerSettings                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsImitationTrainerTrainingSettings&ImitationTrainerTrainingSettings                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerPathSettings&ImitationTrainerPathSettings                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsImitationTrainer::BeginTraining(const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerPathSettings& ImitationTrainerPathSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "BeginTraining");

	Params::LearningAgentsImitationTrainer_BeginTraining Parms{};

	Parms.Recording = Recording;
	Parms.ImitationTrainerSettings = std::move(ImitationTrainerSettings);
	Parms.ImitationTrainerTrainingSettings = std::move(ImitationTrainerTrainingSettings);
	Parms.ImitationTrainerPathSettings = std::move(ImitationTrainerPathSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.EndTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsImitationTrainer::EndTraining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "EndTraining");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.IterateTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsImitationTrainer::IterateTraining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "IterateTraining");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.RunTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class ULearningAgentsRecording*   Recording                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsImitationTrainerSettings&ImitationTrainerSettings                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsImitationTrainerTrainingSettings&ImitationTrainerTrainingSettings                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerPathSettings&ImitationTrainerPathSettings                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsImitationTrainer::RunTraining(const class ULearningAgentsRecording* Recording, const struct FLearningAgentsImitationTrainerSettings& ImitationTrainerSettings, const struct FLearningAgentsImitationTrainerTrainingSettings& ImitationTrainerTrainingSettings, const struct FLearningAgentsTrainerPathSettings& ImitationTrainerPathSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "RunTraining");

	Params::LearningAgentsImitationTrainer_RunTraining Parms{};

	Parms.Recording = Recording;
	Parms.ImitationTrainerSettings = std::move(ImitationTrainerSettings);
	Parms.ImitationTrainerTrainingSettings = std::move(ImitationTrainerTrainingSettings);
	Parms.ImitationTrainerPathSettings = std::move(ImitationTrainerPathSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.HasTrainingFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsImitationTrainer::HasTrainingFailed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "HasTrainingFailed");

	Params::LearningAgentsImitationTrainer_HasTrainingFailed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsImitationTrainer.IsTraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsImitationTrainer::IsTraining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsImitationTrainer", "IsTraining");

	Params::LearningAgentsImitationTrainer_IsTraining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.MakeRecorder
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsRecorder>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsRecorderPathSettings&RecorderPathSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeRecording                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsRecorder*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsRecorder* ULearningAgentsRecorder::MakeRecorder(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsRecorder> Class_0, const class FName Name_0, const struct FLearningAgentsRecorderPathSettings& RecorderPathSettings, class ULearningAgentsRecording* RecordingAsset, bool bReinitializeRecording)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRecorder", "MakeRecorder");

	Params::LearningAgentsRecorder_MakeRecorder Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;
	Parms.RecorderPathSettings = std::move(RecorderPathSettings);
	Parms.RecordingAsset = RecordingAsset;
	Parms.bReinitializeRecording = bReinitializeRecording;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.AddExperience
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::AddExperience()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "AddExperience");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.BeginRecording
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::BeginRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "BeginRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.EndRecording
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::EndRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "EndRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.EndRecordingAndDiscard
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsRecorder::EndRecordingAndDiscard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "EndRecordingAndDiscard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.SetupRecorder
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsRecorderPathSettings&RecorderPathSettings                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReinitializeRecording                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecorder::SetupRecorder(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, const struct FLearningAgentsRecorderPathSettings& RecorderPathSettings, class ULearningAgentsRecording* RecordingAsset, bool bReinitializeRecording)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "SetupRecorder");

	Params::LearningAgentsRecorder_SetupRecorder Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.RecorderPathSettings = std::move(RecorderPathSettings);
	Parms.RecordingAsset = RecordingAsset;
	Parms.bReinitializeRecording = bReinitializeRecording;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.GetRecordingAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class ULearningAgentsRecording*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class ULearningAgentsRecording* ULearningAgentsRecorder::GetRecordingAsset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "GetRecordingAsset");

	Params::LearningAgentsRecorder_GetRecordingAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecorder.IsRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsRecorder::IsRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecorder", "IsRecording");

	Params::LearningAgentsRecorder_IsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFilePath&                 File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::AppendRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "AppendRecordingFromFile");

	Params::LearningAgentsRecording_AppendRecordingFromFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.AppendRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::AppendRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "AppendRecordingToAsset");

	Params::LearningAgentsRecording_AppendRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.GetActionVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutActionVector                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutActionCompatibilityHash                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Record                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Step                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::GetActionVector(TArray<float>* OutActionVector, int32* OutActionCompatibilityHash, const int32 Record, const int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "GetActionVector");

	Params::LearningAgentsRecording_GetActionVector Parms{};

	Parms.Record = Record;
	Parms.Step = Step;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionVector != nullptr)
		*OutActionVector = std::move(Parms.OutActionVector);

	if (OutActionCompatibilityHash != nullptr)
		*OutActionCompatibilityHash = Parms.OutActionCompatibilityHash;
}


// Function LearningAgentsTraining.LearningAgentsRecording.GetObservationVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutObservationVector                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutObservationCompatibilityHash                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Record                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Step                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::GetObservationVector(TArray<float>* OutObservationVector, int32* OutObservationCompatibilityHash, const int32 Record, const int32 Step)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "GetObservationVector");

	Params::LearningAgentsRecording_GetObservationVector Parms{};

	Parms.Record = Record;
	Parms.Step = Step;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObservationVector != nullptr)
		*OutObservationVector = std::move(Parms.OutObservationVector);

	if (OutObservationCompatibilityHash != nullptr)
		*OutObservationCompatibilityHash = Parms.OutObservationCompatibilityHash;
}


// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::LoadRecordingFromAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "LoadRecordingFromAsset");

	Params::LearningAgentsRecording_LoadRecordingFromAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.LoadRecordingFromFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFilePath&                 File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::LoadRecordingFromFile(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "LoadRecordingFromFile");

	Params::LearningAgentsRecording_LoadRecordingFromFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.ResetRecording
// (Final, Native, Public)

void ULearningAgentsRecording::ResetRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "ResetRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsRecording*         RecordingAsset                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::SaveRecordingToAsset(class ULearningAgentsRecording* RecordingAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "SaveRecordingToAsset");

	Params::LearningAgentsRecording_SaveRecordingToAsset Parms{};

	Parms.RecordingAsset = RecordingAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRecording.GetRecordNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsRecording::GetRecordNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "GetRecordNum");

	Params::LearningAgentsRecording_GetRecordNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecording.GetRecordStepNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             Record                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsRecording::GetRecordStepNum(const int32 Record) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "GetRecordStepNum");

	Params::LearningAgentsRecording_GetRecordStepNum Parms{};

	Parms.Record = Record;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRecording.SaveRecordingToFile
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// const struct FFilePath&                 File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsRecording::SaveRecordingToFile(const struct FFilePath& File) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsRecording", "SaveRecordingToFile");

	Params::LearningAgentsRecording_SaveRecordingToFile Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeReward
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             RewardValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeReward(const float RewardValue, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeReward");

	Params::LearningAgentsRewards_MakeReward Parms{};

	Parms.RewardValue = RewardValue;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromAngleSimilarity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             AngleA                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AngleB                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerAngleLocationA                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerAngleLocationB                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromAngleSimilarity(const float AngleA, const float AngleB, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocationA, const struct FVector& VisualLoggerAngleLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromAngleSimilarity");

	Params::LearningAgentsRewards_MakeRewardFromAngleSimilarity Parms{};

	Parms.AngleA = AngleA;
	Parms.AngleB = AngleB;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerAngleLocationA = std::move(VisualLoggerAngleLocationA);
	Parms.VisualLoggerAngleLocationB = std::move(VisualLoggerAngleLocationB);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromDirectionSimilarity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   DirectionA                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DirectionB                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerDirectionLocationA                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerDirectionLocationB                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VisualLoggerArrowLength                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromDirectionSimilarity(const struct FVector& DirectionA, const struct FVector& DirectionB, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocationA, const struct FVector& VisualLoggerDirectionLocationB, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromDirectionSimilarity");

	Params::LearningAgentsRewards_MakeRewardFromDirectionSimilarity Parms{};

	Parms.DirectionA = std::move(DirectionA);
	Parms.DirectionB = std::move(DirectionB);
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerDirectionLocationA = std::move(VisualLoggerDirectionLocationA);
	Parms.VisualLoggerDirectionLocationB = std::move(VisualLoggerDirectionLocationB);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerArrowLength = VisualLoggerArrowLength;
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromLocationDifference
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromLocationDifference(const struct FVector& LocationA, const struct FVector& LocationB, const float LocationScale, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromLocationDifference");

	Params::LearningAgentsRewards_MakeRewardFromLocationDifference Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.LocationScale = LocationScale;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromLocationSimilarity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromLocationSimilarity(const struct FVector& LocationA, const struct FVector& LocationB, const float LocationScale, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromLocationSimilarity");

	Params::LearningAgentsRewards_MakeRewardFromLocationSimilarity Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.LocationScale = LocationScale;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromRotationSimilarity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  RotationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  RotationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocationA                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocationB                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromRotationSimilarity(const struct FRotator& RotationA, const struct FRotator& RotationB, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocationA, const struct FVector& VisualLoggerRotationLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromRotationSimilarity");

	Params::LearningAgentsRewards_MakeRewardFromRotationSimilarity Parms{};

	Parms.RotationA = std::move(RotationA);
	Parms.RotationB = std::move(RotationB);
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocationA = std::move(VisualLoggerRotationLocationA);
	Parms.VisualLoggerRotationLocationB = std::move(VisualLoggerRotationLocationB);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromRotationSimilarityAsQuats
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuat&                     RotationA                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     RotationB                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocationA                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocationB                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromRotationSimilarityAsQuats(const struct FQuat& RotationA, const struct FQuat& RotationB, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocationA, const struct FVector& VisualLoggerRotationLocationB, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromRotationSimilarityAsQuats");

	Params::LearningAgentsRewards_MakeRewardFromRotationSimilarityAsQuats Parms{};

	Parms.RotationA = std::move(RotationA);
	Parms.RotationB = std::move(RotationB);
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocationA = std::move(VisualLoggerRotationLocationA);
	Parms.VisualLoggerRotationLocationB = std::move(VisualLoggerRotationLocationB);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardFromVelocityAlongSpline
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class USplineComponent*           SplineComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VelocityScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             FiniteDifferenceDelta                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardFromVelocityAlongSpline(const class USplineComponent* SplineComponent, const struct FVector& Location, const struct FVector& Velocity, const float VelocityScale, const float RewardScale, const float FiniteDifferenceDelta, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardFromVelocityAlongSpline");

	Params::LearningAgentsRewards_MakeRewardFromVelocityAlongSpline Parms{};

	Parms.SplineComponent = SplineComponent;
	Parms.Location = std::move(Location);
	Parms.Velocity = std::move(Velocity);
	Parms.VelocityScale = VelocityScale;
	Parms.RewardScale = RewardScale;
	Parms.FiniteDifferenceDelta = FiniteDifferenceDelta;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardOnCondition
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const bool                              bCondition                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardOnCondition(const bool bCondition, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardOnCondition");

	Params::LearningAgentsRewards_MakeRewardOnCondition Parms{};

	Parms.bCondition = bCondition;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardOnLocationDifferenceAboveThreshold
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceThreshold                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardOnLocationDifferenceAboveThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardOnLocationDifferenceAboveThreshold");

	Params::LearningAgentsRewards_MakeRewardOnLocationDifferenceAboveThreshold Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.DistanceThreshold = DistanceThreshold;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsRewards.MakeRewardOnLocationDifferenceBelowThreshold
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   LocationA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocationB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceThreshold                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardScale                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsRewards::MakeRewardOnLocationDifferenceBelowThreshold(const struct FVector& LocationA, const struct FVector& LocationB, const float DistanceThreshold, const float RewardScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsRewards", "MakeRewardOnLocationDifferenceBelowThreshold");

	Params::LearningAgentsRewards_MakeRewardOnLocationDifferenceBelowThreshold Parms{};

	Parms.LocationA = std::move(LocationA);
	Parms.LocationB = std::move(LocationB);
	Parms.DistanceThreshold = DistanceThreshold;
	Parms.RewardScale = RewardScale;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.MakeTrainer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsCritic*            InCritic                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsTrainer>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerSettings&TrainerSettings                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ULearningAgentsTrainer*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsTrainer* ULearningAgentsTrainer::MakeTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsCritic* InCritic, TSubclassOf<class ULearningAgentsTrainer> Class_0, const class FName Name_0, const struct FLearningAgentsTrainerSettings& TrainerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsTrainer", "MakeTrainer");

	Params::LearningAgentsTrainer_MakeTrainer Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.InCritic = InCritic;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;
	Parms.TrainerSettings = std::move(TrainerSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.BeginTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLearningAgentsTrainerTrainingSettings&TrainerTrainingSettings                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerGameSettings&TrainerGameSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerPathSettings&TrainerPathSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bResetAgentsOnBegin                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::BeginTraining(const struct FLearningAgentsTrainerTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainerGameSettings& TrainerGameSettings, const struct FLearningAgentsTrainerPathSettings& TrainerPathSettings, const bool bResetAgentsOnBegin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "BeginTraining");

	Params::LearningAgentsTrainer_BeginTraining Parms{};

	Parms.TrainerTrainingSettings = std::move(TrainerTrainingSettings);
	Parms.TrainerGameSettings = std::move(TrainerGameSettings);
	Parms.TrainerPathSettings = std::move(TrainerPathSettings);
	Parms.bResetAgentsOnBegin = bResetAgentsOnBegin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.EndTraining
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::EndTraining()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "EndTraining");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherAgentCompletion
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// ELearningAgentsCompletion*              OutCompletion                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::GatherAgentCompletion(ELearningAgentsCompletion* OutCompletion, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherAgentCompletion");

	Params::LearningAgentsTrainer_GatherAgentCompletion Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCompletion != nullptr)
		*OutCompletion = Parms.OutCompletion;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherAgentCompletions
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<ELearningAgentsCompletion>*      OutCompletions                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::GatherAgentCompletions(TArray<ELearningAgentsCompletion>* OutCompletions, const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherAgentCompletions");

	Params::LearningAgentsTrainer_GatherAgentCompletions Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCompletions != nullptr)
		*OutCompletions = std::move(Parms.OutCompletions);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherAgentReward
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float*                                  OutReward                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::GatherAgentReward(float* OutReward, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherAgentReward");

	Params::LearningAgentsTrainer_GatherAgentReward Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReward != nullptr)
		*OutReward = Parms.OutReward;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherAgentRewards
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<float>*                          OutRewards                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::GatherAgentRewards(TArray<float>* OutRewards, const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherAgentRewards");

	Params::LearningAgentsTrainer_GatherAgentRewards Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRewards != nullptr)
		*OutRewards = std::move(Parms.OutRewards);
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherCompletions
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::GatherCompletions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherCompletions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GatherRewards
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsTrainer::GatherRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GatherRewards");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.ProcessExperience
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bResetAgentsOnUpdate                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::ProcessExperience(const bool bResetAgentsOnUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "ProcessExperience");

	Params::LearningAgentsTrainer_ProcessExperience Parms{};

	Parms.bResetAgentsOnUpdate = bResetAgentsOnUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.ResetAgentEpisode
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::ResetAgentEpisode(const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "ResetAgentEpisode");

	Params::LearningAgentsTrainer_ResetAgentEpisode Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.ResetAgentEpisodes
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::ResetAgentEpisodes(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "ResetAgentEpisodes");

	Params::LearningAgentsTrainer_ResetAgentEpisodes Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.RunTraining
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLearningAgentsTrainerTrainingSettings&TrainerTrainingSettings                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerGameSettings&TrainerGameSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerPathSettings&TrainerPathSettings                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bResetAgentsOnBegin                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bResetAgentsOnUpdate                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::RunTraining(const struct FLearningAgentsTrainerTrainingSettings& TrainerTrainingSettings, const struct FLearningAgentsTrainerGameSettings& TrainerGameSettings, const struct FLearningAgentsTrainerPathSettings& TrainerPathSettings, const bool bResetAgentsOnBegin, const bool bResetAgentsOnUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "RunTraining");

	Params::LearningAgentsTrainer_RunTraining Parms{};

	Parms.TrainerTrainingSettings = std::move(TrainerTrainingSettings);
	Parms.TrainerGameSettings = std::move(TrainerGameSettings);
	Parms.TrainerPathSettings = std::move(TrainerPathSettings);
	Parms.bResetAgentsOnBegin = bResetAgentsOnBegin;
	Parms.bResetAgentsOnUpdate = bResetAgentsOnUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.SetupTrainer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsCritic*            InCritic                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsTrainerSettings&TrainerSettings                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULearningAgentsTrainer::SetupTrainer(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsCritic* InCritic, const struct FLearningAgentsTrainerSettings& TrainerSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "SetupTrainer");

	Params::LearningAgentsTrainer_SetupTrainer Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.InCritic = InCritic;
	Parms.TrainerSettings = std::move(TrainerSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GetCompletion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELearningAgentsCompletion               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELearningAgentsCompletion ULearningAgentsTrainer::GetCompletion(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GetCompletion");

	Params::LearningAgentsTrainer_GetCompletion Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GetEpisodeStepNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsTrainer::GetEpisodeStepNum(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GetEpisodeStepNum");

	Params::LearningAgentsTrainer_GetEpisodeStepNum Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GetEpisodeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsTrainer::GetEpisodeTime(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GetEpisodeTime");

	Params::LearningAgentsTrainer_GetEpisodeTime Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.GetReward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsTrainer::GetReward(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "GetReward");

	Params::LearningAgentsTrainer_GetReward Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.HasCompletion
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsTrainer::HasCompletion(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "HasCompletion");

	Params::LearningAgentsTrainer_HasCompletion Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.HasReward
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsTrainer::HasReward(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "HasReward");

	Params::LearningAgentsTrainer_HasReward Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.HasTrainingFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsTrainer::HasTrainingFailed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "HasTrainingFailed");

	Params::LearningAgentsTrainer_HasTrainingFailed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgentsTraining.LearningAgentsTrainer.IsTraining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool ULearningAgentsTrainer::IsTraining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsTrainer", "IsTraining");

	Params::LearningAgentsTrainer_IsTraining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

