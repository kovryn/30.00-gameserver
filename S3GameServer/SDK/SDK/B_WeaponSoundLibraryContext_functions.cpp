#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_WeaponSoundLibraryContext

#include "Basic.hpp"

#include "B_WeaponSoundLibraryContext_classes.hpp"
#include "B_WeaponSoundLibraryContext_parameters.hpp"


namespace SDK
{

// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.CleanFireAudioComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   bParamRetriggered                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UB_WeaponSoundLibraryContext_C::CleanFireAudioComponents(bool* bParamRetriggered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "CleanFireAudioComponents");

	Params::B_WeaponSoundLibraryContext_C_CleanFireAudioComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bParamRetriggered != nullptr)
		*bParamRetriggered = Parms.bParamRetriggered;
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.ClearRetrievedSounds
// (Public, BlueprintCallable, BlueprintEvent)

void UB_WeaponSoundLibraryContext_C::ClearRetrievedSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "ClearRetrievedSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.EnableSoundRetrieval
// (Public, BlueprintCallable, BlueprintEvent)

void UB_WeaponSoundLibraryContext_C::EnableSoundRetrieval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "EnableSoundRetrieval");

	UObject::ProcessEvent(Func, nullptr);
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.GetRetrievedSounds
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class USoundBase*>*              GatheredSounds_0                                       (Parm, OutParm)

void UB_WeaponSoundLibraryContext_C::GetRetrievedSounds(TArray<class USoundBase*>* GatheredSounds_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "GetRetrievedSounds");

	Params::B_WeaponSoundLibraryContext_C_GetRetrievedSounds Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GatheredSounds_0 != nullptr)
		*GatheredSounds_0 = std::move(Parms.GatheredSounds_0);
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.GetRootComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FGameplayTag&              EventTag                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 RootComponent                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UB_WeaponSoundLibraryContext_C::GetRootComponent(class AActor* Actor_0, const struct FGameplayTag& EventTag, class USceneComponent** RootComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "GetRootComponent");

	Params::B_WeaponSoundLibraryContext_C_GetRootComponent Parms{};

	Parms.Actor_0 = Actor_0;
	Parms.EventTag = std::move(EventTag);

	UObject::ProcessEvent(Func, &Parms);

	if (RootComponent != nullptr)
		*RootComponent = Parms.RootComponent;
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.OnAlmostFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OutputName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FMetaSoundOutput&          Output                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UB_WeaponSoundLibraryContext_C::OnAlmostFinished(class FName OutputName, const struct FMetaSoundOutput& Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "OnAlmostFinished");

	Params::B_WeaponSoundLibraryContext_C_OnAlmostFinished Parms{};

	Parms.OutputName = OutputName;
	Parms.Output = std::move(Output);

	UObject::ProcessEvent(Func, &Parms);
}


// Function B_WeaponSoundLibraryContext.B_WeaponSoundLibraryContext_C.Play
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSoundLibraryContextEventInput&InEventData                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UAudioComponent*>*         OutComponents                                          (Parm, OutParm, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UB_WeaponSoundLibraryContext_C::Play(const struct FSoundLibraryContextEventInput& InEventData, TArray<class UAudioComponent*>* OutComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("B_WeaponSoundLibraryContext_C", "Play");

	Params::B_WeaponSoundLibraryContext_C_Play Parms{};

	Parms.InEventData = std::move(InEventData);

	UObject::ProcessEvent(Func, &Parms);

	if (OutComponents != nullptr)
		*OutComponents = std::move(Parms.OutComponents);

	return Parms.ReturnValue;
}

}

