#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksCharacterCommonRuntime

#include "Basic.hpp"

#include "SparksCharacterCommonRuntime_structs.hpp"
#include "Engine_classes.hpp"
#include "BeatSyncedAnimRuntime_structs.hpp"
#include "SparksCoreRuntime_structs.hpp"
#include "ModularGameplay_classes.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class SparksCharacterCommonRuntime.SparksAnimationSubsystem
// 0x0088 (0x00B8 - 0x0030)
class USparksAnimationSubsystem final : public UWorldSubsystem
{
public:
	TSoftObjectPtr<class USparksInstrumentAnimations> Anims_Default;                                 // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class USparksInstrumentAnimations> Anims_Light;                                   // 0x0050(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x28];                                      // 0x0070(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumAnimationRefs;                                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9C[0x1C];                                      // 0x009C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USparksInstrumentAnimations* GetLoadedSparksAnimations();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksAnimationSubsystem">();
	}
	static class USparksAnimationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksAnimationSubsystem>();
	}
};

// Class SparksCharacterCommonRuntime.SparksBaseLayerAnimInstance
// 0x0080 (0x04F0 - 0x0470)
class USparksBaseLayerAnimInstance final : public UFortBaseLayerAnimInstance
{
public:
	float                                         MinTempo;                                          // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTempo;                                          // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 BPMBucketMaxTempos;                                // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BPMBucketCooldownBeats;                            // 0x0480(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewBPM;                                        // 0x0484(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USparksInstrumentAnimPlayerStateComponent* InstrumentPSC;                                  // 0x0488(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASparksMusicPlayspace*                  SparksPlayspace;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           SongBeatAndTime;                                   // 0x04A0(0x000C)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           AnimBeatAndTime;                                   // 0x04AC(0x000C)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SongBPM;                                           // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPMBucketCooldownRemaining;                        // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPMBucket;                                         // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         Instrument;                                        // 0x04C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPlayMidiAnimations;                            // 0x04C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMusicBeatIsActive;                                // 0x04C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoamingOrNotAnimatable;                         // 0x04C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           PrevSongBeatAndTime;                               // 0x04C8(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBeatAndTime                           PrevAnimBeatAndTime;                               // 0x04D4(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         TempoHalfOrDoubleFactor;                           // 0x04E0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESparksAnimatableState                        AnimatableState;                                   // 0x04E4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsRoaming;                                        // 0x04E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E6[0xA];                                      // 0x04E6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnSetInstrumentPSC(class USparksInstrumentAnimPlayerStateComponent* OldInstrumentPSC, class USparksInstrumentAnimPlayerStateComponent* NewInstrumentPSC);
	void SetIsRoaming(bool bInIsRoaming);

	ESparksAnimatableState GetAnimatableState() const;
	bool GetIsRoaming() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksBaseLayerAnimInstance">();
	}
	static class USparksBaseLayerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksBaseLayerAnimInstance>();
	}
};

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimInstance
// 0x0060 (0x03D0 - 0x0370)
class USparksInstrumentAnimInstance : public UAnimInstance
{
public:
	class USparksInstrumentAnimPlayerStateComponent* InstrumentPSC;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASparksMusicPlayspace*                  SparksMusicPlayspace;                              // 0x0370(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   MusicClock;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver;                               // 0x0380(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimSequence>           LipSyncAsset;                                      // 0x0390(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESparksInstrumentType                         Instrument;                                        // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B1[0x3];                                      // 0x03B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviewBPM;                                        // 0x03B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           SongBeatAndTime;                                   // 0x03B8(0x000C)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FBeatAndTime                           AnimBeatAndTime;                                   // 0x03C4(0x000C)(Edit, BlueprintVisible, EditConst, NoDestructor, NativeAccessSpecifierPublic)

public:
	void BP_OnCosmeticInstrumentTypeChanged(ESparksInstrumentType NewInstrument);
	void BP_OnLipSyncAssetChanged(const TSoftObjectPtr<class UAnimSequence>& NewLipSyncAsset);
	void BP_OnMidiEventDriverChanged(const TScriptInterface<class IMidiEventDriverInterface>& NewMidiEventDriver);
	void BP_OnSetInstrumentPSC(class USparksInstrumentAnimPlayerStateComponent* OldInstrumentPSC, class USparksInstrumentAnimPlayerStateComponent* NewInstrumentPSC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimInstance">();
	}
	static class USparksInstrumentAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimInstance>();
	}
};

// Class SparksCharacterCommonRuntime.SparksGuitarAnimInstance
// 0x0010 (0x03E0 - 0x03D0)
class USparksGuitarAnimInstance : public USparksInstrumentAnimInstance
{
public:
	int32                                         FretNumber;                                        // 0x03D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D4[0xC];                                      // 0x03D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetFretNumberFromMidiNote(const uint8 MidiNote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksGuitarAnimInstance">();
	}
	static class USparksGuitarAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksGuitarAnimInstance>();
	}
};

// Class SparksCharacterCommonRuntime.SparksBassAnimInstance
// 0x0000 (0x03E0 - 0x03E0)
class USparksBassAnimInstance final : public USparksGuitarAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksBassAnimInstance">();
	}
	static class USparksBassAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksBassAnimInstance>();
	}
};

// Class SparksCharacterCommonRuntime.SparksDrumsAnimInstance
// 0x0000 (0x03D0 - 0x03D0)
class USparksDrumsAnimInstance final : public USparksInstrumentAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksDrumsAnimInstance">();
	}
	static class USparksDrumsAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksDrumsAnimInstance>();
	}
};

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimations
// 0x0030 (0x0060 - 0x0030)
class USparksInstrumentAnimations final : public UDataAsset
{
public:
	TSubclassOf<class USparksBaseLayerAnimInstance> BandPlayAnimBP;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USparksInstrumentAnimInstance> InstrumentAnimBPs[0x5];                         // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSubclassOf<class USparksInstrumentAnimInstance> GetAnimClassForInstrument(ESparksInstrumentType Instrument);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimations">();
	}
	static class USparksInstrumentAnimations* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimations>();
	}
};

// Class SparksCharacterCommonRuntime.SparksInstrumentAnimPlayerStateComponent
// 0x01B0 (0x0250 - 0x00A0)
class USparksInstrumentAnimPlayerStateComponent final : public UPlayerStateComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USparksInstrumentAnimations*            InstrumentAnimations;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASparksMusicPlayspace*                  SparksPlayspace;                                   // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMusicClockComponent*                   MusicClock;                                        // 0x00B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UAnimSequence>           LipSyncAsset;                                      // 0x00D0(0x0020)(Edit, BlueprintVisible, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESparksInstrumentType                         CosmeticInstrumentType;                            // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESparksAnimatableState                        AnimatableState;                                   // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanPlayMidiAnimations;                            // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASparksMusicPlayspace>      SparksPlayspaceType;                               // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ASparksMusicPlayspace* Playspace)> BP_OnEnteredSparksMusicPlayspace; // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x18];                                     // 0x0110(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ASparksMusicPlayspace* Playspace)> BP_OnExitedSparksMusicPlayspace; // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x18];                                     // 0x0138(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UMusicClockComponent* MusicClock)> BP_OnPlayerMusicClockChanged; // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x18];                                     // 0x0160(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver)> BP_OnPlayerMidiEventDriverChanged; // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x18];                                     // 0x0188(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TSoftObjectPtr<class UAnimSequence> LipSyncAsset)> BP_OnPlayerLipSyncAssetChanged; // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B0[0x18];                                     // 0x01B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESparksInstrumentType CosmeticInstrumentType)> BP_OnPlayerCosmeticInstrumentTypeChanged; // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x18];                                     // 0x01D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(ESparksAnimatableState AnimatableState)> BP_OnPlayerAnimatableStateChanged; // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bCanPlayMidiAnimations)> BP_OnPlayerCanPlayMidiAnimationsChanged; // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x28];                                     // 0x0228(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSwapToInstrument(ESparksInstrumentType NewInstrumentType);
	void HandlePawnFinishedCharacterCustomization(class AFortPlayerPawn* Pawn);
	void HandlePlayerPawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn);
	void LinkInstrumentAnimationLayer(class USparksInstrumentAnimations* Animations);
	void OverridePlayspace(class ASparksMusicPlayspace* Playspace);
	void SetAnimatableState(ESparksAnimatableState NewAnimatableState);
	void SetCanPlayMidiAnimations(bool bNewCanPlayMidiAnimations);
	void SetCosmeticInstrumentType(ESparksInstrumentType NewCosmeticInstrumentType);
	void SetLipSyncAsset(TSoftObjectPtr<class UAnimSequence> NewLipSyncAsset);
	void SetMidiEventDriver(TScriptInterface<class IMidiEventDriverInterface> NewMidiEventDriver);
	void SetMusicClock(class UMusicClockComponent* NewMusicClock);
	void SwapCosmeticInstrument(ESparksInstrumentType NewInstrumentType);
	void UnlinkInstrumentAnimationLayer();

	bool CanPlayMidiAnimations() const;
	ESparksAnimatableState GetAnimatableState() const;
	ESparksInstrumentType GetCosmeticInstrumentType() const;
	class FName GetCurrentTrackName() const;
	class USparksInstrumentAnimations* GetInstrumentAnimations() const;
	class USparksBaseLayerAnimInstance* GetLinkedInstrumentAnimationLayer() const;
	TSoftObjectPtr<class UAnimSequence> GetLipSyncAsset() const;
	TScriptInterface<class IMidiEventDriverInterface> GetMidiEventDriver() const;
	class UMusicClockComponent* GetMusicClock() const;
	ESparksInstrumentType GetRecentOrFirstInstrument() const;
	class ASparksMusicPlayspace* GetSparksPlayspace() const;
	ESparksInstrumentType GetTrackInstrumentType() const;
	bool IsInstrumentAnimationLayerLinked() const;
	bool IsUsable() const;
	bool PlayerHasCosmeticInstrument(ESparksInstrumentType InstrumentType) const;
	bool PlayerHasTrackInstrument(ESparksInstrumentType InstrumentType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksInstrumentAnimPlayerStateComponent">();
	}
	static class USparksInstrumentAnimPlayerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksInstrumentAnimPlayerStateComponent>();
	}
};

// Class SparksCharacterCommonRuntime.SparksMicAnimInstance
// 0x0000 (0x03D0 - 0x03D0)
class USparksMicAnimInstance final : public USparksInstrumentAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMicAnimInstance">();
	}
	static class USparksMicAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksMicAnimInstance>();
	}
};

}

