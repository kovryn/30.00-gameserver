#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarValidatorCommon

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class DelMarValidatorCommon.DelMarValidatorInterface
// 0x0000 (0x0000 - 0x0000)
class IDelMarValidatorInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarValidatorInterface">();
	}
	static class IDelMarValidatorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDelMarValidatorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class DelMarValidatorCommon.DelMarWorldValidator_Task
// 0x0010 (0x0038 - 0x0028)
class UDelMarWorldValidator_Task : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 DelMarWorld;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddError(const class FText& Msg);
	void AddErrorTokenized(const class UObject* InAsset, const class FText& Msg);
	void AddWarning(const class FText& Msg);
	void AddWarningTokenized(const class UObject* InAsset, const class FText& Msg);
	void LogString(const class FString& InString);
	void ValidateDelMarWorld();
	void ValidateDelMarWorld_ClientOnly();
	void ValidateDelMarWorld_CookOnly();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DelMarWorldValidator_Task">();
	}
	static class UDelMarWorldValidator_Task* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDelMarWorldValidator_Task>();
	}
};

}

