#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WaterAdvanced

#include "Basic.hpp"

#include "WaterAdvanced_classes.hpp"
#include "WaterAdvanced_parameters.hpp"


namespace SDK
{

// Function WaterAdvanced.ShallowWaterSubsystem.AddCollisionTrackerForActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           CollisionTrackerActor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxLifespan                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::AddCollisionTrackerForActor(class AActor* CollisionTrackerActor, float MaxLifespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "AddCollisionTrackerForActor");

	Params::ShallowWaterSubsystem_AddCollisionTrackerForActor Parms{};

	Parms.CollisionTrackerActor = CollisionTrackerActor;
	Parms.MaxLifespan = MaxLifespan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.GetAllOverlappingWaterBodiesAndUpdateCollisionTrackers
// (Native, Protected, BlueprintCallable)
// Parameters:
// TSet<class AWaterBody*>                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TSet<class AWaterBody*> UShallowWaterSubsystem::GetAllOverlappingWaterBodiesAndUpdateCollisionTrackers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "GetAllOverlappingWaterBodiesAndUpdateCollisionTrackers");

	Params::ShallowWaterSubsystem_GetAllOverlappingWaterBodiesAndUpdateCollisionTrackers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function WaterAdvanced.ShallowWaterSubsystem.OnLocalPlayerControllerBecomesValid
// (Final, Native, Private)
// Parameters:
// class APlayerController*                InPlayerController                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::OnLocalPlayerControllerBecomesValid(class APlayerController* InPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "OnLocalPlayerControllerBecomesValid");

	Params::ShallowWaterSubsystem_OnLocalPlayerControllerBecomesValid Parms{};

	Parms.InPlayerController = InPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.OnLocalPlayerPawnBecomesValid
// (Final, Native, Private)
// Parameters:
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::OnLocalPlayerPawnBecomesValid(class APawn* OldPawn, class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "OnLocalPlayerPawnBecomesValid");

	Params::ShallowWaterSubsystem_OnLocalPlayerPawnBecomesValid Parms{};

	Parms.OldPawn = OldPawn;
	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.OnWaterInfoTextureCreated
// (Final, Native, Protected)
// Parameters:
// const class UTextureRenderTarget2D*     WaterInfoTexture_0                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::OnWaterInfoTextureCreated(const class UTextureRenderTarget2D* WaterInfoTexture_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "OnWaterInfoTextureCreated");

	Params::ShallowWaterSubsystem_OnWaterInfoTextureCreated Parms{};

	Parms.WaterInfoTexture_0 = WaterInfoTexture_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.RegisterImpact
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   ImpactPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ImpactVelocity                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpactRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::RegisterImpact(const struct FVector& ImpactPosition, const struct FVector& ImpactVelocity, float ImpactRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "RegisterImpact");

	Params::ShallowWaterSubsystem_RegisterImpact Parms{};

	Parms.ImpactPosition = std::move(ImpactPosition);
	Parms.ImpactVelocity = std::move(ImpactVelocity);
	Parms.ImpactRadius = ImpactRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.RemoveCollisionTrackerForActor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AActor*                           CollisionTrackerActor                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::RemoveCollisionTrackerForActor(class AActor* CollisionTrackerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "RemoveCollisionTrackerForActor");

	Params::ShallowWaterSubsystem_RemoveCollisionTrackerForActor Parms{};

	Parms.CollisionTrackerActor = CollisionTrackerActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function WaterAdvanced.ShallowWaterSubsystem.SetWaterBodyMIDParameters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AWaterBody*                       WaterBody                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UShallowWaterSubsystem::SetWaterBodyMIDParameters(class AWaterBody* WaterBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShallowWaterSubsystem", "SetWaterBodyMIDParameters");

	Params::ShallowWaterSubsystem_SetWaterBodyMIDParameters Parms{};

	Parms.WaterBody = WaterBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

