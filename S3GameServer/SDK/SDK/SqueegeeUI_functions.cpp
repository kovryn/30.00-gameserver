#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SqueegeeUI

#include "Basic.hpp"

#include "SqueegeeUI_classes.hpp"
#include "SqueegeeUI_parameters.hpp"


namespace SDK
{

// Function SqueegeeUI.FortContentGateDetailsWidget.OnShowGamemodeDescription
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    ActivityTitle                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentGateDetailsWidget::OnShowGamemodeDescription(const class FString& ActivityTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentGateDetailsWidget", "OnShowGamemodeDescription");

	Params::FortContentGateDetailsWidget_OnShowGamemodeDescription Parms{};

	Parms.ActivityTitle = std::move(ActivityTitle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentGateRatingWidget.OnLabelUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// bool                                    bLabelEnabled                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      LabelText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      LabelNumber                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortContentGateRatingWidget::OnLabelUpdated(bool bLabelEnabled, const class FText& LabelText, const class FText& LabelNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentGateRatingWidget", "OnLabelUpdated");

	Params::FortContentGateRatingWidget_OnLabelUpdated Parms{};

	Parms.bLabelEnabled = bLabelEnabled;
	Parms.LabelText = std::move(LabelText);
	Parms.LabelNumber = std::move(LabelNumber);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentGateRatingWidget.OnStyleUpdated
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSqueegeeStyleParams&      StyleParams                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFortContentGateRatingWidget::OnStyleUpdated(const struct FSqueegeeStyleParams& StyleParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentGateRatingWidget", "OnStyleUpdated");

	Params::FortContentGateRatingWidget_OnStyleUpdated Parms{};

	Parms.StyleParams = std::move(StyleParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementDetails.OnPreviewImageChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bIsLoading                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UTexture*                   Texture                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentManagementDetails::OnPreviewImageChanged(const bool bIsLoading, const class UTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementDetails", "OnPreviewImageChanged");

	Params::FortContentManagementDetails_OnPreviewImageChanged Parms{};

	Parms.bIsLoading = bIsLoading;
	Parms.Texture = Texture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementDetails.OnShowActivityData
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FText&                      ActivityDisplayName                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      ActivityDescription                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    CreatorName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      LinkCode                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              IsCreative                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 UnlockTime                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFortGameActivity*                GameActivity                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentManagementDetails::OnShowActivityData(const class FText& ActivityDisplayName, const class FText& ActivityDescription, const class FString& CreatorName, const class FText& LinkCode, const bool IsCreative, const struct FDateTime& UnlockTime, class UFortGameActivity* GameActivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementDetails", "OnShowActivityData");

	Params::FortContentManagementDetails_OnShowActivityData Parms{};

	Parms.ActivityDisplayName = std::move(ActivityDisplayName);
	Parms.ActivityDescription = std::move(ActivityDescription);
	Parms.CreatorName = std::move(CreatorName);
	Parms.LinkCode = std::move(LinkCode);
	Parms.IsCreative = IsCreative;
	Parms.UnlockTime = std::move(UnlockTime);
	Parms.GameActivity = GameActivity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementDetails.OnShowWeaponData
// (Event, Protected, BlueprintEvent)

void UFortContentManagementDetails::OnShowWeaponData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementDetails", "OnShowWeaponData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SqueegeeUI.FortContentManagementButton.OnChangeManagementState
// (Event, Protected, BlueprintEvent)
// Parameters:
// EFortContentManagementState             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentManagementButton::OnChangeManagementState(EFortContentManagementState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementButton", "OnChangeManagementState");

	Params::FortContentManagementButton_OnChangeManagementState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementButton.OnShowError
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      ErrorText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortContentManagementButton::OnShowError(const class FText& ErrorText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementButton", "OnShowError");

	Params::FortContentManagementButton_OnShowError Parms{};

	Parms.ErrorText = std::move(ErrorText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementButton.OnShowGameActivity
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortGameActivity*          NewGameActivity                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentManagementButton::OnShowGameActivity(const class UFortGameActivity* NewGameActivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementButton", "OnShowGameActivity");

	Params::FortContentManagementButton_OnShowGameActivity Parms{};

	Parms.NewGameActivity = NewGameActivity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementLabelWidget.OnSetLabel
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortContentManagementLabelWidget::OnSetLabel(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementLabelWidget", "OnSetLabel");

	Params::FortContentManagementLabelWidget_OnSetLabel Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementList.OnNextUnlockPageRequestCompleted
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortContentManagementList::OnNextUnlockPageRequestCompleted(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementList", "OnNextUnlockPageRequestCompleted");

	Params::FortContentManagementList_OnNextUnlockPageRequestCompleted Parms{};

	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SqueegeeUI.FortContentManagementList.RequestNextUnlockPage
// (Final, Native, Protected, BlueprintCallable)

void UFortContentManagementList::RequestNextUnlockPage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementList", "RequestNextUnlockPage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SqueegeeUI.FortContentManagementList.ResetUnlockList
// (Final, Native, Protected, BlueprintCallable)

void UFortContentManagementList::ResetUnlockList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementList", "ResetUnlockList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SqueegeeUI.FortContentManagementList.CanRequestNextUnlockPage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortContentManagementList::CanRequestNextUnlockPage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementList", "CanRequestNextUnlockPage");

	Params::FortContentManagementList_CanRequestNextUnlockPage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SqueegeeUI.FortContentManagementScreen.ExitScreen
// (Final, Native, Protected, BlueprintCallable)

void UFortContentManagementScreen::ExitScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortContentManagementScreen", "ExitScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

