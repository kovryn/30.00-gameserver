#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LimeNative

#include "Basic.hpp"

#include "LimeNative_classes.hpp"
#include "LimeNative_parameters.hpp"


namespace SDK
{

// Function LimeNative.LimeOverrideManager.OnEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULimeOverrideManager::OnEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimeOverrideManager", "OnEndPlay");

	Params::LimeOverrideManager_OnEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponentOverrides.HandleEnterVehicle
// (Final, Native, Protected)

void ULimePawnComponentOverrides::HandleEnterVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponentOverrides", "HandleEnterVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimeCameraMode_OrbitCam.OnBecomeActiveBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           ViewTarget                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULimeCameraMode_OrbitCam::OnBecomeActiveBP(class AActor* ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimeCameraMode_OrbitCam", "OnBecomeActiveBP");

	Params::LimeCameraMode_OrbitCam_OnBecomeActiveBP Parms{};

	Parms.ViewTarget = ViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LimeNative.LimeCameraMode_OrbitCam.UpdateCameraBP
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           ViewTarget                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTViewTarget&                    OutVT                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULimeCameraMode_OrbitCam::UpdateCameraBP(class AActor* ViewTarget, float DeltaTime, struct FTViewTarget& OutVT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimeCameraMode_OrbitCam", "UpdateCameraBP");

	Params::LimeCameraMode_OrbitCam_UpdateCameraBP Parms{};

	Parms.ViewTarget = ViewTarget;
	Parms.DeltaTime = DeltaTime;
	Parms.OutVT = std::move(OutVT);

	UObject::ProcessEvent(Func, &Parms);

	OutVT = std::move(Parms.OutVT);
}


// Function LimeNative.LimePawnComponentMood.OnRep_CurrentMoodState
// (Final, Native, Private)

void ULimePawnComponentMood::OnRep_CurrentMoodState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponentMood", "OnRep_CurrentMoodState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponentMood.GetCurrentMoodState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLimeMoodStateData         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLimeMoodStateData ULimePawnComponentMood::GetCurrentMoodState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponentMood", "GetCurrentMoodState");

	Params::LimePawnComponentMood_GetCurrentMoodState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimeNative.LimePawnComponent_EmotionalState.HandleLimeAwesomeLevelChanged
// (Final, Native, Private)
// Parameters:
// const int32                             NewAwesomeLevel                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULimePawnComponent_EmotionalState::HandleLimeAwesomeLevelChanged(const int32 NewAwesomeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "HandleLimeAwesomeLevelChanged");

	Params::LimePawnComponent_EmotionalState_HandleLimeAwesomeLevelChanged Parms{};

	Parms.NewAwesomeLevel = NewAwesomeLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.OnRep_CheatEmotionIndex
// (Final, Native, Private)

void ULimePawnComponent_EmotionalState::OnRep_CheatEmotionIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "OnRep_CheatEmotionIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.OnRep_CurrentEmotionalState
// (Final, Native, Private)

void ULimePawnComponent_EmotionalState::OnRep_CurrentEmotionalState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "OnRep_CurrentEmotionalState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.OnRep_TargetEmotionalState
// (Final, Native, Private)

void ULimePawnComponent_EmotionalState::OnRep_TargetEmotionalState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "OnRep_TargetEmotionalState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.ResetToDefaultEmotionalState
// (Final, Native, Private)

void ULimePawnComponent_EmotionalState::ResetToDefaultEmotionalState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "ResetToDefaultEmotionalState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.SetCurrentEmotionalState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const ELimePawnEmotionalState           NewEmotion                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULimePawnComponent_EmotionalState::SetCurrentEmotionalState(const ELimePawnEmotionalState NewEmotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "SetCurrentEmotionalState");

	Params::LimePawnComponent_EmotionalState_SetCurrentEmotionalState Parms{};

	Parms.NewEmotion = NewEmotion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.SetEmotionalState
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLimeEmotionalStateData&   Emotion                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULimePawnComponent_EmotionalState::SetEmotionalState(const struct FLimeEmotionalStateData& Emotion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "SetEmotionalState");

	Params::LimePawnComponent_EmotionalState_SetEmotionalState Parms{};

	Parms.Emotion = std::move(Emotion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LimeNative.LimePawnComponent_EmotionalState.GetCurrentEmotionalState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELimePawnEmotionalState                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELimePawnEmotionalState ULimePawnComponent_EmotionalState::GetCurrentEmotionalState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "GetCurrentEmotionalState");

	Params::LimePawnComponent_EmotionalState_GetCurrentEmotionalState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LimeNative.LimePawnComponent_EmotionalState.GetCurrentEmotionalStateValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULimePawnComponent_EmotionalState::GetCurrentEmotionalStateValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LimePawnComponent_EmotionalState", "GetCurrentEmotionalStateValue");

	Params::LimePawnComponent_EmotionalState_GetCurrentEmotionalStateValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

