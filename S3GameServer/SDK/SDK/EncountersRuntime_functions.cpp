#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EncountersRuntime

#include "Basic.hpp"

#include "EncountersRuntime_classes.hpp"
#include "EncountersRuntime_parameters.hpp"


namespace SDK
{

// Function EncountersRuntime.EncounterMobManagerComponent.EndAndCleanupAllMobEncounters
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UEncounterMobManagerComponent::EndAndCleanupAllMobEncounters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "EndAndCleanupAllMobEncounters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.EndMobEncounter
// (Final, RequiredAPI, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MobIdentifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::EndMobEncounter(const struct FGameplayTag& MobIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "EndMobEncounter");

	Params::EncounterMobManagerComponent_EndMobEncounter Parms{};

	Parms.MobIdentifier = std::move(MobIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.OnMobActorDied
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::OnMobActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "OnMobActorDied");

	Params::EncounterMobManagerComponent_OnMobActorDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitComponent = HitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.OnMobActorSpawn
// (Final, Native, Private)
// Parameters:
// class AActor*                           SpawnedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAthenaLivingWorldEventData*EventData                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::OnMobActorSpawn(class AActor* SpawnedActor, const class UFortAthenaLivingWorldEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "OnMobActorSpawn");

	Params::EncounterMobManagerComponent_OnMobActorSpawn Parms{};

	Parms.SpawnedActor = SpawnedActor;
	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.OnMobPawnEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           Mob                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::OnMobPawnEndPlay(class AActor* Mob, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "OnMobPawnEndPlay");

	Params::EncounterMobManagerComponent_OnMobPawnEndPlay Parms{};

	Parms.Mob = Mob;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.PauseMobEncounter
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MobIdentifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::PauseMobEncounter(const struct FGameplayTag& MobIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "PauseMobEncounter");

	Params::EncounterMobManagerComponent_PauseMobEncounter Parms{};

	Parms.MobIdentifier = std::move(MobIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.ResumeMobEncounter
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MobIdentifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterMobManagerComponent::ResumeMobEncounter(const struct FGameplayTag& MobIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "ResumeMobEncounter");

	Params::EncounterMobManagerComponent_ResumeMobEncounter Parms{};

	Parms.MobIdentifier = std::move(MobIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterMobManagerComponent.StartMobEncounter
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MobIdentifier                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEncounterMobManagerComponent::StartMobEncounter(const struct FGameplayTag& MobIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterMobManagerComponent", "StartMobEncounter");

	Params::EncounterMobManagerComponent_StartMobEncounter Parms{};

	Parms.MobIdentifier = std::move(MobIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.LWMEncounterInstance.OnMobActorDied
// (Final, Native, Public, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULWMEncounterInstance::OnMobActorDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LWMEncounterInstance", "OnMobActorDied");

	Params::LWMEncounterInstance_OnMobActorDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitComponent = HitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.LWMEncounterInstance.OnMobActorSpawn
// (Final, Native, Public)
// Parameters:
// class AActor*                           SpawnedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAthenaLivingWorldEventData*EventData                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULWMEncounterInstance::OnMobActorSpawn(class AActor* SpawnedActor, const class UFortAthenaLivingWorldEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LWMEncounterInstance", "OnMobActorSpawn");

	Params::LWMEncounterInstance_OnMobActorSpawn Parms{};

	Parms.SpawnedActor = SpawnedActor;
	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.LWMEncounterInstance.OnMobPawnEndPlay
// (Final, Native, Public)
// Parameters:
// class AActor*                           Mob                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULWMEncounterInstance::OnMobPawnEndPlay(class AActor* Mob, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LWMEncounterInstance", "OnMobPawnEndPlay");

	Params::LWMEncounterInstance_OnMobPawnEndPlay Parms{};

	Parms.Mob = Mob;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterBlueprintLibrary.GetRelevantMobManagerComponentForActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEncounterMobManagerComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEncounterMobManagerComponent* UEncounterBlueprintLibrary::GetRelevantMobManagerComponentForActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EncounterBlueprintLibrary", "GetRelevantMobManagerComponentForActor");

	Params::EncounterBlueprintLibrary_GetRelevantMobManagerComponentForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterGameplayVolume.OnCleanup
// (Event, Public, BlueprintEvent)

void AEncounterGameplayVolume::OnCleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterGameplayVolume", "OnCleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EncountersRuntime.EncounterGameplayVolume.IsDoneCleaningUp
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AEncounterGameplayVolume::IsDoneCleaningUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterGameplayVolume", "IsDoneCleaningUp");

	Params::EncounterGameplayVolume_IsDoneCleaningUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.AddExplicitContributor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            Contributor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::AddExplicitContributor(class AFortPlayerController* Contributor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "AddExplicitContributor");

	Params::EncounterManagerComponent_AddExplicitContributor Parms{};

	Parms.Contributor = Contributor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.HandleEncounterFailure
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RewardIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::HandleEncounterFailure(int32 RewardIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "HandleEncounterFailure");

	Params::EncounterManagerComponent_HandleEncounterFailure Parms{};

	Parms.RewardIndex = RewardIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.HandleEncounterSuccess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RewardIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::HandleEncounterSuccess(int32 RewardIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "HandleEncounterSuccess");

	Params::EncounterManagerComponent_HandleEncounterSuccess Parms{};

	Parms.RewardIndex = RewardIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.OnStateTreeStatusChanged
// (Final, Native, Private)
// Parameters:
// EStateTreeRunStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::OnStateTreeStatusChanged(EStateTreeRunStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "OnStateTreeStatusChanged");

	Params::EncounterManagerComponent_OnStateTreeStatusChanged Parms{};

	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.RemoveExplicitContributor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFortPlayerController*            Contributor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::RemoveExplicitContributor(class AFortPlayerController* Contributor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "RemoveExplicitContributor");

	Params::EncounterManagerComponent_RemoveExplicitContributor Parms{};

	Parms.Contributor = Contributor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.SetPersistentValue
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Identifier                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEncounterManagerComponent::SetPersistentValue(const struct FGameplayTag& Identifier, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "SetPersistentValue");

	Params::EncounterManagerComponent_SetPersistentValue Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.EncounterManagerComponent.GetPersistentValue
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Identifier                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEncounterManagerComponent::GetPersistentValue(const struct FGameplayTag& Identifier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetPersistentValue");

	Params::EncounterManagerComponent_GetPersistentValue Parms{};

	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ActorClass
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UEncounterManagerComponent::GetVariable_ActorClass(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_ActorClass");

	Params::EncounterManagerComponent_GetVariable_ActorClass Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ActorDescription
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FFortAthenaLivingWorldEventDataActorSpawnDescription> UEncounterManagerComponent::GetVariable_ActorDescription(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_ActorDescription");

	Params::EncounterManagerComponent_GetVariable_ActorDescription Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Bool
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UEncounterManagerComponent::GetVariable_Bool(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_Bool");

	Params::EncounterManagerComponent_GetVariable_Bool Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Float
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UEncounterManagerComponent::GetVariable_Float(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_Float");

	Params::EncounterManagerComponent_GetVariable_Float Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_GameplayTag
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UEncounterManagerComponent::GetVariable_GameplayTag(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_GameplayTag");

	Params::EncounterManagerComponent_GetVariable_GameplayTag Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_GameplayTagContainer
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagContainer UEncounterManagerComponent::GetVariable_GameplayTagContainer(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_GameplayTagContainer");

	Params::EncounterManagerComponent_GetVariable_GameplayTagContainer Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_Int
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UEncounterManagerComponent::GetVariable_Int(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_Int");

	Params::EncounterManagerComponent_GetVariable_Int Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_ItemDefinition
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortWorldItemDefinition*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortWorldItemDefinition* UEncounterManagerComponent::GetVariable_ItemDefinition(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_ItemDefinition");

	Params::EncounterManagerComponent_GetVariable_ItemDefinition Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_LWMEncounter
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortAthenaLivingWorldEncounter*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortAthenaLivingWorldEncounter* UEncounterManagerComponent::GetVariable_LWMEncounter(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_LWMEncounter");

	Params::EncounterManagerComponent_GetVariable_LWMEncounter Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.EncounterManagerComponent.GetVariable_TagQuery
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              VarName                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagQuery                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGameplayTagQuery UEncounterManagerComponent::GetVariable_TagQuery(const struct FGameplayTag& VarName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EncounterManagerComponent", "GetVariable_TagQuery");

	Params::EncounterManagerComponent_GetVariable_TagQuery Parms{};

	Parms.VarName = std::move(VarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EncountersRuntime.FortCheatManager_Encounters.EncountersDump
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)

void UFortCheatManager_Encounters::EncountersDump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Encounters", "EncountersDump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EncountersRuntime.LivingWorldEncounterPrefab.OnRep_EncounterDefinition
// (Final, Native, Private)

void ALivingWorldEncounterPrefab::OnRep_EncounterDefinition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LivingWorldEncounterPrefab", "OnRep_EncounterDefinition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

