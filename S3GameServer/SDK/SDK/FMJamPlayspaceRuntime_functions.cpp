#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamPlayspaceRuntime

#include "Basic.hpp"

#include "FMJamPlayspaceRuntime_classes.hpp"
#include "FMJamPlayspaceRuntime_parameters.hpp"


namespace SDK
{

// Function FMJamPlayspaceRuntime.JamPlayspace.BeginShutdownJam
// (Event, Public, BlueprintEvent)

void AJamPlayspace::BeginShutdownJam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "BeginShutdownJam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FMJamPlayspaceRuntime.JamPlayspace.ConvertPlayerToAutoJammer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::ConvertPlayerToAutoJammer(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "ConvertPlayerToAutoJammer");

	Params::JamPlayspace_ConvertPlayerToAutoJammer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetJamAudioSource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* AJamPlayspace::GetJamAudioSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetJamAudioSource");

	Params::JamPlayspace_GetJamAudioSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.PlayLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       SongShortName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EFMJamLoopType                    LoopType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForceAudioState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsAutoJammer                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJamMusicSlot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamMusicSlot* AJamPlayspace::PlayLoop(class APlayerState* PlayerState, const class FName SongShortName, const EFMJamLoopType LoopType, const bool bForceAudioState, const bool bIsAutoJammer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "PlayLoop");

	Params::JamPlayspace_PlayLoop Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SongShortName = SongShortName;
	Parms.LoopType = LoopType;
	Parms.bForceAudioState = bForceAudioState;
	Parms.bIsAutoJammer = bIsAutoJammer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopAllLoops
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bStopAutoJammers                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopAllLoops(const bool bStopAutoJammers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopAllLoops");

	Params::JamPlayspace_StopAllLoops Parms{};

	Parms.bStopAutoJammers = bStopAutoJammers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopAllLoopsForLoopType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EFMJamLoopType                    LoopType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopAllLoopsForLoopType(const EFMJamLoopType LoopType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopAllLoopsForLoopType");

	Params::JamPlayspace_StopAllLoopsForLoopType Parms{};

	Parms.LoopType = LoopType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopAllLoopsWithTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopAllLoopsWithTag(const struct FGameplayTag& tag, bool bExactMatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopAllLoopsWithTag");

	Params::JamPlayspace_StopAllLoopsWithTag Parms{};

	Parms.tag = std::move(tag);
	Parms.bExactMatch = bExactMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopAutoJammersForPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopAutoJammersForPlayer(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopAutoJammersForPlayer");

	Params::JamPlayspace_StopAutoJammersForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopLoopByInstanceId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             LoopInstanceId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopLoopByInstanceId(const int32 LoopInstanceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopLoopByInstanceId");

	Params::JamPlayspace_StopLoopByInstanceId Parms{};

	Parms.LoopInstanceId = LoopInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.StopLoopForPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bStopAutoJammers                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspace::StopLoopForPlayer(const class APlayerState* PlayerState, const bool bStopAutoJammers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "StopLoopForPlayer");

	Params::JamPlayspace_StopLoopForPlayer Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bStopAutoJammers = bStopAutoJammers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.CountActiveLoops
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              bCountAutoJammers                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AJamPlayspace::CountActiveLoops(const bool bCountAutoJammers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "CountActiveLoops");

	Params::JamPlayspace_CountActiveLoops Parms{};

	Parms.bCountAutoJammers = bCountAutoJammers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.DoAnyOtherJammersHaveGameplayTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               LocalPlayerState                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              GlobalControlsTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AJamPlayspace::DoAnyOtherJammersHaveGameplayTag(const class APlayerState* LocalPlayerState, const struct FGameplayTag& GlobalControlsTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "DoAnyOtherJammersHaveGameplayTag");

	Params::JamPlayspace_DoAnyOtherJammersHaveGameplayTag Parms{};

	Parms.LocalPlayerState = LocalPlayerState;
	Parms.GlobalControlsTag = std::move(GlobalControlsTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetAllowGlobalControlAccess
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool*                                   OutAllowGlobalControlAccess                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer*           OutRestrictionReason                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void AJamPlayspace::GetAllowGlobalControlAccess(bool* OutAllowGlobalControlAccess, struct FGameplayTagContainer* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetAllowGlobalControlAccess");

	Params::JamPlayspace_GetAllowGlobalControlAccess Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAllowGlobalControlAccess != nullptr)
		*OutAllowGlobalControlAccess = Parms.OutAllowGlobalControlAccess;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetAutoJammerProfilPic
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> AJamPlayspace::GetAutoJammerProfilPic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetAutoJammerProfilPic");

	Params::JamPlayspace_GetAutoJammerProfilPic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetJammers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> AJamPlayspace::GetJammers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetJammers");

	Params::JamPlayspace_GetJammers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJamMusicSlot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamMusicSlot* AJamPlayspace::GetMusicSlotForPlayer(const class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetMusicSlotForPlayer");

	Params::JamPlayspace_GetMusicSlotForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> AJamPlayspace::GetMusicSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetMusicSlots");

	Params::JamPlayspace_GetMusicSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsForLoopType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EFMJamLoopType                    LoopType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> AJamPlayspace::GetMusicSlotsForLoopType(const EFMJamLoopType LoopType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetMusicSlotsForLoopType");

	Params::JamPlayspace_GetMusicSlotsForLoopType Parms{};

	Parms.LoopType = LoopType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsInUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> AJamPlayspace::GetMusicSlotsInUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetMusicSlotsInUse");

	Params::JamPlayspace_GetMusicSlotsInUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.GetMusicSlotsSortedByLoopType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> AJamPlayspace::GetMusicSlotsSortedByLoopType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "GetMusicSlotsSortedByLoopType");

	Params::JamPlayspace_GetMusicSlotsSortedByLoopType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspace.IsJamFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              bCountAutoJammers                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AJamPlayspace::IsJamFull(const bool bCountAutoJammers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspace", "IsJamFull");

	Params::JamPlayspace_IsJamFull Parms{};

	Parms.bCountAutoJammers = bCountAutoJammers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.GetJamCompanionSlotTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UJamPlayspaceComponent_JamCompanion::GetJamCompanionSlotTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JamPlayspaceComponent_JamCompanion", "GetJamCompanionSlotTag");

	Params::JamPlayspaceComponent_JamCompanion_GetJamCompanionSlotTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.BP_OnJamLoopStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FJamEvent_JamLoopStarted&  Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_JamCompanion::BP_OnJamLoopStarted(const struct FJamEvent_JamLoopStarted& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_JamCompanion", "BP_OnJamLoopStarted");

	Params::JamPlayspaceComponent_JamCompanion_BP_OnJamLoopStarted Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.BP_OnJamLoopStopped
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FJamEvent_JamLoopStopped&  Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_JamCompanion::BP_OnJamLoopStopped(const struct FJamEvent_JamLoopStopped& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_JamCompanion", "BP_OnJamLoopStopped");

	Params::JamPlayspaceComponent_JamCompanion_BP_OnJamLoopStopped Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.GetEventRouter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGameplayEventRouterComponent*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameplayEventRouterComponent* UJamPlayspaceComponent_JamCompanion::GetEventRouter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_JamCompanion", "GetEventRouter");

	Params::JamPlayspaceComponent_JamCompanion_GetEventRouter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.GetJamPlayspace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AJamPlayspace*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AJamPlayspace* UJamPlayspaceComponent_JamCompanion::GetJamPlayspace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_JamCompanion", "GetJamPlayspace");

	Params::JamPlayspaceComponent_JamCompanion_GetJamPlayspace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_JamCompanion.GetMusicManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UJamPlayspaceComponent_MusicManager*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamPlayspaceComponent_MusicManager* UJamPlayspaceComponent_JamCompanion::GetMusicManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_JamCompanion", "GetMusicManager");

	Params::JamPlayspaceComponent_JamCompanion_GetMusicManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.AddGameplayTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamMusicSlot::AddGameplayTag(const struct FGameplayTag& tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "AddGameplayTag");

	Params::JamMusicSlot_AddGameplayTag Parms{};

	Parms.tag = std::move(tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnCMSCatalogRequestFinished
// (Final, Native, Protected)
// Parameters:
// class UFMJamSongCatalog*                Sender                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnCMSCatalogRequestFinished(class UFMJamSongCatalog* Sender, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnCMSCatalogRequestFinished");

	Params::JamMusicSlot_OnCMSCatalogRequestFinished Parms{};

	Parms.Sender = Sender;
	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnJamLoadRequestComplete
// (Final, Native, Protected)
// Parameters:
// const struct FJamLoadResult&            LoadResult                                             (ConstParm, Parm, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnJamLoadRequestComplete(const struct FJamLoadResult& LoadResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnJamLoadRequestComplete");

	Params::JamMusicSlot_OnJamLoadRequestComplete Parms{};

	Parms.LoadResult = std::move(LoadResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnJamResolverComplete
// (Final, Native, Protected)
// Parameters:
// class UJamContentResolver*              Sender                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LinkCode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWasAlreadyLoaded                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnJamResolverComplete(class UJamContentResolver* Sender, const class FString& LinkCode, bool bSuccess, bool bWasAlreadyLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnJamResolverComplete");

	Params::JamMusicSlot_OnJamResolverComplete Parms{};

	Parms.Sender = Sender;
	Parms.LinkCode = std::move(LinkCode);
	Parms.bSuccess = bSuccess;
	Parms.bWasAlreadyLoaded = bWasAlreadyLoaded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnRep_CurrentPlayParams
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FJamPlayParams&            OldPlayParams                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnRep_CurrentPlayParams(const struct FJamPlayParams& OldPlayParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnRep_CurrentPlayParams");

	Params::JamMusicSlot_OnRep_CurrentPlayParams Parms{};

	Parms.OldPlayParams = std::move(OldPlayParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnScanForSongsCompleted
// (Final, Native, Protected)
// Parameters:
// class UFMJamSongCatalog*                Sender                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UFMJamSong*>&        AddedSongs                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnScanForSongsCompleted(class UFMJamSongCatalog* Sender, const TArray<class UFMJamSong*>& AddedSongs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnScanForSongsCompleted");

	Params::JamMusicSlot_OnScanForSongsCompleted Parms{};

	Parms.Sender = Sender;
	Parms.AddedSongs = std::move(AddedSongs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.OnTerminatingLinkCode
// (Final, Native, Protected)
// Parameters:
// class UJamContentResolver*              Sender                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LinkCode                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamMusicSlot::OnTerminatingLinkCode(class UJamContentResolver* Sender, const class FString& LinkCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "OnTerminatingLinkCode");

	Params::JamMusicSlot_OnTerminatingLinkCode Parms{};

	Parms.Sender = Sender;
	Parms.LinkCode = std::move(LinkCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.RemoveAllGameplayTags
// (Final, Native, Public, BlueprintCallable)

void UJamMusicSlot::RemoveAllGameplayTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "RemoveAllGameplayTags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.RemoveGameplayTag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamMusicSlot::RemoveGameplayTag(const struct FGameplayTag& tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "RemoveGameplayTag");

	Params::JamMusicSlot_RemoveGameplayTag Parms{};

	Parms.tag = std::move(tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentCatalogEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UCatalogData*               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UCatalogData* UJamMusicSlot::GetCurrentCatalogEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentCatalogEntry");

	Params::JamMusicSlot_GetCurrentCatalogEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKey UJamMusicSlot::GetCurrentKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentKey");

	Params::JamMusicSlot_GetCurrentKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFMJamLoop*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFMJamLoop* UJamMusicSlot::GetCurrentLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentLoop");

	Params::JamMusicSlot_GetCurrentLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoopInstanceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamMusicSlot::GetCurrentLoopInstanceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentLoopInstanceId");

	Params::JamMusicSlot_GetCurrentLoopInstanceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentLoopType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFMJamLoopType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFMJamLoopType UJamMusicSlot::GetCurrentLoopType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentLoopType");

	Params::JamMusicSlot_GetCurrentLoopType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKeyMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKeyMode UJamMusicSlot::GetCurrentMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentMode");

	Params::JamMusicSlot_GetCurrentMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* UJamMusicSlot::GetCurrentPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentPlayerState");

	Params::JamMusicSlot_GetCurrentPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSong
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFMJamSong*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFMJamSong* UJamMusicSlot::GetCurrentSong() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentSong");

	Params::JamMusicSlot_GetCurrentSong Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSongLinkCode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJamMusicSlot::GetCurrentSongLinkCode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentSongLinkCode");

	Params::JamMusicSlot_GetCurrentSongLinkCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentSongShortName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UJamMusicSlot::GetCurrentSongShortName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentSongShortName");

	Params::JamMusicSlot_GetCurrentSongShortName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetCurrentTempo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamMusicSlot::GetCurrentTempo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetCurrentTempo");

	Params::JamMusicSlot_GetCurrentTempo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetIsAutoJammer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamMusicSlot::GetIsAutoJammer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetIsAutoJammer");

	Params::JamMusicSlot_GetIsAutoJammer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetMusicManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UJamPlayspaceComponent_MusicManager*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamPlayspaceComponent_MusicManager* UJamMusicSlot::GetMusicManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetMusicManager");

	Params::JamMusicSlot_GetMusicManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetParamsAsJamEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FJamEvent_JamLoopStarted   ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

const struct FJamEvent_JamLoopStarted UJamMusicSlot::GetParamsAsJamEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetParamsAsJamEvent");

	Params::JamMusicSlot_GetParamsAsJamEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.GetPlayParams
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FJamPlayParams             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FJamPlayParams UJamMusicSlot::GetPlayParams() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "GetPlayParams");

	Params::JamMusicSlot_GetPlayParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.HasGameplayTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamMusicSlot::HasGameplayTag(const struct FGameplayTag& tag, bool bExactMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "HasGameplayTag");

	Params::JamMusicSlot_HasGameplayTag Parms{};

	Parms.tag = std::move(tag);
	Parms.bExactMatch = bExactMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamMusicSlot.IsInUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamMusicSlot::IsInUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamMusicSlot", "IsInUse");

	Params::JamMusicSlot_IsInUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.IsAllowedToJamInSplitscreen
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerStateToCheck                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamPlayspaceComponent_MusicManager::IsAllowedToJamInSplitscreen(class APlayerState* PlayerStateToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JamPlayspaceComponent_MusicManager", "IsAllowedToJamInSplitscreen");

	Params::JamPlayspaceComponent_MusicManager_IsAllowedToJamInSplitscreen Parms{};

	Parms.PlayerStateToCheck = PlayerStateToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.FireGlobalControlsAnalytics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::FireGlobalControlsAnalytics(const class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "FireGlobalControlsAnalytics");

	Params::JamPlayspaceComponent_MusicManager_FireGlobalControlsAnalytics Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleKeyChangedEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FSparksPlayspaceEvent_KeyChanged&Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::HandleKeyChangedEvent(const struct FSparksPlayspaceEvent_KeyChanged& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "HandleKeyChangedEvent");

	Params::JamPlayspaceComponent_MusicManager_HandleKeyChangedEvent Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleModeChangedEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FSparksPlayspaceEvent_KeyModeChanged&Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::HandleModeChangedEvent(const struct FSparksPlayspaceEvent_KeyModeChanged& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "HandleModeChangedEvent");

	Params::JamPlayspaceComponent_MusicManager_HandleModeChangedEvent Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleOnLoopStarted
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FJamPlayParams&            PlayParams                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bChangedLoop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::HandleOnLoopStarted(const struct FJamPlayParams& PlayParams, bool bChangedLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "HandleOnLoopStarted");

	Params::JamPlayspaceComponent_MusicManager_HandleOnLoopStarted Parms{};

	Parms.PlayParams = std::move(PlayParams);
	Parms.bChangedLoop = bChangedLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleOnLoopStopped
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FJamPlayParams&            PlayParams                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bChangedLoop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::HandleOnLoopStopped(const struct FJamPlayParams& PlayParams, bool bChangedLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "HandleOnLoopStopped");

	Params::JamPlayspaceComponent_MusicManager_HandleOnLoopStopped Parms{};

	Parms.PlayParams = std::move(PlayParams);
	Parms.bChangedLoop = bChangedLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.HandleTempoChangedEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const struct FSparksPlayspaceEvent_TempoChanged&Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::HandleTempoChangedEvent(const struct FSparksPlayspaceEvent_TempoChanged& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "HandleTempoChangedEvent");

	Params::JamPlayspaceComponent_MusicManager_HandleTempoChangedEvent Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnLicensedAudioTreatmentChanged
// (Final, Native, Public)

void UJamPlayspaceComponent_MusicManager::OnLicensedAudioTreatmentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "OnLicensedAudioTreatmentChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnPlayspaceUserAdded
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FPlayspaceUser*                  AddedUser                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::OnPlayspaceUserAdded(struct FPlayspaceUser* AddedUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "OnPlayspaceUserAdded");

	Params::JamPlayspaceComponent_MusicManager_OnPlayspaceUserAdded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AddedUser != nullptr)
		*AddedUser = std::move(Parms.AddedUser);
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnPlayspaceUserRemoved
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FPlayspaceUser*                  RemovedUser                                            (Parm, OutParm, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::OnPlayspaceUserRemoved(struct FPlayspaceUser* RemovedUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "OnPlayspaceUserRemoved");

	Params::JamPlayspaceComponent_MusicManager_OnPlayspaceUserRemoved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RemovedUser != nullptr)
		*RemovedUser = std::move(Parms.RemovedUser);
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.OnRep_MusicSlots
// (Final, Native, Protected, HasOutParams)
// Parameters:
// const TArray<class UJamMusicSlot*>&     PreviousMusicSlots                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::OnRep_MusicSlots(const TArray<class UJamMusicSlot*>& PreviousMusicSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "OnRep_MusicSlots");

	Params::JamPlayspaceComponent_MusicManager_OnRep_MusicSlots Parms{};

	Parms.PreviousMusicSlots = std::move(PreviousMusicSlots);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.UpdateAllMetasounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class APlayerState*               PlayerToIgnore                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_MusicManager::UpdateAllMetasounds(const class APlayerState* PlayerToIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "UpdateAllMetasounds");

	Params::JamPlayspaceComponent_MusicManager_UpdateAllMetasounds Parms{};

	Parms.PlayerToIgnore = PlayerToIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.CountActiveSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              bCountAutoJammers                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::CountActiveSlots(const bool bCountAutoJammers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "CountActiveSlots");

	Params::JamPlayspaceComponent_MusicManager_CountActiveSlots Parms{};

	Parms.bCountAutoJammers = bCountAutoJammers;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAllJammers
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> UJamPlayspaceComponent_MusicManager::GetAllJammers() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetAllJammers");

	Params::JamPlayspaceComponent_MusicManager_GetAllJammers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAllMusicSlots
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> UJamPlayspaceComponent_MusicManager::GetAllMusicSlots() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetAllMusicSlots");

	Params::JamPlayspaceComponent_MusicManager_GetAllMusicSlots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAllSlotsWithTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExactMatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> UJamPlayspaceComponent_MusicManager::GetAllSlotsWithTag(const struct FGameplayTag& tag, bool bExactMatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetAllSlotsWithTag");

	Params::JamPlayspaceComponent_MusicManager_GetAllSlotsWithTag Parms{};

	Parms.tag = std::move(tag);
	Parms.bExactMatch = bExactMatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetAutoJammersForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> UJamPlayspaceComponent_MusicManager::GetAutoJammersForPlayer(const class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetAutoJammersForPlayer");

	Params::JamPlayspaceComponent_MusicManager_GetAutoJammersForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKey UJamPlayspaceComponent_MusicManager::GetCurrentKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetCurrentKey");

	Params::JamPlayspaceComponent_MusicManager_GetCurrentKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMidiSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJamPlayspaceComponent_MusicManager::GetCurrentMidiSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetCurrentMidiSeconds");

	Params::JamPlayspaceComponent_MusicManager_GetCurrentMidiSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMidiTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::GetCurrentMidiTick() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetCurrentMidiTick");

	Params::JamPlayspaceComponent_MusicManager_GetCurrentMidiTick Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKeyMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKeyMode UJamPlayspaceComponent_MusicManager::GetCurrentMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetCurrentMode");

	Params::JamPlayspaceComponent_MusicManager_GetCurrentMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetCurrentTempo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::GetCurrentTempo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetCurrentTempo");

	Params::JamPlayspaceComponent_MusicManager_GetCurrentTempo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetDesiredGain
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJamPlayspaceComponent_MusicManager::GetDesiredGain(const class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetDesiredGain");

	Params::JamPlayspaceComponent_MusicManager_GetDesiredGain Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetJamPlayspace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AJamPlayspace*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AJamPlayspace* UJamPlayspaceComponent_MusicManager::GetJamPlayspace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetJamPlayspace");

	Params::JamPlayspaceComponent_MusicManager_GetJamPlayspace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetLoadedAnimations
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USparksInstrumentAnimations*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USparksInstrumentAnimations* UJamPlayspaceComponent_MusicManager::GetLoadedAnimations() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetLoadedAnimations");

	Params::JamPlayspaceComponent_MusicManager_GetLoadedAnimations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetLocalPlayerGainValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJamPlayspaceComponent_MusicManager::GetLocalPlayerGainValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetLocalPlayerGainValue");

	Params::JamPlayspaceComponent_MusicManager_GetLocalPlayerGainValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMetasoundPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UJamPlayspaceComponent_MusicManager::GetMetasoundPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMetasoundPlayer");

	Params::JamPlayspaceComponent_MusicManager_GetMetasoundPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotByLoopInstanceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             LoopInstanceId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJamMusicSlot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamMusicSlot* UJamPlayspaceComponent_MusicManager::GetMusicSlotByLoopInstanceId(const int32 LoopInstanceId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotByLoopInstanceId");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotByLoopInstanceId Parms{};

	Parms.LoopInstanceId = LoopInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotBySlotIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             SlotIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJamMusicSlot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamMusicSlot* UJamPlayspaceComponent_MusicManager::GetMusicSlotBySlotIndex(const int32 SlotIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotBySlotIndex");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotBySlotIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UJamMusicSlot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UJamMusicSlot* UJamPlayspaceComponent_MusicManager::GetMusicSlotForPlayer(const class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotForPlayer");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotIndexForLoopInstanceId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             LoopInstanceId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::GetMusicSlotIndexForLoopInstanceId(const int32 LoopInstanceId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotIndexForLoopInstanceId");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForLoopInstanceId Parms{};

	Parms.LoopInstanceId = LoopInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotIndexForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerState                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::GetMusicSlotIndexForPlayer(const class APlayerState* PlayerState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotIndexForPlayer");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotIndexForPlayer Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotsForLoopType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const EFMJamLoopType                    LoopType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> UJamPlayspaceComponent_MusicManager::GetMusicSlotsForLoopType(const EFMJamLoopType LoopType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotsForLoopType");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotsForLoopType Parms{};

	Parms.LoopType = LoopType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetMusicSlotsInUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UJamMusicSlot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UJamMusicSlot*> UJamPlayspaceComponent_MusicManager::GetMusicSlotsInUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetMusicSlotsInUse");

	Params::JamPlayspaceComponent_MusicManager_GetMusicSlotsInUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.GetStandardGainValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJamPlayspaceComponent_MusicManager::GetStandardGainValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "GetStandardGainValue");

	Params::JamPlayspaceComponent_MusicManager_GetStandardGainValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.SecondsToTick
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             Seconds                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJamPlayspaceComponent_MusicManager::SecondsToTick(const float Seconds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "SecondsToTick");

	Params::JamPlayspaceComponent_MusicManager_SecondsToTick Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.ShouldPlayLocalSound
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APlayerState*               PlayerToIgnore                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamPlayspaceComponent_MusicManager::ShouldPlayLocalSound(const class APlayerState* PlayerToIgnore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "ShouldPlayLocalSound");

	Params::JamPlayspaceComponent_MusicManager_ShouldPlayLocalSound Parms{};

	Parms.PlayerToIgnore = PlayerToIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_MusicManager.TickToSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             Tick                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJamPlayspaceComponent_MusicManager::TickToSeconds(const int32 Tick) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_MusicManager", "TickToSeconds");

	Params::JamPlayspaceComponent_MusicManager_TickToSeconds Parms{};

	Parms.Tick = Tick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.AddReactiveNiagaraEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LoopInstanceId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                NiagaraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_ReactiveFX::AddReactiveNiagaraEffect(int32 LoopInstanceId, class UNiagaraComponent* NiagaraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "AddReactiveNiagaraEffect");

	Params::JamPlayspaceComponent_ReactiveFX_AddReactiveNiagaraEffect Parms{};

	Parms.LoopInstanceId = LoopInstanceId;
	Parms.NiagaraComponent = NiagaraComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.ClearReactiveEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bStopEffectsImmediately                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_ReactiveFX::ClearReactiveEffects(bool bStopEffectsImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "ClearReactiveEffects");

	Params::JamPlayspaceComponent_ReactiveFX_ClearReactiveEffects Parms{};

	Parms.bStopEffectsImmediately = bStopEffectsImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.ClearReactiveEffectsForLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LoopInstanceId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopEffectsImmediately                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamPlayspaceComponent_ReactiveFX::ClearReactiveEffectsForLoop(int32 LoopInstanceId, bool bStopEffectsImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "ClearReactiveEffectsForLoop");

	Params::JamPlayspaceComponent_ReactiveFX_ClearReactiveEffectsForLoop Parms{};

	Parms.LoopInstanceId = LoopInstanceId;
	Parms.bStopEffectsImmediately = bStopEffectsImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.HasReactiveEffectsForLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LoopInstanceId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamPlayspaceComponent_ReactiveFX::HasReactiveEffectsForLoop(int32 LoopInstanceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "HasReactiveEffectsForLoop");

	Params::JamPlayspaceComponent_ReactiveFX_HasReactiveEffectsForLoop Parms{};

	Parms.LoopInstanceId = LoopInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.RemoveReactiveNiagaraEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LoopInstanceId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                NiagaraComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamPlayspaceComponent_ReactiveFX::RemoveReactiveNiagaraEffect(int32 LoopInstanceId, class UNiagaraComponent* NiagaraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "RemoveReactiveNiagaraEffect");

	Params::JamPlayspaceComponent_ReactiveFX_RemoveReactiveNiagaraEffect Parms{};

	Parms.LoopInstanceId = LoopInstanceId;
	Parms.NiagaraComponent = NiagaraComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceComponent_ReactiveFX.GetReactiveNiagaraEffects
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LoopInstanceId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UNiagaraComponent*>        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UNiagaraComponent*> UJamPlayspaceComponent_ReactiveFX::GetReactiveNiagaraEffects(int32 LoopInstanceId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceComponent_ReactiveFX", "GetReactiveNiagaraEffects");

	Params::JamPlayspaceComponent_ReactiveFX_GetReactiveNiagaraEffects Parms{};

	Parms.LoopInstanceId = LoopInstanceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamPlayspaceRuntime.JamPlayspaceVolume.BP_UpdateReactiveFX
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   JamAmplitude                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AJamPlayspaceVolume::BP_UpdateReactiveFX(float JamAmplitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayspaceVolume", "BP_UpdateReactiveFX");

	Params::JamPlayspaceVolume_BP_UpdateReactiveFX Parms{};

	Parms.JamAmplitude = JamAmplitude;

	UObject::ProcessEvent(Func, &Parms);
}

}

