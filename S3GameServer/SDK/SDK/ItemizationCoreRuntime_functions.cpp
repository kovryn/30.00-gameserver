#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemizationCoreRuntime

#include "Basic.hpp"

#include "ItemizationCoreRuntime_classes.hpp"
#include "ItemizationCoreRuntime_parameters.hpp"


namespace SDK
{

// Function ItemizationCoreRuntime.InventoryCollection.ClientOnItemAbilityCooldownUpdated
// (Net, NetReliable, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// const struct FGuid&                     InventoryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FItemAbilityCooldownState& CooldownState                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AInventoryCollection::ClientOnItemAbilityCooldownUpdated(const struct FGuid& InventoryID, const struct FGuid& ItemEntryID, const struct FItemAbilityCooldownState& CooldownState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "ClientOnItemAbilityCooldownUpdated");

	Params::InventoryCollection_ClientOnItemAbilityCooldownUpdated Parms{};

	Parms.InventoryID = std::move(InventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.CooldownState = std::move(CooldownState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.DropItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             AmountToDrop                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::DropItem(const struct FGuid& ItemEntryID, const int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "DropItem");

	Params::InventoryCollection_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.AmountToDrop = AmountToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_DropItem
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_DropItem(const struct FGuid& ItemEntryID, int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_DropItem");

	Params::InventoryCollection_Server_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.AmountToDrop = AmountToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_MoveItemListToInventory
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const TArray<struct FGuid>&             ItemEntryIDList                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AInventoryCollection*             TargetInventoryCollection                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_MoveItemListToInventory(const TArray<struct FGuid>& ItemEntryIDList, class AInventoryCollection* TargetInventoryCollection, const struct FGuid& TargetInventoryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_MoveItemListToInventory");

	Params::InventoryCollection_Server_MoveItemListToInventory Parms{};

	Parms.ItemEntryIDList = std::move(ItemEntryIDList);
	Parms.TargetInventoryCollection = TargetInventoryCollection;
	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_MoveItemsWithDefinitionToInventory
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     OwningInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemDefinitionBase*        ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AInventoryCollection*             TargetInventoryCollection                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int64                             Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_MoveItemsWithDefinitionToInventory(const struct FGuid& OwningInventoryID, const class UItemDefinitionBase* ItemDefinition, class AInventoryCollection* TargetInventoryCollection, const struct FGuid& TargetInventoryID, const int64 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_MoveItemsWithDefinitionToInventory");

	Params::InventoryCollection_Server_MoveItemsWithDefinitionToInventory Parms{};

	Parms.OwningInventoryID = std::move(OwningInventoryID);
	Parms.ItemDefinition = ItemDefinition;
	Parms.TargetInventoryCollection = TargetInventoryCollection;
	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_MoveItemToInventory
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AInventoryCollection*             TargetInventoryCollection                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_MoveItemToInventory(const struct FGuid& ItemEntryID, class AInventoryCollection* TargetInventoryCollection, const struct FGuid& TargetInventoryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_MoveItemToInventory");

	Params::InventoryCollection_Server_MoveItemToInventory Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.TargetInventoryCollection = TargetInventoryCollection;
	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemActive
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetEquippableItemActive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_SetEquippableItemActive");

	Params::InventoryCollection_Server_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetEquippableItemInactive
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetEquippableItemInactive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_SetEquippableItemInactive");

	Params::InventoryCollection_Server_SetEquippableItemInactive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SetItemSlot
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     OwningInventoryID                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint16                            SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EVkInventoryMoveBehaviour         MoveBehaviour                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SetItemSlot(const struct FGuid& OwningInventoryID, const struct FGuid& ItemEntryID, const uint16 SlotNumber, const EVkInventoryMoveBehaviour MoveBehaviour)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_SetItemSlot");

	Params::InventoryCollection_Server_SetItemSlot Parms{};

	Parms.OwningInventoryID = std::move(OwningInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.SlotNumber = SlotNumber;
	Parms.MoveBehaviour = MoveBehaviour;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_SwapItems
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AInventoryCollection*             OtherInventoryCollection                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     OtherItemEntryID                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_SwapItems(const struct FGuid& ItemEntryID, class AInventoryCollection* OtherInventoryCollection, const struct FGuid& OtherItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_SwapItems");

	Params::InventoryCollection_Server_SwapItems Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.OtherInventoryCollection = OtherInventoryCollection;
	Parms.OtherItemEntryID = std::move(OtherItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.Server_UseItem
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// const struct FGuid&                     ItemId                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::Server_UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "Server_UseItem");

	Params::InventoryCollection_Server_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemActive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::SetEquippableItemActive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "SetEquippableItemActive");

	Params::InventoryCollection_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.SetEquippableItemInactive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::SetEquippableItemInactive(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "SetEquippableItemInactive");

	Params::InventoryCollection_SetEquippableItemInactive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.SetInventoryMaxStackSizeOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   InInventoryMaxStackSizeOverride                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::SetInventoryMaxStackSizeOverride(const struct FGuid& TargetInventoryID, int64 InInventoryMaxStackSizeOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "SetInventoryMaxStackSizeOverride");

	Params::InventoryCollection_SetInventoryMaxStackSizeOverride Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.InInventoryMaxStackSizeOverride = InInventoryMaxStackSizeOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.SetInventoryTotalSlotsOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   InInventoryTotalSlotsOverride                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::SetInventoryTotalSlotsOverride(const struct FGuid& TargetInventoryID, int64 InInventoryTotalSlotsOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "SetInventoryTotalSlotsOverride");

	Params::InventoryCollection_SetInventoryTotalSlotsOverride Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.InInventoryTotalSlotsOverride = InInventoryTotalSlotsOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.UseItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInventoryCollection::UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "UseItem");

	Params::InventoryCollection_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetAllInventoriesInCollection
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FGuid>*                   OutInventoryIDList                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::GetAllInventoriesInCollection(TArray<struct FGuid>* OutInventoryIDList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetAllInventoriesInCollection");

	Params::InventoryCollection_GetAllInventoriesInCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInventoryIDList != nullptr)
		*OutInventoryIDList = std::move(Parms.OutInventoryIDList);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetAllItemsInInventory
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>*                   OutItemEntryIDList                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::GetAllItemsInInventory(const struct FGuid& TargetInventoryID, TArray<struct FGuid>* OutItemEntryIDList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetAllItemsInInventory");

	Params::InventoryCollection_GetAllItemsInInventory Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutItemEntryIDList != nullptr)
		*OutItemEntryIDList = std::move(Parms.OutItemEntryIDList);

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoriesWithInventoryDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UInventoryDefinition*       InventoryDefinition                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> AInventoryCollection::GetInventoriesWithInventoryDefinition(const class UInventoryDefinition* InventoryDefinition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoriesWithInventoryDefinition");

	Params::InventoryCollection_GetInventoriesWithInventoryDefinition Parms{};

	Parms.InventoryDefinition = InventoryDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryCreationType
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EItemizationInventoryCreationType       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EItemizationInventoryCreationType AInventoryCollection::GetInventoryCreationType(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryCreationType");

	Params::InventoryCollection_GetInventoryCreationType Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryDefinition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInventoryDefinition*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInventoryDefinition* AInventoryCollection::GetInventoryDefinition(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryDefinition");

	Params::InventoryCollection_GetInventoryDefinition Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryListInPickupPriorityForItemDefinition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemDefinitionBase*        ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGuid>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGuid> AInventoryCollection::GetInventoryListInPickupPriorityForItemDefinition(const class UItemDefinitionBase* ItemDefinition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryListInPickupPriorityForItemDefinition");

	Params::InventoryCollection_GetInventoryListInPickupPriorityForItemDefinition Parms{};

	Parms.ItemDefinition = ItemDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryMaxStackSizeOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetInventoryMaxStackSizeOverride(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryMaxStackSizeOverride");

	Params::InventoryCollection_GetInventoryMaxStackSizeOverride Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryName
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText AInventoryCollection::GetInventoryName(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryName");

	Params::InventoryCollection_GetInventoryName Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetInventoryTotalSlotsOverride
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetInventoryTotalSlotsOverride(const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetInventoryTotalSlotsOverride");

	Params::InventoryCollection_GetInventoryTotalSlotsOverride Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemDefinitionBase*        ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmount(const class UItemDefinitionBase* ItemDefinition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemAmount");

	Params::InventoryCollection_GetItemAmount Parms{};

	Parms.ItemDefinition = ItemDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromEntry
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmountFromEntry(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemAmountFromEntry");

	Params::InventoryCollection_GetItemAmountFromEntry Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemAmountFromInventory
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemDefinitionBase*        ItemDefinition                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemAmountFromInventory(const class UItemDefinitionBase* ItemDefinition, const struct FGuid& TargetInventoryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemAmountFromInventory");

	Params::InventoryCollection_GetItemAmountFromInventory Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.TargetInventoryID = std::move(TargetInventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemDefinition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* AInventoryCollection::GetItemDefinition(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemDefinition");

	Params::InventoryCollection_GetItemDefinition Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemEntryIDBySlot
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             SlotNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid AInventoryCollection::GetItemEntryIDBySlot(const struct FGuid& TargetInventoryID, const int32 SlotNumber) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemEntryIDBySlot");

	Params::InventoryCollection_GetItemEntryIDBySlot Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.SlotNumber = SlotNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemMaxAmountForEntry
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 AInventoryCollection::GetItemMaxAmountForEntry(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemMaxAmountForEntry");

	Params::InventoryCollection_GetItemMaxAmountForEntry Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.GetItemSlotNumber
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     TargetInventoryID                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AInventoryCollection::GetItemSlotNumber(const struct FGuid& TargetInventoryID, const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "GetItemSlotNumber");

	Params::InventoryCollection_GetItemSlotNumber Parms{};

	Parms.TargetInventoryID = std::move(TargetInventoryID);
	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryCollection.IsEquippableItemActive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AInventoryCollection::IsEquippableItemActive(const struct FGuid& ItemEntryID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollection", "IsEquippableItemActive");

	Params::InventoryCollection_IsEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryDefinition
// (Native, Protected)

void UInventory::OnRep_InventoryDefinition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Inventory", "OnRep_InventoryDefinition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryID
// (Final, Native, Protected)

void UInventory::OnRep_InventoryID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Inventory", "OnRep_InventoryID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryMaxStackSizeOverride
// (Final, Native, Protected)

void UInventory::OnRep_InventoryMaxStackSizeOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Inventory", "OnRep_InventoryMaxStackSizeOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_InventoryTotalSlotsOverride
// (Final, Native, Protected)

void UInventory::OnRep_InventoryTotalSlotsOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Inventory", "OnRep_InventoryTotalSlotsOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.Inventory.OnRep_ItemData
// (Final, Native, Protected)

void UInventory::OnRep_ItemData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Inventory", "OnRep_ItemData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.EquippableInventory.OnRep_ActiveItems
// (Final, Native, Private)

void UEquippableInventory::OnRep_ActiveItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippableInventory", "OnRep_ActiveItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryAddToItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToAdd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryAddToItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryAddToItem");

	Params::InventoryCheatManager_InventoryAddToItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToAdd = AmountToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryDropItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToDrop                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryDropItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToDrop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryDropItem");

	Params::InventoryCheatManager_InventoryDropItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToDrop = AmountToDrop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveAmountOfItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SourceInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToMove                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryMoveAmountOfItem(int32 SourceInventoryIndex, int32 ItemIndex, int32 TargetInventoryIndex, int64 AmountToMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryMoveAmountOfItem");

	Params::InventoryCheatManager_InventoryMoveAmountOfItem Parms{};

	Parms.SourceInventoryIndex = SourceInventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.TargetInventoryIndex = TargetInventoryIndex;
	Parms.AmountToMove = AmountToMove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryMoveItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SourceInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TargetInventoryIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryMoveItem(int32 SourceInventoryIndex, int32 ItemIndex, int32 TargetInventoryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryMoveItem");

	Params::InventoryCheatManager_InventoryMoveItem Parms{};

	Parms.SourceInventoryIndex = SourceInventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.TargetInventoryIndex = TargetInventoryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryRemoveFromItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AmountToRemove                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryRemoveFromItem(int32 InventoryIndex, int32 ItemIndex, int64 AmountToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryRemoveFromItem");

	Params::InventoryCheatManager_InventoryRemoveFromItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.AmountToRemove = AmountToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetEquippedItemActive
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventorySetEquippedItemActive(int32 InventoryIndex, int32 ItemIndex, bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventorySetEquippedItemActive");

	Params::InventoryCheatManager_InventorySetEquippedItemActive Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventorySetItemSlot
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  NewSlotIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventorySetItemSlot(int32 InventoryIndex, int32 ItemIndex, uint16 NewSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventorySetItemSlot");

	Params::InventoryCheatManager_InventorySetItemSlot Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;
	Parms.NewSlotIndex = NewSlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryCheatManager.InventoryUseItem
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InventoryIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryCheatManager::InventoryUseItem(int32 InventoryIndex, int32 ItemIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCheatManager", "InventoryUseItem");

	Params::InventoryCheatManager_InventoryUseItem Parms{};

	Parms.InventoryIndex = InventoryIndex;
	Parms.ItemIndex = ItemIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventorySetupData.SetEquippableInventoryDefinitionList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<TSoftObjectPtr<class UEquippableInventoryDefinition>>&EquipmentInventoryDefinitionList                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UInventorySetupData::SetEquippableInventoryDefinitionList(const TArray<TSoftObjectPtr<class UEquippableInventoryDefinition>>& EquipmentInventoryDefinitionList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "SetEquippableInventoryDefinitionList");

	Params::InventorySetupData_SetEquippableInventoryDefinitionList Parms{};

	Parms.EquipmentInventoryDefinitionList = std::move(EquipmentInventoryDefinitionList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventorySetupData.SetInventoryDefinitionList
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<TSoftObjectPtr<class UInventoryDefinition>>&InventoryDefinitionList                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void UInventorySetupData::SetInventoryDefinitionList(const TArray<TSoftObjectPtr<class UInventoryDefinition>>& InventoryDefinitionList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "SetInventoryDefinitionList");

	Params::InventorySetupData_SetInventoryDefinitionList Parms{};

	Parms.InventoryDefinitionList = std::move(InventoryDefinitionList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventorySetupData.GetDisallowedEquipmentInventoryDefinitionAssetClasses
// (Native, Protected, Const)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UInventorySetupData::GetDisallowedEquipmentInventoryDefinitionAssetClasses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "GetDisallowedEquipmentInventoryDefinitionAssetClasses");

	Params::InventorySetupData_GetDisallowedEquipmentInventoryDefinitionAssetClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventorySetupData.GetDisallowedInventoryDefinitionAssetClasses
// (Native, Protected, Const)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UInventorySetupData::GetDisallowedInventoryDefinitionAssetClasses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "GetDisallowedInventoryDefinitionAssetClasses");

	Params::InventorySetupData_GetDisallowedInventoryDefinitionAssetClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventorySetupData.GetEquippableInventoryDefinitionList
// (Final, Native, Public, Const)
// Parameters:
// TArray<TSoftObjectPtr<class UEquippableInventoryDefinition>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSoftObjectPtr<class UEquippableInventoryDefinition>> UInventorySetupData::GetEquippableInventoryDefinitionList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "GetEquippableInventoryDefinitionList");

	Params::InventorySetupData_GetEquippableInventoryDefinitionList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventorySetupData.GetInventoryDefinitionList
// (Final, Native, Public, Const)
// Parameters:
// TArray<TSoftObjectPtr<class UInventoryDefinition>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSoftObjectPtr<class UInventoryDefinition>> UInventorySetupData::GetInventoryDefinitionList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "GetInventoryDefinitionList");

	Params::InventorySetupData_GetInventoryDefinitionList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventorySetupData.GetStartingItems
// (Final, Native, Public, Const)
// Parameters:
// TArray<struct FInventoryStartingItem>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FInventoryStartingItem> UInventorySetupData::GetStartingItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventorySetupData", "GetStartingItems");

	Params::InventorySetupData_GetStartingItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemAbilityConfigurationAsset.Construct
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class UGameplayAbility*                 ability                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemAbilityConfigurationAsset::Construct(class UGameplayAbility* ability) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemAbilityConfigurationAsset", "Construct");

	Params::ItemAbilityConfigurationAsset_Construct Parms{};

	Parms.ability = ability;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemDefinitionBase", "GetDisplayName");

	Params::ItemDefinitionBase_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemData
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// EItemDataQueryResult*                   ExecResult                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  ItemData                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemDefinitionBase::GetItemData(EItemDataQueryResult* ExecResult, int32* ItemData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemDefinitionBase", "GetItemData");

	Params::ItemDefinitionBase_GetItemData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ExecResult != nullptr)
		*ExecResult = Parms.ExecResult;

	if (ItemData != nullptr)
		*ItemData = Parms.ItemData;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemDescription
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetItemDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemDefinitionBase", "GetItemDescription");

	Params::ItemDefinitionBase_GetItemDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemDefinitionBase.GetItemShortDescription
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UItemDefinitionBase::GetItemShortDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemDefinitionBase", "GetItemShortDescription");

	Params::ItemDefinitionBase_GetItemShortDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeInventoryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGuid&                     InventoryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UItemizationFunctionLibrary::DescribeInventoryID(const struct FGuid& InventoryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemizationFunctionLibrary", "DescribeInventoryID");

	Params::ItemizationFunctionLibrary_DescribeInventoryID Parms{};

	Parms.InventoryID = std::move(InventoryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.DescribeItemEntryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UItemizationFunctionLibrary::DescribeItemEntryID(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemizationFunctionLibrary", "DescribeItemEntryID");

	Params::ItemizationFunctionLibrary_DescribeItemEntryID Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataDefinition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FItemAggregatedData&       ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UItemDefinitionBase*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemDefinitionBase* UItemizationFunctionLibrary::GetItemDataDefinition(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemizationFunctionLibrary", "GetItemDataDefinition");

	Params::ItemizationFunctionLibrary_GetItemDataDefinition Parms{};

	Parms.ItemData = std::move(ItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataItemEntryID
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FItemAggregatedData&       ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGuid UItemizationFunctionLibrary::GetItemDataItemEntryID(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemizationFunctionLibrary", "GetItemDataItemEntryID");

	Params::ItemizationFunctionLibrary_GetItemDataItemEntryID Parms{};

	Parms.ItemData = std::move(ItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationFunctionLibrary.GetItemDataSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FItemAggregatedData&       ItemData                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UItemizationFunctionLibrary::GetItemDataSlot(const struct FItemAggregatedData& ItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ItemizationFunctionLibrary", "GetItemDataSlot");

	Params::ItemizationFunctionLibrary_GetItemDataSlot Parms{};

	Parms.ItemData = std::move(ItemData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationLootPoolAsset.GetAllowedLootPoolItemClasses
// (Native, Public, Const)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UItemizationLootPoolAsset::GetAllowedLootPoolItemClasses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemizationLootPoolAsset", "GetAllowedLootPoolItemClasses");

	Params::ItemizationLootPoolAsset_GetAllowedLootPoolItemClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationLootPoolAsset.GetDisallowedLootPoolItemClasses
// (Native, Public, Const)
// Parameters:
// TArray<class UClass*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UClass*> UItemizationLootPoolAsset::GetDisallowedLootPoolItemClasses() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemizationLootPoolAsset", "GetDisallowedLootPoolItemClasses");

	Params::ItemizationLootPoolAsset_GetDisallowedLootPoolItemClasses Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemizationWorldSubsystem.OnInventoryComponentDestroyed
// (Final, Native, Protected)
// Parameters:
// const class UInventoryComponent*        InventoryComponent                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UItemizationWorldSubsystem::OnInventoryComponentDestroyed(const class UInventoryComponent* InventoryComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemizationWorldSubsystem", "OnInventoryComponentDestroyed");

	Params::ItemizationWorldSubsystem_OnInventoryComponentDestroyed Parms{};

	Parms.InventoryComponent = InventoryComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.ItemRarity.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLinearColor               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FLinearColor UItemRarity::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemRarity", "GetColor");

	Params::ItemRarity_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemRarity::GetDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemRarity", "GetDescription");

	Params::ItemRarity_GetDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemRarity::GetName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemRarity", "GetName");

	Params::ItemRarity_GetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemRarity.GetTier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UItemRarity::GetTier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemRarity", "GetTier");

	Params::ItemRarity_GetTier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetDescription
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemType::GetDescription() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemType", "GetDescription");

	Params::ItemType_GetDescription Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UItemType::GetName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemType", "GetName");

	Params::ItemType_GetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.ItemType.GetParentType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UItemType*                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UItemType* UItemType::GetParentType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemType", "GetParentType");

	Params::ItemType_GetParentType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ItemizationCoreRuntime.InventoryComponent.AddItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UItemDefinitionBase*              ItemDefinition                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::AddItem(class UItemDefinitionBase* ItemDefinition, int64 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "AddItem");

	Params::InventoryComponent_AddItem Parms{};

	Parms.ItemDefinition = ItemDefinition;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.AddOrResetInventory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInventoryDefinition*             NewInventoryDefinition                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::AddOrResetInventory(class UInventoryDefinition* NewInventoryDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "AddOrResetInventory");

	Params::InventoryComponent_AddOrResetInventory Parms{};

	Parms.NewInventoryDefinition = NewInventoryDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.DropItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::DropItem(const struct FGuid& ItemEntryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "DropItem");

	Params::InventoryComponent_DropItem Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.OnRep_InventoryCollection
// (Final, Native, Private)

void UInventoryComponent::OnRep_InventoryCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "OnRep_InventoryCollection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.SetEquippableItemActive
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemEntryID                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bActive                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::SetEquippableItemActive(const struct FGuid& ItemEntryID, bool bActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "SetEquippableItemActive");

	Params::InventoryComponent_SetEquippableItemActive Parms{};

	Parms.ItemEntryID = std::move(ItemEntryID);
	Parms.bActive = bActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.UseItem
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGuid&                     ItemId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGuid&                     AdditionalItemID                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInventoryComponent::UseItem(const struct FGuid& ItemId, const struct FGuid& AdditionalItemID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "UseItem");

	Params::InventoryComponent_UseItem Parms{};

	Parms.ItemId = std::move(ItemId);
	Parms.AdditionalItemID = std::move(AdditionalItemID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ItemizationCoreRuntime.InventoryComponent.GetInventoryCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AInventoryCollection*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AInventoryCollection* UInventoryComponent::GetInventoryCollection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryComponent", "GetInventoryCollection");

	Params::InventoryComponent_GetInventoryCollection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

