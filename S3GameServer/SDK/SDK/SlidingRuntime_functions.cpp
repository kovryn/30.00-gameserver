#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlidingRuntime

#include "Basic.hpp"

#include "SlidingRuntime_classes.hpp"
#include "SlidingRuntime_parameters.hpp"


namespace SDK
{

// Function SlidingRuntime.FortMovementMode_Sliding.EventCallback_OnDoJumpTriggered
// (Final, Native, Private)

void UFortMovementMode_Sliding::EventCallback_OnDoJumpTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "EventCallback_OnDoJumpTriggered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_Sliding.EventCallback_OnPawnLanded
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::EventCallback_OnPawnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "EventCallback_OnPawnLanded");

	Params::FortMovementMode_Sliding_EventCallback_OnPawnLanded Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_Sliding.GameplayTagCallback_CancelSlidingKeepCrouchRequested
// (Final, Native, Private)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::GameplayTagCallback_CancelSlidingKeepCrouchRequested(const struct FGameplayTag& GameplayTag, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "GameplayTagCallback_CancelSlidingKeepCrouchRequested");

	Params::FortMovementMode_Sliding_GameplayTagCallback_CancelSlidingKeepCrouchRequested Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_Sliding.GameplayTagCallback_CancelSlidingRequested
// (Final, Native, Private)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::GameplayTagCallback_CancelSlidingRequested(const struct FGameplayTag& GameplayTag, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "GameplayTagCallback_CancelSlidingRequested");

	Params::FortMovementMode_Sliding_GameplayTagCallback_CancelSlidingRequested Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_Sliding.SetCameraBlendIn
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCameraModifier*                  SlideCameraModifier                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::SetCameraBlendIn(class UCameraModifier* SlideCameraModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "SetCameraBlendIn");

	Params::FortMovementMode_Sliding_SetCameraBlendIn Parms{};

	Parms.SlideCameraModifier = SlideCameraModifier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SlidingRuntime.FortMovementMode_Sliding.ToggleLandFX
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawn*                  FortPlayerPawn                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHiddenInGame                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::ToggleLandFX(class AFortPlayerPawn* FortPlayerPawn, bool bHiddenInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "ToggleLandFX");

	Params::FortMovementMode_Sliding_ToggleLandFX Parms{};

	Parms.FortPlayerPawn = FortPlayerPawn;
	Parms.bHiddenInGame = bHiddenInGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SlidingRuntime.FortMovementMode_Sliding.ToggleLandFXAthena
// (Event, Public, BlueprintEvent)
// Parameters:
// class AFortPlayerPawnAthena*            FortPlayerPawnAthena                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHiddenInGame                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_Sliding::ToggleLandFXAthena(class AFortPlayerPawnAthena* FortPlayerPawnAthena, bool bHiddenInGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_Sliding", "ToggleLandFXAthena");

	Params::FortMovementMode_Sliding_ToggleLandFXAthena Parms{};

	Parms.FortPlayerPawnAthena = FortPlayerPawnAthena;
	Parms.bHiddenInGame = bHiddenInGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressed
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedOrRepair
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedOrRepair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedOrRepair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedOrRepairImmediately
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedOrRepairImmediately()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedOrRepairImmediately");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedOrRepairWhileBuilding
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedOrRepairWhileBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedOrRepairWhileBuilding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedOrRepairWhileEditing
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedOrRepairWhileEditing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedOrRepairWhileEditing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedWhileBuilding
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedWhileBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedWhileBuilding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchPressedWhileEditing
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchPressedWhileEditing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchPressedWhileEditing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleased
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleasedOrRepair
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleasedOrRepair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleasedOrRepair");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleasedOrRepairWhileBuilding
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleasedOrRepairWhileBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleasedOrRepairWhileBuilding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleasedOrRepairWhileEditing
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleasedOrRepairWhileEditing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleasedOrRepairWhileEditing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleasedWhileBuilding
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleasedWhileBuilding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleasedWhileBuilding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_CrouchReleasedWhileEditing
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_CrouchReleasedWhileEditing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_CrouchReleasedWhileEditing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_GamepadCrouchGyroPressed
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_GamepadCrouchGyroPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_GamepadCrouchGyroPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_GamepadCrouchGyroReleased
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_GamepadCrouchGyroReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_GamepadCrouchGyroReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_TouchCrouchPressed
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_TouchCrouchPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_TouchCrouchPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortMovementMode_SlidingInputHandler.InputCallback_TouchCrouchReleased
// (Final, Native, Private)

void UFortMovementMode_SlidingInputHandler::InputCallback_TouchCrouchReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_SlidingInputHandler", "InputCallback_TouchCrouchReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnAbilitySystemComponentInitialized
// (Final, Native, Private)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnAbilitySystemComponentInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnAbilitySystemComponentInitialized");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnAbilitySystemComponentInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnDoJumpTriggered_OG_Sliding
// (Final, Native, Private)

void UFortPawnComponent_SlidingProvider::EventCallback_OnDoJumpTriggered_OG_Sliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnDoJumpTriggered_OG_Sliding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnEnteredAircraft_OG_Sliding
// (Final, Native, Private)

void UFortPawnComponent_SlidingProvider::EventCallback_OnEnteredAircraft_OG_Sliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnEnteredAircraft_OG_Sliding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnEnteredAircraft_Sliding
// (Final, Native, Private)

void UFortPawnComponent_SlidingProvider::EventCallback_OnEnteredAircraft_Sliding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnEnteredAircraft_Sliding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnEnteredAircraftComponent_OG_Sliding
// (Final, Native, Private)
// Parameters:
// class AController*                      PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnEnteredAircraftComponent_OG_Sliding(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnEnteredAircraftComponent_OG_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnEnteredAircraftComponent_OG_Sliding Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnEnteredAircraftComponent_Sliding
// (Final, Native, Private)
// Parameters:
// class AController*                      PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnEnteredAircraftComponent_Sliding(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnEnteredAircraftComponent_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnEnteredAircraftComponent_Sliding Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnMovementModeChanged_OG_Sliding
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnMovementModeChanged_OG_Sliding(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnMovementModeChanged_OG_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnMovementModeChanged_OG_Sliding Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnMovementModeChanged_Sliding
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnMovementModeChanged_Sliding(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnMovementModeChanged_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnMovementModeChanged_Sliding Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnPawnLanded
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnPawnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnPawnLanded");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnPawnLanded Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnPawnRestart
// (Final, Native, Private)

void UFortPawnComponent_SlidingProvider::EventCallback_OnPawnRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnPawnRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnPostLandedPhysics
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnPostLandedPhysics(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnPostLandedPhysics");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnPostLandedPhysics Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_OnRepIsSlidingUpdated_OG_Sliding
// (Final, Native, Private)
// Parameters:
// const bool                              bIsPawnSliding                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_OnRepIsSlidingUpdated_OG_Sliding(const bool bIsPawnSliding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_OnRepIsSlidingUpdated_OG_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_OnRepIsSlidingUpdated_OG_Sliding Parms{};

	Parms.bIsPawnSliding = bIsPawnSliding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.EventCallback_Server_OnCharacterMovementPreUpdate_OG_Sliding
// (Final, Native, Private)
// Parameters:
// class UCharacterMovementComponent*      CharMoveComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::EventCallback_Server_OnCharacterMovementPreUpdate_OG_Sliding(class UCharacterMovementComponent* CharMoveComp, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "EventCallback_Server_OnCharacterMovementPreUpdate_OG_Sliding");

	Params::FortPawnComponent_SlidingProvider_EventCallback_Server_OnCharacterMovementPreUpdate_OG_Sliding Parms{};

	Parms.CharMoveComp = CharMoveComp;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.GameplayTagCallback_SlidingCancelRequested
// (Final, Native, Private)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::GameplayTagCallback_SlidingCancelRequested(const struct FGameplayTag& GameplayTag, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "GameplayTagCallback_SlidingCancelRequested");

	Params::FortPawnComponent_SlidingProvider_GameplayTagCallback_SlidingCancelRequested Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SlidingRuntime.FortPawnComponent_SlidingProvider.GameplayTagCallback_SlidingIsAllowed
// (Final, Native, Private)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_SlidingProvider::GameplayTagCallback_SlidingIsAllowed(const struct FGameplayTag& GameplayTag, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_SlidingProvider", "GameplayTagCallback_SlidingIsAllowed");

	Params::FortPawnComponent_SlidingProvider_GameplayTagCallback_SlidingIsAllowed Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

