#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateDrivenActorRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class StateDrivenActorRuntime.FortActorComponent_StateDriven
// 0x02E8 (0x03A0 - 0x00B8)
class alignas(0x10) UFortActorComponent_StateDriven final : public UFortActorComponent_FortInteractExtension
{
public:
	float                                         OverlapRadius;                                     // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlottedItemPopOffset;                              // 0x00C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTagQuery>              VariableTagQueries;                                // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 VariableFloats;                                    // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F8[0xF8];                                      // 0x00F8(0x00F8)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UStaticMeshComponent>    MeshComponentPtr;                                  // 0x01F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USphereComponent>        OverlapComponentPtr;                               // 0x01F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortItemEntry                         SlottedItemEntry;                                  // 0x0200(0x0198)(Net, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void HandleInteraction(class ABuildingActor* SelfActor, class AFortPawn* InteractingPawn);
	void OnHandleStateTreeEvent(const struct FGameplayTag& TransitionTag, const struct FGameplayCueTag& BurstGameplayCueTag);
	void OnMulticastStateTreeEvent(const struct FGameplayTag& TransitionTag, const struct FGameplayCueTag& BurstGameplayCueTag);
	void OnResetCollisionSettings();
	void OnSetupDamageEventSettings();
	void OnSetupInteractionEventSettings();
	void OnSetupOverlapEventSettings();
	void PopSlottedItem();
	void SetCurrentState(const struct FStateDrivenState& InCurrentState);
	void TriggerCustomEvent(const struct FGameplayTag& EventTag);

	class FText GetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText GetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText GetSlottedItemDisplayName() const;
	const struct FFortItemEntry GetSlottedItemEntry() const;
	void PlayBurstGameplayCue(const struct FGameplayTag& GameplayCueTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortActorComponent_StateDriven">();
	}
	static class UFortActorComponent_StateDriven* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortActorComponent_StateDriven>();
	}
};

}

