#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Player_ProceduralLayering_AnimBP

#include "Basic.hpp"

#include "Player_ProceduralLayering_AnimBP_classes.hpp"
#include "Player_ProceduralLayering_AnimBP_parameters.hpp"


namespace SDK
{

// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.AdditiveLayering
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 AddLayer_InLocomotionPose                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 AddLayer_InItemPose                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 AddLayer_InBasePose                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 AddLayer_InLayeredLocomotionPose                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InPoseSourcePose                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       AdditiveLayering_0                                     (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::AdditiveLayering(const struct FPoseLink& AddLayer_InLocomotionPose, const struct FPoseLink& AddLayer_InItemPose, const struct FPoseLink& AddLayer_InBasePose, const struct FPoseLink& AddLayer_InLayeredLocomotionPose, const struct FPoseLink& InPoseSourcePose, struct FPoseLink* AdditiveLayering_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "AdditiveLayering");

	Params::Player_ProceduralLayering_AnimBP_C_AdditiveLayering Parms{};

	Parms.AddLayer_InLocomotionPose = std::move(AddLayer_InLocomotionPose);
	Parms.AddLayer_InItemPose = std::move(AddLayer_InItemPose);
	Parms.AddLayer_InBasePose = std::move(AddLayer_InBasePose);
	Parms.AddLayer_InLayeredLocomotionPose = std::move(AddLayer_InLayeredLocomotionPose);
	Parms.InPoseSourcePose = std::move(InPoseSourcePose);

	UObject::ProcessEvent(Func, &Parms);

	if (AdditiveLayering_0 != nullptr)
		*AdditiveLayering_0 = std::move(Parms.AdditiveLayering_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "AnimGraph");

	Params::Player_ProceduralLayering_AnimBP_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.BasePose
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       BasePose_0                                             (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::BasePose(struct FPoseLink* BasePose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "BasePose");

	Params::Player_ProceduralLayering_AnimBP_C_BasePose Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BasePose_0 != nullptr)
		*BasePose_0 = std::move(Parms.BasePose_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.CopyBoneLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 InCopyBoneLayerPose                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       CopyBoneLayer_0                                        (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::CopyBoneLayer(const struct FPoseLink& InCopyBoneLayerPose, struct FPoseLink* CopyBoneLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "CopyBoneLayer");

	Params::Player_ProceduralLayering_AnimBP_C_CopyBoneLayer Parms{};

	Parms.InCopyBoneLayerPose = std::move(InCopyBoneLayerPose);

	UObject::ProcessEvent(Func, &Parms);

	if (CopyBoneLayer_0 != nullptr)
		*CopyBoneLayer_0 = std::move(Parms.CopyBoneLayer_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.CopyMotionLayer
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 CopyMotion_InBaseLocomotionPose                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 CopyMotion_InBasePose                                  (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 CopyMotion_InLayeredLocomotionPose                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       CopyMotionLayer_0                                      (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::CopyMotionLayer(const struct FPoseLink& CopyMotion_InBaseLocomotionPose, const struct FPoseLink& CopyMotion_InBasePose, const struct FPoseLink& CopyMotion_InLayeredLocomotionPose, struct FPoseLink* CopyMotionLayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "CopyMotionLayer");

	Params::Player_ProceduralLayering_AnimBP_C_CopyMotionLayer Parms{};

	Parms.CopyMotion_InBaseLocomotionPose = std::move(CopyMotion_InBaseLocomotionPose);
	Parms.CopyMotion_InBasePose = std::move(CopyMotion_InBasePose);
	Parms.CopyMotion_InLayeredLocomotionPose = std::move(CopyMotion_InLayeredLocomotionPose);

	UObject::ProcessEvent(Func, &Parms);

	if (CopyMotionLayer_0 != nullptr)
		*CopyMotionLayer_0 = std::move(Parms.CopyMotionLayer_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ExecuteUbergraph_Player_ProceduralLayering_AnimBP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayer_ProceduralLayering_AnimBP_C::ExecuteUbergraph_Player_ProceduralLayering_AnimBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "ExecuteUbergraph_Player_ProceduralLayering_AnimBP");

	Params::Player_ProceduralLayering_AnimBP_C_ExecuteUbergraph_Player_ProceduralLayering_AnimBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.Layering
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 Layer_InBaseLocomotionPose                             (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 Layer_InItemPose                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       Layering_0                                             (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::Layering(const struct FPoseLink& Layer_InBaseLocomotionPose, const struct FPoseLink& Layer_InItemPose, struct FPoseLink* Layering_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "Layering");

	Params::Player_ProceduralLayering_AnimBP_C_Layering Parms{};

	Parms.Layer_InBaseLocomotionPose = std::move(Layer_InBaseLocomotionPose);
	Parms.Layer_InItemPose = std::move(Layer_InItemPose);

	UObject::ProcessEvent(Func, &Parms);

	if (Layering_0 != nullptr)
		*Layering_0 = std::move(Parms.Layering_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.OnUpdateBlendStack_PreNativize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::OnUpdateBlendStack_PreNativize(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "OnUpdateBlendStack_PreNativize");

	Params::Player_ProceduralLayering_AnimBP_C_OnUpdateBlendStack_PreNativize Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralAdditivePose
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InSourceLocomotionPose                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InMotionMatchingPose                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InProceduralLayeredPose                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       ProceduralAdditivePose_0                               (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::ProceduralAdditivePose(const struct FPoseLink& InSourceLocomotionPose, const struct FPoseLink& InMotionMatchingPose, const struct FPoseLink& InProceduralLayeredPose, struct FPoseLink* ProceduralAdditivePose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "ProceduralAdditivePose");

	Params::Player_ProceduralLayering_AnimBP_C_ProceduralAdditivePose Parms{};

	Parms.InSourceLocomotionPose = std::move(InSourceLocomotionPose);
	Parms.InMotionMatchingPose = std::move(InMotionMatchingPose);
	Parms.InProceduralLayeredPose = std::move(InProceduralLayeredPose);

	UObject::ProcessEvent(Func, &Parms);

	if (ProceduralAdditivePose_0 != nullptr)
		*ProceduralAdditivePose_0 = std::move(Parms.ProceduralAdditivePose_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralLayeredPose
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InLocomotionPose                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InPassThroughPose                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       ProceduralLayeredPose_0                                (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::ProceduralLayeredPose(const struct FPoseLink& InLocomotionPose, const struct FPoseLink& InPassThroughPose, struct FPoseLink* ProceduralLayeredPose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "ProceduralLayeredPose");

	Params::Player_ProceduralLayering_AnimBP_C_ProceduralLayeredPose Parms{};

	Parms.InLocomotionPose = std::move(InLocomotionPose);
	Parms.InPassThroughPose = std::move(InPassThroughPose);

	UObject::ProcessEvent(Func, &Parms);

	if (ProceduralLayeredPose_0 != nullptr)
		*ProceduralLayeredPose_0 = std::move(Parms.ProceduralLayeredPose_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.ProceduralLayering
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 ProcLayer_InBaseLocomotionPose                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 ProcLayer_InLayeredLocomotionPose                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 ProcLayer_InBasePose                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       ProceduralLayering_0                                   (Parm, OutParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::ProceduralLayering(const struct FPoseLink& ProcLayer_InBaseLocomotionPose, const struct FPoseLink& ProcLayer_InLayeredLocomotionPose, const struct FPoseLink& ProcLayer_InBasePose, struct FPoseLink* ProceduralLayering_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "ProceduralLayering");

	Params::Player_ProceduralLayering_AnimBP_C_ProceduralLayering Parms{};

	Parms.ProcLayer_InBaseLocomotionPose = std::move(ProcLayer_InBaseLocomotionPose);
	Parms.ProcLayer_InLayeredLocomotionPose = std::move(ProcLayer_InLayeredLocomotionPose);
	Parms.ProcLayer_InBasePose = std::move(ProcLayer_InBasePose);

	UObject::ProcessEvent(Func, &Parms);

	if (ProceduralLayering_0 != nullptr)
		*ProceduralLayering_0 = std::move(Parms.ProceduralLayering_0);
}


// Function Player_ProceduralLayering_AnimBP.Player_ProceduralLayering_AnimBP_C.UpdateNoWeaponBasePose_PreNativize
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UPlayer_ProceduralLayering_AnimBP_C::UpdateNoWeaponBasePose_PreNativize(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Player_ProceduralLayering_AnimBP_C", "UpdateNoWeaponBasePose_PreNativize");

	Params::Player_ProceduralLayering_AnimBP_C_UpdateNoWeaponBasePose_PreNativize Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}

}

