#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ClamberingCodeRuntime

#include "Basic.hpp"

#include "ClamberingCodeRuntime_classes.hpp"
#include "ClamberingCodeRuntime_parameters.hpp"


namespace SDK
{

// Function ClamberingCodeRuntime.FortMovementMode_ClamberingRuntimeData.GetSyncPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UFortMovementMode_ClamberingRuntimeData::GetSyncPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ClamberingRuntimeData", "GetSyncPosition");

	Params::FortMovementMode_ClamberingRuntimeData_GetSyncPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.FortMovementMode_ExtClambering.BP_GetAnimationMontageInformation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FClamberMontageInput&      Context                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimMontage**                    AnimMontage                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            StartSectionName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName*                            MontageMiddleSectionName                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtClambering::BP_GetAnimationMontageInformation(const struct FClamberMontageInput& Context, class UAnimMontage** AnimMontage, class FName* StartSectionName, class FName* MontageMiddleSectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtClambering", "BP_GetAnimationMontageInformation");

	Params::FortMovementMode_ExtClambering_BP_GetAnimationMontageInformation Parms{};

	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);

	if (AnimMontage != nullptr)
		*AnimMontage = Parms.AnimMontage;

	if (StartSectionName != nullptr)
		*StartSectionName = Parms.StartSectionName;

	if (MontageMiddleSectionName != nullptr)
		*MontageMiddleSectionName = Parms.MontageMiddleSectionName;
}


// Function ClamberingCodeRuntime.InstancedLedgeActor.BP_OnAddInstance
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FTransform&                LedgeTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInstancedLedgeActor::BP_OnAddInstance(const struct FTransform& LedgeTransform, int32 InstanceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedLedgeActor", "BP_OnAddInstance");

	Params::InstancedLedgeActor_BP_OnAddInstance Parms{};

	Parms.LedgeTransform = std::move(LedgeTransform);
	Parms.InstanceIndex = InstanceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.InstancedLedgeActor.BP_OnRemoveInstance
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FTransform&                LedgeTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AInstancedLedgeActor::BP_OnRemoveInstance(const struct FTransform& LedgeTransform, int32 InstanceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InstancedLedgeActor", "BP_OnRemoveInstance");

	Params::InstancedLedgeActor_BP_OnRemoveInstance Parms{};

	Parms.LedgeTransform = std::move(LedgeTransform);
	Parms.InstanceIndex = InstanceIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.LedgeLaunchWorldSubsystem.OnWallDied
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     DamageTags                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                HitInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AFortPawn*                        InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayEffectContextHandle&EffectContext                                          (Parm, NativeAccessSpecifierPublic)

void ULedgeLaunchWorldSubsystem::OnWallDied(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LedgeLaunchWorldSubsystem", "OnWallDied");

	Params::LedgeLaunchWorldSubsystem_OnWallDied Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.Momentum = std::move(Momentum);
	Parms.HitInfo = std::move(HitInfo);
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.EffectContext = std::move(EffectContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_HandleClamberingStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EClamberingState                  OldClamberingState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EClamberingState                  NewClamberingState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_HandleClamberingStateChanged(const EClamberingState OldClamberingState, const EClamberingState NewClamberingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_HandleClamberingStateChanged");

	Params::ClamberingComponent_BP_HandleClamberingStateChanged Parms{};

	Parms.OldClamberingState = OldClamberingState;
	Parms.NewClamberingState = NewClamberingState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_HandleSynchedActionStarted
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSynchedActionInfo&        SynchedActionInfo                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_HandleSynchedActionStarted(const struct FSynchedActionInfo& SynchedActionInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_HandleSynchedActionStarted");

	Params::ClamberingComponent_BP_HandleSynchedActionStarted Parms{};

	Parms.SynchedActionInfo = std::move(SynchedActionInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_OnMMEStarted
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::BP_OnMMEStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_OnMMEStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.DrawDebugHUD
// (Final, Native, Protected)
// Parameters:
// class AHUD*                             HUD                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::DrawDebugHUD(class AHUD* HUD, class UCanvas* Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "DrawDebugHUD");

	Params::ClamberingComponent_DrawDebugHUD Parms{};

	Parms.HUD = HUD;
	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleClamberingTargetInActivationRange
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleClamberingTargetInActivationRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleClamberingTargetInActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleClamberingTargetOutOfActivationRange
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleClamberingTargetOutOfActivationRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleClamberingTargetOutOfActivationRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerASCInitialized
// (Final, Native, Protected)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerASCInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerASCInitialized");

	Params::ClamberingComponent_HandleOwnerASCInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerASCInvalidated
// (Final, Native, Protected)

void UClamberingComponent::HandleOwnerASCInvalidated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerASCInvalidated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerDBNO
// (Final, Native, Protected)

void UClamberingComponent::HandleOwnerDBNO()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerDBNO");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerDied
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        DeadPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerDied(class AFortPawn* DeadPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerDied");

	Params::ClamberingComponent_HandleOwnerDied Parms{};

	Parms.DeadPawn = DeadPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerJumpInput
// (Final, Native, Protected)
// Parameters:
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerJumpInput(bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerJumpInput");

	Params::ClamberingComponent_HandleOwnerJumpInput Parms{};

	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerMovementModeChanged
// (Final, Native, Protected)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PreviousMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerMovementModeChanged");

	Params::ClamberingComponent_HandleOwnerMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PreviousMovementMode = PreviousMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleOwnerTeleported
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortPawn*                        TeleportedOwner                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleOwnerTeleported(class AFortPawn* TeleportedOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleOwnerTeleported");

	Params::ClamberingComponent_HandleOwnerTeleported Parms{};

	Parms.TeleportedOwner = TeleportedOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetActorDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleTargetActorDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleTargetActorDestroyed");

	Params::ClamberingComponent_HandleTargetActorDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetActorHealthChanged
// (Final, Native, Protected)

void UClamberingComponent::HandleTargetActorHealthChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleTargetActorHealthChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetingDataInvalid
// (Event, Protected, BlueprintEvent)

void UClamberingComponent::HandleTargetingDataInvalid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleTargetingDataInvalid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.HandleTargetingDataValid
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FClamberingTargetingData&  TargetingData                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UClamberingComponent::HandleTargetingDataValid(const struct FClamberingTargetingData& TargetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "HandleTargetingDataValid");

	Params::ClamberingComponent_HandleTargetingDataValid Parms{};

	Parms.TargetingData = std::move(TargetingData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ClamberingCodeRuntime.ClamberingComponent.NetMulticast_ClamberingLedgeFailed
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// EClamberingFailedReason                 FailedReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EClamberingState                        FailedState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::NetMulticast_ClamberingLedgeFailed(EClamberingFailedReason FailedReason, EClamberingState FailedState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "NetMulticast_ClamberingLedgeFailed");

	Params::ClamberingComponent_NetMulticast_ClamberingLedgeFailed Parms{};

	Parms.FailedReason = FailedReason;
	Parms.FailedState = FailedState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnMutatorUpdated
// (Final, Native, Protected)

void UClamberingComponent::OnMutatorUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "OnMutatorUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnPlayerStatePawnSet
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "OnPlayerStatePawnSet");

	Params::ClamberingComponent_OnPlayerStatePawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.OnRep_ReplicatedTargetingData
// (Final, Native, Protected)

void UClamberingComponent::OnRep_ReplicatedTargetingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "OnRep_ReplicatedTargetingData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.RegisterMutatorUpdatedDelegate
// (Final, Native, Protected)
// Parameters:
// class APawn*                            AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::RegisterMutatorUpdatedDelegate(class APawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "RegisterMutatorUpdatedDelegate");

	Params::ClamberingComponent_RegisterMutatorUpdatedDelegate Parms{};

	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.ServerStartClambering
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// const struct FReplicatedClamberingTargetingData&InReplicatedTargetingData                              (ConstParm, Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const double                            ClientLastTeleportTime                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::ServerStartClambering(const struct FReplicatedClamberingTargetingData& InReplicatedTargetingData, const double ClientLastTeleportTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "ServerStartClambering");

	Params::ClamberingComponent_ServerStartClambering Parms{};

	Parms.InReplicatedTargetingData = std::move(InReplicatedTargetingData);
	Parms.ClientLastTeleportTime = ClientLastTeleportTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.SetTutorialModeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::SetTutorialModeEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "SetTutorialModeEnabled");

	Params::ClamberingComponent_SetTutorialModeEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.UnregisterMutatorUpdatedDelegate
// (Final, Native, Protected)

void UClamberingComponent::UnregisterMutatorUpdatedDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "UnregisterMutatorUpdatedDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_CanStartClambering
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// bool*                                   bCanStartClambering                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_CanStartClambering(bool* bCanStartClambering) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_CanStartClambering");

	Params::ClamberingComponent_BP_CanStartClambering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartClambering != nullptr)
		*bCanStartClambering = Parms.bCanStartClambering;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_CanStartTargeting
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// bool*                                   bCanStartTargeting                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_CanStartTargeting(bool* bCanStartTargeting) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_CanStartTargeting");

	Params::ClamberingComponent_BP_CanStartTargeting Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bCanStartTargeting != nullptr)
		*bCanStartTargeting = Parms.bCanStartTargeting;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_IsValidTargetActor
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsValidTargetActor                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UClamberingComponent::BP_IsValidTargetActor(const class AActor* TargetActor, bool* bIsValidTargetActor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_IsValidTargetActor");

	Params::ClamberingComponent_BP_IsValidTargetActor Parms{};

	Parms.TargetActor = TargetActor;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsValidTargetActor != nullptr)
		*bIsValidTargetActor = Parms.bIsValidTargetActor;
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_TutorialModeDisabled
// (Event, Protected, BlueprintEvent, Const)

void UClamberingComponent::BP_TutorialModeDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_TutorialModeDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.BP_TutorialModeEnabled
// (Event, Protected, BlueprintEvent, Const)

void UClamberingComponent::BP_TutorialModeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "BP_TutorialModeEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsAutoClamberingEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsAutoClamberingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "IsAutoClamberingEnabled");

	Params::ClamberingComponent_IsAutoClamberingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsClamberingEnabled
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsClamberingEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "IsClamberingEnabled");

	Params::ClamberingComponent_IsClamberingEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.IsTutorialModeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::IsTutorialModeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "IsTutorialModeEnabled");

	Params::ClamberingComponent_IsTutorialModeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingComponent.ShouldShowClamberIndicator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingComponent::ShouldShowClamberIndicator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ClamberingComponent", "ShouldShowClamberIndicator");

	Params::ClamberingComponent_ShouldShowClamberIndicator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.ClamberingLibrary.PerformClamberingTargeting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class ACharacter*                 Character                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FClamberingTargetingData*        OutTargetingData                                       (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UClamberingLibrary::PerformClamberingTargeting(const class ACharacter* Character, struct FClamberingTargetingData* OutTargetingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ClamberingLibrary", "PerformClamberingTargeting");

	Params::ClamberingLibrary_PerformClamberingTargeting Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetingData != nullptr)
		*OutTargetingData = std::move(Parms.OutTargetingData);

	return Parms.ReturnValue;
}


// Function ClamberingCodeRuntime.FortAthenaMutator_LedgeLaunch.OnRep_bShouldSpawnLedge
// (Final, Native, Private)

void AFortAthenaMutator_LedgeLaunch::OnRep_bShouldSpawnLedge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortAthenaMutator_LedgeLaunch", "OnRep_bShouldSpawnLedge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

