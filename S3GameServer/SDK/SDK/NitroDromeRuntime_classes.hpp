#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NitroDromeRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "NitroDromeRuntime_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteAI_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class NitroDromeRuntime.FortCheatManager_NitroDrome
// 0x0000 (0x0028 - 0x0028)
class UFortCheatManager_NitroDrome final : public UChildCheatManager
{
public:
	void AddNitroDromeReactionToQueue(class FName ReactionRowName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_NitroDrome">();
	}
	static class UFortCheatManager_NitroDrome* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_NitroDrome>();
	}
};

// Class NitroDromeRuntime.FortNitroDromeAnalyticsComponent
// 0x0080 (0x0120 - 0x00A0)
class UFortNitroDromeAnalyticsComponent final : public UPlayspaceComponent
{
public:
	TSet<TWeakObjectPtr<class AFortAthenaVehicle>> UniqueVehiclesEntered;                            // 0x00A0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	int32                                         NumVehiclesDestroyed;                              // 0x00F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MatchTimeCaptured;                                 // 0x00F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalCaptureDuration;                              // 0x00F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastTimeObjectiveWasActivated;                     // 0x00FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x20];                                     // 0x0100(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishNitroDromeSession();
	void FireEvent_SessionFinished();
	void OnVehicleBeginOverlap(class AFortAthenaVehicle* OverlappingVehicle);
	void OnVehicleEndOverlap(class AFortAthenaVehicle* OverlappingVehicle);
	void OnVehicleOutOfHealth(class AFortAthenaVehicle* DeadVehicle, const struct FGameplayTagContainer& InTags, class AController* EventInstigator, class AActor* DamageCauser);

	TArray<struct FFortAnalyticsEventAttribute> GetMidMatchObjectiveAnalyticsAttributeList() const;
	bool WasNitroDromeCaptured() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNitroDromeAnalyticsComponent">();
	}
	static class UFortNitroDromeAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNitroDromeAnalyticsComponent>();
	}
};

// Class NitroDromeRuntime.FortNitroDromeDirector
// 0x0128 (0x01C8 - 0x00A0)
class UFortNitroDromeDirector final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ConditionalReactionsTable;                         // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFilteredEventReceiverHandle>   RegisteredEventHandles;                            // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x20];                                      // 0x00D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortNitroDromeReactionData>    ReactionPriorityQueue;                             // 0x00F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TimeReactionStillRelevant;                         // 0x0100(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           CurrentReactionCooldown;                           // 0x0128(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FFortNitroDromeReactionData            CurrentReactionData;                               // 0x0130(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFortNitroDromeReactionData            CurrentReactionData_ClientCache;                   // 0x0140(0x0010)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x8];                                      // 0x0150(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ParamLerpUpdateTimerHandle;                        // 0x0158(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FFortMaterialParamLerpTimerData> ParamLerpTimerDataArray;                          // 0x0160(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaterialLerpingUpdateFrequency;                    // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         CheckEmptyInterval;                                // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           EmptyCheckingTimerHandle;                          // 0x01C0(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BroadcastNitroDromeReactableEvent(const struct FGameplayTagContainer& TagContainer);
	void OnBossAlertLevelChanged(class AFortAthenaAIBotController* BotController, EAlertLevel OldAlertLevel, EAlertLevel NewAlertLevel);
	void OnEventFinishedCooldown(class FName ReactionRow);
	void OnEventTriggered(const struct FGameplayTag& EventTag);
	void OnRep_CurrentReactionData();
	void PlaySoundOnLoudSpeakers(class USoundBase* Sound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNitroDromeDirector">();
	}
	static class UFortNitroDromeDirector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortNitroDromeDirector>();
	}
};

// Class NitroDromeRuntime.FortNitroDromeRewardManager
// 0x0118 (0x0A98 - 0x0980)
class AFortNitroDromeRewardManager final : public ABuildingGameplayActor
{
public:
	struct FScalableFloat                         TimeUntilReward;                                   // 0x0980(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A8[0x28];                                     // 0x09A8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDromeTimeAffectingData                CurrentAffectingData;                              // 0x09D0(0x0038)(Net, RepNotify, NativeAccessSpecifierPrivate)
	struct FNitroDromeRewardStatusData            CurrentRewardStatus;                               // 0x0A08(0x000C)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A14[0x4];                                      // 0x0A14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FName>        LootTiersPerPlaylistTag;                           // 0x0A18(0x0050)(Edit, Config, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         TimeToCalloutRewardApproaching;                    // 0x0A68(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A90[0x8];                                      // 0x0A90(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AffectTimer(const struct FOnDromeTimeAffectingActionHappened& AffectingData);
	void BP_OnRewardApproaching();
	void BP_OnRewardStatusChanged(const struct FNitroDromeRewardStatusData& OldRewardStatus, const struct FNitroDromeRewardStatusData& NewRewardStatus);
	void BP_OnTimerAffected(const struct FOnDromeTimeAffectingActionHappened& AffectingData);
	void BP_OnTimerCleared();
	void BP_OnTimerFinished();
	void BP_OnTimerStarted();
	void ClearTimer();
	void OnRep_CurrentAffectingData();
	void OnRep_CurrentRewardStatus(const struct FNitroDromeRewardStatusData& OldStatus);
	void PauseTimer();
	void ResumeTimer();
	void StartTimer(float StartTimeDelta);

	ENitroDromeRewardStatus GetCurrentRewardStatus() const;
	class FName GetLootTierForCurrentPlaylist() const;
	float GetProgressPercentage() const;
	const struct FTimerHandle GetRewardTimerHandle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortNitroDromeRewardManager">();
	}
	static class AFortNitroDromeRewardManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortNitroDromeRewardManager>();
	}
};

// Class NitroDromeRuntime.FortObjectiveProcessor_NitroDromeParticipationChanged
// 0x0000 (0x00A0 - 0x00A0)
class UFortObjectiveProcessor_NitroDromeParticipationChanged final : public UFortObjectiveProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortObjectiveProcessor_NitroDromeParticipationChanged">();
	}
	static class UFortObjectiveProcessor_NitroDromeParticipationChanged* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortObjectiveProcessor_NitroDromeParticipationChanged>();
	}
};

// Class NitroDromeRuntime.FortObjectiveProcessor_NitroDromeReactiveEventHappened
// 0x0000 (0x0098 - 0x0098)
class UFortObjectiveProcessor_NitroDromeReactiveEventHappened final : public UObjectiveProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortObjectiveProcessor_NitroDromeReactiveEventHappened">();
	}
	static class UFortObjectiveProcessor_NitroDromeReactiveEventHappened* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortObjectiveProcessor_NitroDromeReactiveEventHappened>();
	}
};

}

