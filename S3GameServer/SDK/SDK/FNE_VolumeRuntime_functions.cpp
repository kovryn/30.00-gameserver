#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FNE_VolumeRuntime

#include "Basic.hpp"

#include "FNE_VolumeRuntime_classes.hpp"
#include "FNE_VolumeRuntime_parameters.hpp"


namespace SDK
{

// Function FNE_VolumeRuntime.FNE_VolumeComponent.BindToOnOtherActorBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeComponent::BindToOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "BindToOnOtherActorBeginOverlap");

	Params::FNE_VolumeComponent_BindToOnOtherActorBeginOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.BindToOnOtherActorEndOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeComponent::BindToOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "BindToOnOtherActorEndOverlap");

	Params::FNE_VolumeComponent_BindToOnOtherActorEndOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetSpawnedVolumeBoundsComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOverlapComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOverlapComponent* UFNE_VolumeComponent::GetSpawnedVolumeBoundsComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetSpawnedVolumeBoundsComponent");

	Params::FNE_VolumeComponent_GetSpawnedVolumeBoundsComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyActorBeginOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::HandleNotifyActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "HandleNotifyActorBeginOverlap");

	Params::FNE_VolumeComponent_HandleNotifyActorBeginOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyActorEndOverlap
// (Final, Native, Private)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::HandleNotifyActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "HandleNotifyActorEndOverlap");

	Params::FNE_VolumeComponent_HandleNotifyActorEndOverlap Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyPlayerStateBeginOverlap
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     TouchingPlayerState                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameplayVolume*                  Volume                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::HandleNotifyPlayerStateBeginOverlap(class APlayerState* TouchingPlayerState, class AGameplayVolume* Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "HandleNotifyPlayerStateBeginOverlap");

	Params::FNE_VolumeComponent_HandleNotifyPlayerStateBeginOverlap Parms{};

	Parms.TouchingPlayerState = TouchingPlayerState;
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.HandleNotifyPlayerStateEndOverlap
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     TouchingPlayerState                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameplayVolume*                  Volume                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::HandleNotifyPlayerStateEndOverlap(class APlayerState* TouchingPlayerState, class AGameplayVolume* Volume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "HandleNotifyPlayerStateEndOverlap");

	Params::FNE_VolumeComponent_HandleNotifyPlayerStateEndOverlap Parms{};

	Parms.TouchingPlayerState = TouchingPlayerState;
	Parms.Volume = Volume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetEnableOverlap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::SetEnableOverlap(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "SetEnableOverlap");

	Params::FNE_VolumeComponent_SetEnableOverlap Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetRelativeScale3DForBoundsComponent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Scale3D                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::SetRelativeScale3DForBoundsComponent(const struct FVector& Scale3D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "SetRelativeScale3DForBoundsComponent");

	Params::FNE_VolumeComponent_SetRelativeScale3DForBoundsComponent Parms{};

	Parms.Scale3D = std::move(Scale3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.SetStaticMeshForBoundsComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeComponent::SetStaticMeshForBoundsComponent(class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "SetStaticMeshForBoundsComponent");

	Params::FNE_VolumeComponent_SetStaticMeshForBoundsComponent Parms{};

	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.UnBindFromOnOtherActorBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::UnBindFromOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "UnBindFromOnOtherActorBeginOverlap");

	Params::FNE_VolumeComponent_UnBindFromOnOtherActorBeginOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.UnBindFromOnOtherActorEndOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::UnBindFromOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "UnBindFromOnOtherActorEndOverlap");

	Params::FNE_VolumeComponent_UnBindFromOnOtherActorEndOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.UpdateOverLapShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFNEVolumeShapeTypeEnum                 EShape                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseCustomShape                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      CustomShape                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeComponent::UpdateOverLapShape(EFNEVolumeShapeTypeEnum EShape, const bool bUseCustomShape, class UStaticMesh* CustomShape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "UpdateOverLapShape");

	Params::FNE_VolumeComponent_UpdateOverLapShape Parms{};

	Parms.EShape = EShape;
	Parms.bUseCustomShape = bUseCustomShape;
	Parms.CustomShape = CustomShape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllPlayerPawns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APawn*>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APawn*> UFNE_VolumeComponent::GetAllPlayerPawns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetAllPlayerPawns");

	Params::FNE_VolumeComponent_GetAllPlayerPawns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllPlayerStates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> UFNE_VolumeComponent::GetAllPlayerStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetAllPlayerStates");

	Params::FNE_VolumeComponent_GetAllPlayerStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetAllTrackedActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UFNE_VolumeComponent::GetAllTrackedActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetAllTrackedActors");

	Params::FNE_VolumeComponent_GetAllTrackedActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetEnableOverlap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeComponent::GetEnableOverlap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetEnableOverlap");

	Params::FNE_VolumeComponent_GetEnableOverlap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeComponent.GetSpawnedVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AFNE_Volume*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFNE_Volume* UFNE_VolumeComponent::GetSpawnedVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeComponent", "GetSpawnedVolume");

	Params::FNE_VolumeComponent_GetSpawnedVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ActorEnteredVolume
// (Final, Native, Private)
// Parameters:
// class AActor*                           EnteringActor                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::ActorEnteredVolume(class AActor* EnteringActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "ActorEnteredVolume");

	Params::FNE_VolumeOverlapComponent_ActorEnteredVolume Parms{};

	Parms.EnteringActor = EnteringActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ActorExitVolume
// (Final, Native, Private)
// Parameters:
// class AActor*                           LeavingActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::ActorExitVolume(class AActor* LeavingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "ActorExitVolume");

	Params::FNE_VolumeOverlapComponent_ActorExitVolume Parms{};

	Parms.LeavingActor = LeavingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.BindToOnOtherActorBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeOverlapComponent::BindToOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "BindToOnOtherActorBeginOverlap");

	Params::FNE_VolumeOverlapComponent_BindToOnOtherActorBeginOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.BindToOnOtherActorEndOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeOverlapComponent::BindToOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "BindToOnOtherActorEndOverlap");

	Params::FNE_VolumeOverlapComponent_BindToOnOtherActorEndOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.CheckCollidingActorsSceneQuery
// (Final, Native, Public, BlueprintCallable)

void UFNE_VolumeOverlapComponent::CheckCollidingActorsSceneQuery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "CheckCollidingActorsSceneQuery");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.HandleTrackedActorEndPlay
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::HandleTrackedActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "HandleTrackedActorEndPlay");

	Params::FNE_VolumeOverlapComponent_HandleTrackedActorEndPlay Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnBeginActorOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::OnBeginActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "OnBeginActorOverlap");

	Params::FNE_VolumeOverlapComponent_OnBeginActorOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnEndActorOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::OnEndActorOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "OnEndActorOverlap");

	Params::FNE_VolumeOverlapComponent_OnEndActorOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnMinigameEnded
// (Final, Native, Protected)

void UFNE_VolumeOverlapComponent::OnMinigameEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "OnMinigameEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnMinigameRoundEnded
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMinigameEnd                        EndMethod                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFortMinigameState                      NextState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::OnMinigameRoundEnded(class AFortPlayerController* Instigator, EFortMinigameEnd EndMethod, EFortMinigameState NextState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "OnMinigameRoundEnded");

	Params::FNE_VolumeOverlapComponent_OnMinigameRoundEnded Parms{};

	Parms.Instigator = Instigator;
	Parms.EndMethod = EndMethod;
	Parms.NextState = NextState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.OnMinigameStarted
// (Final, Native, Protected)

void UFNE_VolumeOverlapComponent::OnMinigameStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "OnMinigameStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetEnableOverlapBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const EVolumeEnableOverlapBehavior      InOverlapBehavior                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::SetEnableOverlapBehavior(const EVolumeEnableOverlapBehavior InOverlapBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "SetEnableOverlapBehavior");

	Params::FNE_VolumeOverlapComponent_SetEnableOverlapBehavior Parms{};

	Parms.InOverlapBehavior = InOverlapBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetRelativeScale3DForBoundsComponent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Scale3D                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::SetRelativeScale3DForBoundsComponent(const struct FVector& Scale3D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "SetRelativeScale3DForBoundsComponent");

	Params::FNE_VolumeOverlapComponent_SetRelativeScale3DForBoundsComponent Parms{};

	Parms.Scale3D = std::move(Scale3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetStaticMeshForBoundsComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      NewMesh                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeOverlapComponent::SetStaticMeshForBoundsComponent(class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "SetStaticMeshForBoundsComponent");

	Params::FNE_VolumeOverlapComponent_SetStaticMeshForBoundsComponent Parms{};

	Parms.NewMesh = NewMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.SetVolumeMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>MaterialToLoad                                         (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ElementIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::SetVolumeMaterial(TSoftObjectPtr<class UMaterialInterface> MaterialToLoad, int32 ElementIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "SetVolumeMaterial");

	Params::FNE_VolumeOverlapComponent_SetVolumeMaterial Parms{};

	Parms.MaterialToLoad = MaterialToLoad;
	Parms.ElementIndex = ElementIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.ShouldAllowOverlapEventToFire
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OverlapActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFNE_VolumeOverlapComponent::ShouldAllowOverlapEventToFire(class AActor* OverlapActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "ShouldAllowOverlapEventToFire");

	Params::FNE_VolumeOverlapComponent_ShouldAllowOverlapEventToFire Parms{};

	Parms.OverlapActor = OverlapActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UnBindFromOnOtherActorBeginOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::UnBindFromOnOtherActorBeginOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "UnBindFromOnOtherActorBeginOverlap");

	Params::FNE_VolumeOverlapComponent_UnBindFromOnOtherActorBeginOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UnBindFromOnOtherActorEndOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class AActor* OtherActor)>&InEvent                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::UnBindFromOnOtherActorEndOverlap(const TDelegate<void(class AActor* OtherActor)>& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "UnBindFromOnOtherActorEndOverlap");

	Params::FNE_VolumeOverlapComponent_UnBindFromOnOtherActorEndOverlap Parms{};

	Parms.InEvent = InEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.UpdateOverLapShape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFNEVolumeShapeTypeEnum                 EShape                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bUseCustomShape                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      CustomShape                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFNE_VolumeOverlapComponent::UpdateOverLapShape(EFNEVolumeShapeTypeEnum EShape, const bool bUseCustomShape, class UStaticMesh* CustomShape)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "UpdateOverLapShape");

	Params::FNE_VolumeOverlapComponent_UpdateOverLapShape Parms{};

	Parms.EShape = EShape;
	Parms.bUseCustomShape = bUseCustomShape;
	Parms.CustomShape = CustomShape;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllPlayerPawns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APawn*>                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APawn*> UFNE_VolumeOverlapComponent::GetAllPlayerPawns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "GetAllPlayerPawns");

	Params::FNE_VolumeOverlapComponent_GetAllPlayerPawns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllPlayerStates
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class APlayerState*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class APlayerState*> UFNE_VolumeOverlapComponent::GetAllPlayerStates() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "GetAllPlayerStates");

	Params::FNE_VolumeOverlapComponent_GetAllPlayerStates Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetAllTrackedActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UFNE_VolumeOverlapComponent::GetAllTrackedActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "GetAllTrackedActors");

	Params::FNE_VolumeOverlapComponent_GetAllTrackedActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FNE_VolumeRuntime.FNE_VolumeOverlapComponent.GetEnableOverlap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVolumeEnableOverlapBehavior            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVolumeEnableOverlapBehavior UFNE_VolumeOverlapComponent::GetEnableOverlap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FNE_VolumeOverlapComponent", "GetEnableOverlap");

	Params::FNE_VolumeOverlapComponent_GetEnableOverlap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

