#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TacticalSprintRuntime

#include "Basic.hpp"

#include "TacticalSprintRuntime_classes.hpp"
#include "TacticalSprintRuntime_parameters.hpp"


namespace SDK
{

// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleFailedToSprint
// (Final, Native, Public)

void UFortMovementMode_ELTacSprint::HandleFailedToSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleFailedToSprint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleMovementModeChanged
// (Final, Native, Public)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PreviousMovementMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ELTacSprint::HandleMovementModeChanged(class ACharacter* Character, EMovementMode PreviousMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleMovementModeChanged");

	Params::FortMovementMode_ELTacSprint_HandleMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PreviousMovementMode = PreviousMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnEnergyDrained
// (Final, Native, Public)
// Parameters:
// class UFortComponent_Energy*            EnergyComp                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ELTacSprint::HandleOnEnergyDrained(class UFortComponent_Energy* EnergyComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnEnergyDrained");

	Params::FortMovementMode_ELTacSprint_HandleOnEnergyDrained Parms{};

	Parms.EnergyComp = EnergyComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnEnterAircraft
// (Final, Native, Public)

void UFortMovementMode_ELTacSprint::HandleOnEnterAircraft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnEnterAircraft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnEnteredEditMode
// (Final, Native, Public)

void UFortMovementMode_ELTacSprint::HandleOnEnteredEditMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnEnteredEditMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnPawnJump
// (Final, Native, Public)

void UFortMovementMode_ELTacSprint::HandleOnPawnJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnPawnJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnPlayerWeaponChanged
// (Final, Native, Public)
// Parameters:
// class AFortPawn*                        InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      InNewWeapon                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      InPlayerWeapon                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ELTacSprint::HandleOnPlayerWeaponChanged(class AFortPawn* InPawn, class AFortWeapon* InNewWeapon, class AFortWeapon* InPlayerWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnPlayerWeaponChanged");

	Params::FortMovementMode_ELTacSprint_HandleOnPlayerWeaponChanged Parms{};

	Parms.InPawn = InPawn;
	Parms.InNewWeapon = InNewWeapon;
	Parms.InPlayerWeapon = InPlayerWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortMovementMode_ELTacSprint.HandleOnReloadCanceling
// (Final, Native, Public)

void UFortMovementMode_ELTacSprint::HandleOnReloadCanceling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ELTacSprint", "HandleOnReloadCanceling");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.AddCustomSprintMMEClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class UFortMovementMode_ELTacSprint>&SprintMMEClassToAdd                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::AddCustomSprintMMEClass(const TSubclassOf<class UFortMovementMode_ELTacSprint>& SprintMMEClassToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "AddCustomSprintMMEClass");

	Params::FortPlayerControllerComponent_TacticalSprint_AddCustomSprintMMEClass Parms{};

	Parms.SprintMMEClassToAdd = SprintMMEClassToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.LogAndVisualLog
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          LoggingSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESprintLoggingVerbosityLevel            Verbosity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    LogString                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::LogAndVisualLog(class UObject* LoggingSource, ESprintLoggingVerbosityLevel Verbosity, const class FString& LogString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "LogAndVisualLog");

	Params::FortPlayerControllerComponent_TacticalSprint_LogAndVisualLog Parms{};

	Parms.LoggingSource = LoggingSource;
	Parms.Verbosity = Verbosity;
	Parms.LogString = std::move(LogString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnAutoRunChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bAutoRunIsOn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::OnAutoRunChanged(bool bAutoRunIsOn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnAutoRunChanged");

	Params::FortPlayerControllerComponent_TacticalSprint_OnAutoRunChanged Parms{};

	Parms.bAutoRunIsOn = bAutoRunIsOn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnMovementModeChanged
// (Final, Native, Private)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMovementMode                           PrevMovementMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   PreviousCustomMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnMovementModeChanged");

	Params::FortPlayerControllerComponent_TacticalSprint_OnMovementModeChanged Parms{};

	Parms.Character = Character;
	Parms.PrevMovementMode = PrevMovementMode;
	Parms.PreviousCustomMode = PreviousCustomMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnMutatorUpdated
// (Final, Native, Private)

void UFortPlayerControllerComponent_TacticalSprint::OnMutatorUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnMutatorUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnPawnChanged
// (Final, Native, Private)
// Parameters:
// class AFortPawn*                        InPawn                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::OnPawnChanged(class AFortPawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnPawnChanged");

	Params::FortPlayerControllerComponent_TacticalSprint_OnPawnChanged Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnPlayerStatePawnSet
// (Final, Native, Private)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnPlayerStatePawnSet");

	Params::FortPlayerControllerComponent_TacticalSprint_OnPlayerStatePawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.OnWeaponEquipped
// (Final, Native, Private)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      PreviousWeapon                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PreviousWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "OnWeaponEquipped");

	Params::FortPlayerControllerComponent_TacticalSprint_OnWeaponEquipped Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PreviousWeapon = PreviousWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.RegisterMutatorUpdatedDelegate
// (Final, Native, Private)

void UFortPlayerControllerComponent_TacticalSprint::RegisterMutatorUpdatedDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "RegisterMutatorUpdatedDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.RemoveCustomSprintMMEClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class UFortMovementMode_ELTacSprint>&SprintMMEClassToRemove                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::RemoveCustomSprintMMEClass(const TSubclassOf<class UFortMovementMode_ELTacSprint>& SprintMMEClassToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "RemoveCustomSprintMMEClass");

	Params::FortPlayerControllerComponent_TacticalSprint_RemoveCustomSprintMMEClass Parms{};

	Parms.SprintMMEClassToRemove = SprintMMEClassToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TacticalSprintRuntime.FortPlayerControllerComponent_TacticalSprint.SetIsSprinting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewIsSprinting                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPlayerControllerComponent_TacticalSprint::SetIsSprinting(bool bNewIsSprinting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPlayerControllerComponent_TacticalSprint", "SetIsSprinting");

	Params::FortPlayerControllerComponent_TacticalSprint_SetIsSprinting Parms{};

	Parms.bNewIsSprinting = bNewIsSprinting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

