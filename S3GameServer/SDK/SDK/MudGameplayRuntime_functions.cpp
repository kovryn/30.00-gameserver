#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MudGameplayRuntime

#include "Basic.hpp"

#include "MudGameplayRuntime_classes.hpp"
#include "MudGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function MudGameplayRuntime.FortPawnComponent_Mud.HandleASCInitialized
// (Final, Native, Private)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::HandleASCInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "HandleASCInitialized");

	Params::FortPawnComponent_Mud_HandleASCInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.HandleSurfaceTypeChanged
// (Final, Native, Private)
// Parameters:
// class AActor*                           SurfaceActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        CurrentSurfaceType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        PrevSurfaceType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::HandleSurfaceTypeChanged(class AActor* SurfaceActor, EPhysicalSurface CurrentSurfaceType, EPhysicalSurface PrevSurfaceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "HandleSurfaceTypeChanged");

	Params::FortPawnComponent_Mud_HandleSurfaceTypeChanged Parms{};

	Parms.SurfaceActor = SurfaceActor;
	Parms.CurrentSurfaceType = CurrentSurfaceType;
	Parms.PrevSurfaceType = PrevSurfaceType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnAttachedParentCoveredInMud
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGameplayEventData&        Payload                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::OnAttachedParentCoveredInMud(const struct FGameplayEventData& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnAttachedParentCoveredInMud");

	Params::FortPawnComponent_Mud_OnAttachedParentCoveredInMud Parms{};

	Parms.Payload = std::move(Payload);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnCreatureSprintingTagCountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::OnCreatureSprintingTagCountChanged(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnCreatureSprintingTagCountChanged");

	Params::FortPawnComponent_Mud_OnCreatureSprintingTagCountChanged Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnCurieFireTagCountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::OnCurieFireTagCountChanged(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnCurieFireTagCountChanged");

	Params::FortPawnComponent_Mud_OnCurieFireTagCountChanged Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnEnteredMud
// (Event, Protected, BlueprintEvent)

void UFortPawnComponent_Mud::OnEnteredMud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnEnteredMud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnExitedMud
// (Event, Protected, BlueprintEvent)

void UFortPawnComponent_Mud::OnExitedMud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnExitedMud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnSlidingTagCountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::OnSlidingTagCountChanged(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnSlidingTagCountChanged");

	Params::FortPawnComponent_Mud_OnSlidingTagCountChanged Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MudGameplayRuntime.FortPawnComponent_Mud.OnSprintingTagCountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_Mud::OnSprintingTagCountChanged(const struct FGameplayTag& tag, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_Mud", "OnSprintingTagCountChanged");

	Params::FortPawnComponent_Mud_OnSprintingTagCountChanged Parms{};

	Parms.tag = std::move(tag);
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}

}

