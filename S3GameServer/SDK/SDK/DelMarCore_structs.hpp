#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarCore

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// Enum DelMarCore.EDelmarDraftingState
// NumValues: 0x0006
enum class EDelmarDraftingState : uint8
{
	NotActive                                = 0,
	HasTarget                                = 1,
	GainingSpeed                             = 2,
	GracePeriod                              = 3,
	LosingSpeed                              = 4,
	EDelmarDraftingState_MAX                 = 5,
};

// Enum DelMarCore.EDelMarVehicleDriftState
// NumValues: 0x0008
enum class EDelMarVehicleDriftState : uint8
{
	NotDrifting                              = 0,
	Drifting                                 = 1,
	InitialKick                              = 2,
	SwapKick                                 = 3,
	ExitVelocity                             = 4,
	ExitForward                              = 5,
	ForcedDrift                              = 6,
	EDelMarVehicleDriftState_MAX             = 7,
};

// Enum DelMarCore.EDelMarTurboZoneState
// NumValues: 0x0007
enum class EDelMarTurboZoneState : uint8
{
	None                                     = 0,
	Visible                                  = 1,
	Failed                                   = 2,
	Active                                   = 3,
	Success                                  = 4,
	Missed                                   = 5,
	EDelMarTurboZoneState_MAX                = 6,
};

// Enum DelMarCore.EDelMarVehicleForwardState
// NumValues: 0x0005
enum class EDelMarVehicleForwardState : uint8
{
	None                                     = 0,
	ForwardAccel                             = 1,
	Braking                                  = 2,
	Reversing                                = 3,
	EDelMarVehicleForwardState_MAX           = 4,
};

// Enum DelMarCore.EDelMarSplineMovementType
// NumValues: 0x0004
enum class EDelMarSplineMovementType : uint8
{
	OneShot                                  = 0,
	Repeat                                   = 1,
	PingPong                                 = 2,
	EDelMarSplineMovementType_MAX            = 3,
};

// Enum DelMarCore.EDelMarFloatOperation
// NumValues: 0x0008
enum class EDelMarFloatOperation : uint8
{
	DMFO_Set                                 = 0,
	DMFO_Add                                 = 1,
	DMFO_Subtract                            = 2,
	DMFO_Multiply                            = 3,
	DMFO_BaseMultiply                        = 4,
	DMFO_Divide                              = 5,
	DMFO_Min                                 = 6,
	DMFO_Max                                 = 7,
};

// Enum DelMarCore.EDelMarModifierStackingPolicy
// NumValues: 0x0004
enum class EDelMarModifierStackingPolicy : uint8
{
	DMSP_Allow                               = 0,
	DMSP_DontAdd                             = 1,
	DMSP_ClearOthers                         = 2,
	DMSP_MAX                                 = 3,
};

// Enum DelMarCore.EDelMarGlobalLeaderboardType
// NumValues: 0x0004
enum class EDelMarGlobalLeaderboardType : uint8
{
	Top                                      = 0,
	Focused                                  = 1,
	Friend                                   = 2,
	EDelMarGlobalLeaderboardType_MAX         = 3,
};

// Enum DelMarCore.EDelMarNetModel
// NumValues: 0x0003
enum class EDelMarNetModel : uint8
{
	ClientAuthoritative                      = 0,
	ChaosRollback                            = 1,
	EDelMarNetModel_MAX                      = 2,
};

// Enum DelMarCore.EDelMarJellyHazardProcessorInfo
// NumValues: 0x0004
enum class EDelMarJellyHazardProcessorInfo : uint32
{
	None                                     = 0,
	WithoutJellyHazardHit                    = 1,
	WithJellyHazardHit                       = 2,
	EDelMarJellyHazardProcessorInfo_MAX      = 3,
};

// Enum DelMarCore.EDelMarDemolishedProcessorInfo
// NumValues: 0x0004
enum class EDelMarDemolishedProcessorInfo : uint32
{
	None                                     = 0,
	WithoutDemolish                          = 1,
	WithDemolish                             = 2,
	EDelMarDemolishedProcessorInfo_MAX       = 3,
};

// Enum DelMarCore.EDelMarPositionChangeInfo
// NumValues: 0x0004
enum class EDelMarPositionChangeInfo : uint8
{
	None                                     = 0,
	PassPlayer                               = 1,
	PassedByPlayer                           = 2,
	EDelMarPositionChangeInfo_MAX            = 3,
};

// Enum DelMarCore.EDelMarPlaylistTypeInfo
// NumValues: 0x0004
enum class EDelMarPlaylistTypeInfo : uint8
{
	Any                                      = 0,
	Casual                                   = 1,
	Ranked                                   = 2,
	EDelMarPlaylistTypeInfo_MAX              = 3,
};

// Enum DelMarCore.EDelMarPhysicsRate
// NumValues: 0x0004
enum class EDelMarPhysicsRate : uint8
{
	ThirtyHz                                 = 0,
	SixtyHz                                  = 1,
	OneHundredTwentyHz                       = 2,
	EDelMarPhysicsRate_MAX                   = 3,
};

// Enum DelMarCore.EDelMarSplineGenerationMode
// NumValues: 0x0003
enum class EDelMarSplineGenerationMode : uint8
{
	PerSplinePoint                           = 0,
	UserAmount                               = 1,
	EDelMarSplineGenerationMode_MAX          = 2,
};

// Enum DelMarCore.EDelMarRaceMode
// NumValues: 0x0006
enum class EDelMarRaceMode : uint8
{
	ChallengeMode                            = 0,
	CompetitiveMode                          = 1,
	DeathRaceMode                            = 2,
	TutorialRaceMode                         = 3,
	Invalid                                  = 4,
	EDelMarRaceMode_MAX                      = 5,
};

// Enum DelMarCore.EDelMarInvertSteerMethod
// NumValues: 0x0006
enum class EDelMarInvertSteerMethod : uint8
{
	CeilingAngle                             = 0,
	CeilingTimeDelay                         = 1,
	CeilingReleaseInput                      = 2,
	Never                                    = 3,
	Always                                   = 4,
	EDelMarInvertSteerMethod_MAX             = 5,
};

// Enum DelMarCore.EDelMarKickflipDirection
// NumValues: 0x000A
enum class EDelMarKickflipDirection : uint8
{
	None                                     = 0,
	Up                                       = 1,
	Down                                     = 2,
	Left                                     = 3,
	Right                                    = 4,
	UpLeft                                   = 5,
	DownLeft                                 = 6,
	UpRight                                  = 7,
	DownRight                                = 8,
	EDelMarKickflipDirection_MAX             = 9,
};

// Enum DelMarCore.EDelMarVehicleWheelIndex
// NumValues: 0x0006
enum class EDelMarVehicleWheelIndex : uint8
{
	FrontLeft                                = 0,
	FrontRight                               = 1,
	BackLeft                                 = 2,
	BackRight                                = 3,
	Num                                      = 4,
	EDelMarVehicleWheelIndex_MAX             = 5,
};

// Enum DelMarCore.EMixModifierTarget
// NumValues: 0x0004
enum class EMixModifierTarget : uint8
{
	Volume                                   = 0,
	Pitch                                    = 1,
	LowpassFrequency                         = 2,
	EMixModifierTarget_MAX                   = 3,
};

// Enum DelMarCore.EDelMarCheckpointMeshType
// NumValues: 0x0004
enum class EDelMarCheckpointMeshType : uint8
{
	Default                                  = 0,
	StartLine                                = 1,
	FinishLine                               = 2,
	EDelMarCheckpointMeshType_MAX            = 3,
};

// Enum DelMarCore.EDelMarTimerDirection
// NumValues: 0x0003
enum class EDelMarTimerDirection : uint8
{
	CountUp                                  = 0,
	CountDown                                = 1,
	EDelMarTimerDirection_MAX                = 2,
};

// Enum DelMarCore.EDelMarPostRaceVote
// NumValues: 0x0004
enum class EDelMarPostRaceVote : uint8
{
	Unset                                    = 0,
	PlayAgain                                = 1,
	NextMap                                  = 2,
	MAX                                      = 3,
};

// Enum DelMarCore.EDelMarVehicleCollisionOverrideSetting
// NumValues: 0x0004
enum class EDelMarVehicleCollisionOverrideSetting : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	Unset                                    = 2,
	Max                                      = 3,
};

// Enum DelMarCore.EDelMarRaceSpawnMode
// NumValues: 0x0005
enum class EDelMarRaceSpawnMode : uint8
{
	SpawnAtMostRecentSplinePoint             = 0,
	SpawnAtMostRecentCheckpoint              = 1,
	SpawnAtRaceStart                         = 2,
	NoAutomaticRespawn                       = 3,
	EDelMarRaceSpawnMode_MAX                 = 4,
};

// Enum DelMarCore.EDelMarPostMatchFlows
// NumValues: 0x0003
enum class EDelMarPostMatchFlows : uint8
{
	PlayTogetherFlow                         = 0,
	PlayTrackFlow                            = 1,
	EDelMarPostMatchFlows_MAX                = 2,
};

// Enum DelMarCore.EDelMarPostMatchState
// NumValues: 0x000C
enum class EDelMarPostMatchState : uint8
{
	WaitingForParty                          = 0,
	WaitingForLobby                          = 1,
	StartingNextRace                         = 2,
	MatchmakingStarted                       = 3,
	MatchmakingSucceeded                     = 4,
	MatchmakingFailed                        = 5,
	MatchmakingCancelled                     = 6,
	Idle                                     = 7,
	Failed                                   = 8,
	Completed                                = 9,
	INVALID                                  = 10,
	EDelMarPostMatchState_MAX                = 11,
};

// ScriptStruct DelMarCore.DelMarLapRecord
// 0x0018 (0x0018 - 0x0000)
struct FDelMarLapRecord final
{
public:
	double                                        LapDuration;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<double>                                SectionTimes;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarRunRecord
// 0x0020 (0x0020 - 0x0000)
struct FDelMarRunRecord final
{
public:
	double                                        RunDuration;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RunStartTimestamp;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDelMarLapRecord>               LapRecords;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_SectionRecorded
// 0x0050 (0x0050 - 0x0000)
struct FDelMarEvent_SectionRecorded final
{
public:
	int32                                         ActiveLap;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarRunRecord                       BestSectionsRunRecord;                             // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FDelMarRunRecord                       CurrentRunRecord;                                  // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsNewSectionRecord;                               // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarAIDifficultySpawnInfo
// 0x0008 (0x0008 - 0x0000)
struct FDelMarAIDifficultySpawnInfo final
{
public:
	int32                                         SkillLevel;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BotFillPercentage;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarAIMMRSpawnDataTableRow
// 0x0020 (0x0028 - 0x0008)
struct FDelMarAIMMRSpawnDataTableRow final : public FTableRowBase
{
public:
	int32                                         MMRBracketLow;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMRBracketHigh;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FallbackSkillLevel;                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarAIDifficultySpawnInfo>   BotSpawnInfo;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_PostRaceReturnToLobbySelected
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_PostRaceReturnToLobbySelected final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarInputMappingContextData
// 0x0010 (0x0010 - 0x0000)
struct FDelMarInputMappingContextData final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInputMappingContext*               MappingContext;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarAIVehicleCosmeticSlotDataTableInfo
// 0x0040 (0x0040 - 0x0000)
struct FDelMarAIVehicleCosmeticSlotDataTableInfo final
{
public:
	TSoftObjectPtr<class UCosmeticLoadoutSlotTemplate> SlotTemplate;                                 // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              VehicleSlotCosmeticDataTable;                      // 0x0020(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVerbMessageBase
// 0x00C0 (0x0138 - 0x0078)
struct FDelMarVerbMessageBase : public FVerbMessage
{
public:
	struct FSubjectTagsPair                       LevelDescriptionId;                                // 0x0078(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSubjectTagsPair                       GameModeId;                                        // 0x00B0(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSubjectTagsPair                       VehicleTags;                                       // 0x00E8(0x0038)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	EDelMarPlaylistTypeInfo                       RankedPlaylistInfo;                                // 0x0120(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFortVerb_ObjectWrapper>        Cosmetics;                                         // 0x0128(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
};

// ScriptStruct DelMarCore.DelMarVerbMessage_DriftBoostActivated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_DriftBoostActivated final : public FDelMarVerbMessageBase
{
public:
	float                                         DriftBoostPercent;                                 // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarCosmeticLoadoutSlotData
// 0x0040 (0x0040 - 0x0000)
struct FDelMarCosmeticLoadoutSlotData final
{
public:
	TSoftObjectPtr<class UCosmeticLoadoutSlotTemplate> SlotTemplate;                                 // 0x0000(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 EquippedItemDefinitionObject;                      // 0x0020(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarGlobalLeaderboardEntry
// 0x0040 (0x0040 - 0x0000)
struct FDelMarGlobalLeaderboardEntry final
{
public:
	class FString                                 PlayerAccountId;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RunDuration;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Rank;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Percentile;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocalPlayer;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_GlobalLeaderboardNewPersonalBest
// 0x0048 (0x0048 - 0x0000)
struct FDelMarEvent_GlobalLeaderboardNewPersonalBest final
{
public:
	TWeakObjectPtr<class AFortPlayerState>        Player;                                            // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarGlobalLeaderboardEntry          PersonalBest;                                      // 0x0008(0x0040)(Transient, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarAIVehicleCosmeticLoadoutSetDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FDelMarAIVehicleCosmeticLoadoutSetDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FDelMarCosmeticLoadoutSlotData> LoadoutSlots;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleOutPersistent
// 0x0A28 (0x0A50 - 0x0028)
struct alignas(0x10) FDelMarVehicleOutPersistent final : public FFortVehicleOutPersistent
{
public:
	uint8                                         Pad_28[0xA28];                                     // 0x0028(0x0A28)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarAIVehicleCosmeticSlotDataTableRow
// 0x0028 (0x0030 - 0x0008)
struct FDelMarAIVehicleCosmeticSlotDataTableRow final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UObject>                 EquippedItemDefinitionObject;                      // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.AvoidanceInfo
// 0x0080 (0x0080 - 0x0000)
struct FAvoidanceInfo final
{
public:
	TMap<TWeakObjectPtr<class AActor>, class UDriveHazardInfo*> DriveHazardInfoMap;                  // 0x0000(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDriveHazardInfo*>               NonJumpableDriveHazardInfos;                       // 0x0050(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UDriveHazardInfo*>               JumpableDriveHazardInfos;                          // 0x0060(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_InitialTurboActivated
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_InitialTurboActivated final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarCosmeticSlotInfo
// 0x0050 (0x0050 - 0x0000)
struct FDelMarCosmeticSlotInfo final
{
public:
	struct FGameplayTag                           SlotTag;                                           // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SlotName;                                          // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ShortDescription;                                  // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
	bool                                          bCanBeEmpty;                                       // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              UnassignedPreviewImage;                            // 0x0030(0x0020)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_PostRaceNextRaceSelected
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_PostRaceNextRaceSelected final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_DriverInteractionAdded
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDelMarEvent_DriverInteractionAdded final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarActivatedInput
// 0x0020 (0x0020 - 0x0000)
struct FDelMarActivatedInput final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Rubberbanding
// 0x0004 (0x0004 - 0x0000)
struct FDelMarVehicleReplicatedState_Rubberbanding final
{
public:
	float                                         AppliedBonusSpeed;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEventRouterExt
// 0x0018 (0x0018 - 0x0000)
struct FDelMarEventRouterExt final
{
public:
	bool                                          bWorldIsTearingDown;                               // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayEventRouterComponent*          EventRouter;                                       // 0x0008(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EventRouterContextObject;                          // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarGameplayStateChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct FDelMarGameplayStateChangedEvent final
{
public:
	struct FGameplayTag                           PrevStateId;                                       // 0x0000(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewStateId;                                        // 0x0004(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_MissedCheckpointDemoCountdown
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDelMarEvent_MissedCheckpointDemoCountdown final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarRaceCVar
// 0x0030 (0x0030 - 0x0000)
struct FDelMarRaceCVar final
{
public:
	class FString                                 VariableName;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_ResetRace
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_ResetRace final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarLeaderboardSettings
// 0x0020 (0x0020 - 0x0000)
struct FDelMarLeaderboardSettings final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WindowId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_ResetRun
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_ResetRun final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_DistanceTraveled
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_DistanceTraveled final : public FDelMarVerbMessageBase
{
public:
	float                                         TotalDistance;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_RaceFinished
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDelMarEvent_RaceFinished final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_FirstPlayerFinishedCountdown
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDelMarEvent_FirstPlayerFinishedCountdown final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_LoadingScreenData
// 0x0010 (0x0010 - 0x0000)
struct FDelMarEvent_LoadingScreenData final
{
public:
	class UDelMarLevelDataAsset*                  LevelData;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RaceMode;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleAbilityConfig
// 0x0011 (0x0011 - 0x0000)
struct FDelMarVehicleAbilityConfig final
{
public:
	bool                                          bAirControlEnabled;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirFreestyleEnabled;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAirThrottleEnabled;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAerialRotationEnabled;                        // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoUprightEnabled;                               // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDraftingEnabled;                                  // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftEnabled;                                     // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriftBoostEnabled;                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteUnderthrustEnabled;                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpEnabled;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflipEnabled;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOversteerEnabled;                                 // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReattachmentEnabled;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartlineBoostEnabled;                            // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStrafeEnabled;                                    // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTurboEnabled;                                     // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnderthrustEnabled;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_RaceActive
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDelMarEvent_RaceActive final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarActivatedInputFrame
// 0x0018 (0x0018 - 0x0000)
struct FDelMarActivatedInputFrame final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarActivatedInput>          Inputs;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_RunActive
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDelMarEvent_RunActive final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleInContinuous
// 0x0000 (0x0040 - 0x0040)
struct FDelMarVehicleInContinuous final : public FFortAthenaVehicleInputState
{
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Ability
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleReplicatedState_Ability
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         duration;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_AutoUpright
// 0x0018 (0x0020 - 0x0008)
struct FDelMarVehicleReplicatedState_AutoUpright final : public FDelMarVehicleReplicatedState_Ability
{
public:
	struct FVector_NetQuantizeNormal              TargetVehicleUp;                                   // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_BonusSpeedAbility
// 0x0004 (0x000C - 0x0008)
struct FDelMarVehicleReplicatedState_BonusSpeedAbility : public FDelMarVehicleReplicatedState_Ability
{
public:
	float                                         AppliedBonusSpeed;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Drafting
// 0x000C (0x0018 - 0x000C)
struct FDelMarVehicleReplicatedState_Drafting final : public FDelMarVehicleReplicatedState_BonusSpeedAbility
{
public:
	float                                         AccumulatedLosingSpeedSeconds;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedStartDraftingSeconds;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalEarnedBonusSpeed;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Drift
// 0x0028 (0x0030 - 0x0008)
struct FDelMarVehicleReplicatedState_Drift final : public FDelMarVehicleReplicatedState_Ability
{
public:
	float                                         CurrentRotationAngle;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleDriftState                      DriftState;                                        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetDriftSide;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 InitialImpulseTorque;                              // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_DriftBoost
// 0x0014 (0x0020 - 0x000C)
struct FDelMarVehicleReplicatedState_DriftBoost final : public FDelMarVehicleReplicatedState_BonusSpeedAbility
{
public:
	float                                         AccumulatedDriftBoostSeconds;                      // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedWaitingPeriodSeconds;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalEarnedBonusSpeed;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QueuedBonusSpeed;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QueuedBoostExtraSeconds;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Drive
// 0x0030 (0x0030 - 0x0000)
struct FDelMarVehicleReplicatedState_Drive final
{
public:
	float                                         BaseTargetSpeed;                                   // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertedSteeringActive;                           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bDisableDriveForces;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bDisableWheelFriction;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              LastAverageWheelWorldContactNormal;                // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumLandingSpeed;                               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Kickflip
// 0x0058 (0x0060 - 0x0008)
struct FDelMarVehicleReplicatedState_Kickflip final : public FDelMarVehicleReplicatedState_Ability
{
public:
	struct FVector_NetQuantizeNormal              RelativeUpDirection;                               // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              KickDirection;                                     // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftSide;                                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeLongestRoll;                                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotateTowardsVelocity;                            // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStartLongRoll;                                 // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingRollSign;                                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickflipKeybindPressTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivationCharges;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              StartingPrimaryDirection;                          // 0x0048(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Oversteer
// 0x0004 (0x0004 - 0x0000)
struct FDelMarVehicleReplicatedState_Oversteer final
{
public:
	float                                         AccumulatedSteer;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Reattachment
// 0x0020 (0x0028 - 0x0008)
struct FDelMarVehicleReplicatedState_Reattachment final : public FDelMarVehicleReplicatedState_Ability
{
public:
	struct FVector_NetQuantizeNormal              AttachmentDirection;                               // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanActivate;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_StartlineBoost
// 0x0008 (0x0014 - 0x000C)
struct FDelMarVehicleReplicatedState_StartlineBoost final : public FDelMarVehicleReplicatedState_BonusSpeedAbility
{
public:
	float                                         PercentageMaxBonusSpeedEarned;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFailedAttempt;                                    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Strafe
// 0x0008 (0x0010 - 0x0008)
struct FDelMarVehicleReplicatedState_Strafe final : public FDelMarVehicleReplicatedState_Ability
{
public:
	bool                                          bLeftSide;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrafeKeybindPressTime;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Turbo
// 0x000C (0x0018 - 0x000C)
struct FDelMarVehicleReplicatedState_Turbo final : public FDelMarVehicleReplicatedState_BonusSpeedAbility
{
public:
	int32                                         LastBonusZoneInteractionIndex;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccessfulBonusZone;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalActiveSeconds;                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_Underthrust
// 0x0004 (0x000C - 0x0008)
struct FDelMarVehicleReplicatedState_Underthrust final : public FDelMarVehicleReplicatedState_Ability
{
public:
	float                                         RemainingThrustSeconds;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState_AirControl
// 0x0004 (0x000C - 0x0008)
struct FDelMarVehicleReplicatedState_AirControl final : public FDelMarVehicleReplicatedState_Ability
{
public:
	float                                         AerialDivingBonusSpeed;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarInputBufferData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FDelMarInputBufferData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplicatedState
// 0x0290 (0x0290 - 0x0000)
struct FDelMarVehicleReplicatedState final
{
public:
	int32                                         FrameNum;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleInContinuous             Input;                                             // 0x0008(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigidBodyState                        RBState;                                           // 0x0050(0x0080)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_AutoUpright AutoUpright;                                    // 0x00D0(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Drafting Drafting;                                          // 0x00F0(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Drift    Drift;                                             // 0x0108(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_DriftBoost DriftBoost;                                      // 0x0138(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Drive    Drive;                                             // 0x0158(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Ability  Jump;                                              // 0x0188(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Kickflip Kickflip;                                          // 0x0190(0x0060)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Oversteer Oversteer;                                        // 0x01F0(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleReplicatedState_Reattachment Reattachment;                                  // 0x01F8(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Rubberbanding Rubberbanding;                                // 0x0220(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_StartlineBoost StartlineBoost;                              // 0x0224(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Strafe   Strafe;                                            // 0x0238(0x0010)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Turbo    Turbo;                                             // 0x0248(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_Underthrust Underthrust;                                    // 0x0260(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplicatedState_AirControl AirControl;                                      // 0x026C(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarInputBufferData                 BufferData;                                        // 0x0278(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_OvertimeActive
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDelMarEvent_OvertimeActive final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_CountdownActive
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FDelMarEvent_CountdownActive final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_MidTutorialModal
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_MidTutorialModal final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleSuspensionConfig
// 0x0014 (0x0014 - 0x0000)
struct FDelMarVehicleSuspensionConfig final
{
public:
	float                                         MaxRaise;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrop;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingCompression;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRelaxation;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_PlayerFinishedRace
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDelMarEvent_PlayerFinishedRace final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_RacerStateChanged
// 0x0010 (0x0010 - 0x0000)
struct FDelMarEvent_RacerStateChanged final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           PrevStateId;                                       // 0x0008(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewStateId;                                        // 0x000C(0x0004)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVerbMessage_LapComplete
// 0x0010 (0x0148 - 0x0138)
struct FDelMarVerbMessage_LapComplete final : public FDelMarVerbMessageBase
{
public:
	double                                        LapCompleteTime;                                   // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LapCount;                                          // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         LapPlacement;                                      // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_PlayerBecomeSpectator
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDelMarEvent_PlayerBecomeSpectator final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_DialogRequest
// 0x0004 (0x0004 - 0x0000)
struct FDelMarEvent_DialogRequest final
{
public:
	struct FGameplayTag                           DialogTag;                                         // 0x0000(0x0004)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_RaceManagerInitialized
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDelMarEvent_RaceManagerInitialized final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_TeleportEnteredEvent
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_TeleportEnteredEvent final
{
public:
	class ADelMarCheckpoint*                      CheckpointEntered;                                 // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarDefaultCameraValues
// 0x0010 (0x0010 - 0x0000)
struct FDelMarDefaultCameraValues final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleToOriginDegrees;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_VehicleAssignedToPawn
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDelMarEvent_VehicleAssignedToPawn final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_ServerRaceStartCountdownTime
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_ServerRaceStartCountdownTime final
{
public:
	double                                        ServerTime;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVerbMessage_BeatPlayers
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_BeatPlayers final : public FDelMarVerbMessageBase
{
public:
	uint8                                         AmountOfPlayersBeat;                               // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_ServerPostRaceEndTime
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_ServerPostRaceEndTime final
{
public:
	double                                        ServerTime;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_VehicleDemolished
// 0x000C (0x000C - 0x0000)
struct FDelMarEvent_VehicleDemolished final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CausedByTag;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_VehicleWrongwayStatus
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_VehicleWrongwayStatus final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_ReturnToTrackDemoCountdown
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FDelMarEvent_ReturnToTrackDemoCountdown final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_TrackedPlayerReadyStates
// 0x0020 (0x0020 - 0x0000)
struct FDelMarEvent_TrackedPlayerReadyStates final
{
public:
	TArray<TWeakObjectPtr<class AFortPlayerState>> ReadyPlayers;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AFortPlayerState>> UnreadyPlayers;                                   // 0x0010(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_LoadedPlayerStates
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_LoadedPlayerStates final
{
public:
	int32                                         NumLoadedPlayers;                                  // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPlayers;                                      // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_SetTutorialHint
// 0x0048 (0x0048 - 0x0000)
struct FDelMarEvent_SetTutorialHint final
{
public:
	class FText                                   KBMText;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TouchText;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   AssociatedInputActions;                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_SetTutorialAnnouncement
// 0x0040 (0x0040 - 0x0000)
struct FDelMarEvent_SetTutorialAnnouncement final
{
public:
	class FText                                   KBMText;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TouchText;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   AssociatedInputActions;                            // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_SetControlsText
// 0x0020 (0x0020 - 0x0000)
struct FDelMarEvent_SetControlsText final
{
public:
	class FText                                   KBMText;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_CheckpointPassed_ParallelPath
// 0x0010 (0x0010 - 0x0000)
struct FDelMarEvent_CheckpointPassed_ParallelPath final
{
public:
	class ADelMarCheckpoint*                      CurrentCheckPoint;                                 // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckpointIndexForLap;                             // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_CheckpointPassedOutOfOrder_ParallelPath
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_CheckpointPassedOutOfOrder_ParallelPath final
{
public:
	class ADelMarCheckpoint*                      CurrentCheckPoint;                                 // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_TeleportExitedEvent
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_TeleportExitedEvent final
{
public:
	class ADelMarCheckpoint*                      CheckpointExited;                                  // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_SectionComplete_ParallelPath
// 0x0020 (0x0020 - 0x0000)
struct FDelMarEvent_SectionComplete_ParallelPath final
{
public:
	int32                                         ActiveLap;                                         // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarCheckpoint*                      CompletedCheckpoint;                               // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarCheckpoint*                      CurrentCheckPoint;                                 // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        CompletedSectionTime;                              // 0x0018(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_LapComplete
// 0x0020 (0x0020 - 0x0000)
struct FDelMarEvent_LapComplete final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedLap;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLap;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalLaps;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CompletedLapTime;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_LapRecorded
// 0x0030 (0x0030 - 0x0000)
struct FDelMarEvent_LapRecorded final
{
public:
	int32                                         CompletedLap;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarRunRecord                       CurrentRunRecord;                                  // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	float                                         BestSingleLapTime;                                 // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNewLapRecord;                                   // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_RunRecorded
// 0x0050 (0x0050 - 0x0000)
struct FDelMarEvent_RunRecorded final
{
public:
	class AFortPlayerState*                       PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarRunRecord                       CurrentRunRecord;                                  // 0x0008(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FDelMarRunRecord                       BestRunRecord;                                     // 0x0028(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsNewBestRun;                                     // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_NuxConnectedHintActionPerformed
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEvent_NuxConnectedHintActionPerformed final
{
public:
	struct FGameplayTag                           HintTypeTag;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidPerformAction;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_RaceModeSet
// 0x0004 (0x0004 - 0x0000)
struct FDelMarEvent_RaceModeSet final
{
public:
	struct FGameplayTag                           RaceModeTag;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEvent_MatchmakingStateChanged
// 0x0001 (0x0001 - 0x0000)
struct FDelMarEvent_MatchmakingStateChanged final
{
public:
	uint8                                         NewPostMatchState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarFloatModifier
// 0x0014 (0x0014 - 0x0000)
struct FDelMarFloatModifier final
{
public:
	class FName                                   category;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarFloatOperation                         Operation;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarModifierStackingPolicy                 StackingPolicy;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Handle;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarFloatAttribute
// 0x0030 (0x0030 - 0x0000)
struct FDelMarFloatAttribute final
{
public:
	float                                         BaseValue;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampMin;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampMax;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxValue;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDelMarFloatModifier>           Modifiers;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentHandleIdx;                                  // 0x0028(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.GhostReplayFrame
// 0x0050 (0x0050 - 0x0000)
struct FGhostReplayFrame final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarInputAction
// 0x0010 (0x0010 - 0x0000)
struct FDelMarInputAction final
{
public:
	class UInputAction*                           Action;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DisabledTag;                                       // 0x0008(0x0004)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarDisabledInputData
// 0x0010 (0x0010 - 0x0000)
struct FDelMarDisabledInputData final
{
public:
	float                                         duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilterBase
// 0x00F0 (0x0190 - 0x00A0)
struct FDelMarObjectiveFilterBase : public FObjectiveFilter
{
public:
	struct FObjectiveSubjectTags                  LevelDescriptionId;                                // 0x00A0(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  GameModeId;                                        // 0x00E8(0x0048)(Edit, NativeAccessSpecifierPublic)
	struct FObjectiveSubjectTags                  VehicleTags;                                       // 0x0130(0x0048)(Edit, NativeAccessSpecifierPublic)
	EDelMarPlaylistTypeInfo                       RequiredPlaylistTypeInfo;                          // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UDelMarCosmeticItemDefinition>> RequiredCosmetics;                   // 0x0180(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_BeatPlayers
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_BeatPlayers final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_BonusTurboActivated
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_BonusTurboActivated final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_BoostPadBonusSpeedEnded
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_BoostPadBonusSpeedEnded final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_BoostPadHit
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_BoostPadHit final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_DistanceTraveled
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_DistanceTraveled final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_DraftActivated
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_DraftActivated final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_DriftBoostActivated
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_DriftBoostActivated final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredDriftBoostPercent;                         // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_DriftBoostDeactivated
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_DriftBoostDeactivated final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredTotalDistance;                             // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_DriftComplete
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_DriftComplete final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredDriftDuration;                             // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_HighestSpeedUpdated
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_HighestSpeedUpdated final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredHighestSpeed;                              // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_InitialTurboActivated
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_InitialTurboActivated final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_Kickflipped
// 0x0008 (0x0198 - 0x0190)
struct FDelMarObjectiveFilter_Kickflipped final : public FDelMarObjectiveFilterBase
{
public:
	EDelMarKickflipDirection                      RequiredKickflipDirection;                         // 0x0190(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_191[0x7];                                      // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_LapComplete
// 0x0040 (0x01D0 - 0x0190)
struct FDelMarObjectiveFilter_LapComplete final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredLapCompleteTime;                           // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredLapCount;                                  // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredLapPlacement;                              // 0x01C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_PlacementUpdated
// 0x0018 (0x01A8 - 0x0190)
struct FDelMarObjectiveFilter_PlacementUpdated final : public FDelMarObjectiveFilterBase
{
public:
	struct FInt32Range                            RequiredCurrentPosition;                           // 0x0190(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarPositionChangeInfo                     RequiredPositionChangeInfo;                        // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_PlayedDelMarExperience
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_PlayedDelMarExperience final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_RaceFinished
// 0x0048 (0x01D8 - 0x0190)
struct FDelMarObjectiveFilter_RaceFinished final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredFinishTime;                                // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredFinalPlacement;                            // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredPlayerCompetitiveRank;                     // 0x01C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarJellyHazardProcessorInfo               RequiredJellyHazardInfo;                           // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarDemolishedProcessorInfo                RequiredDemolishedInfo;                            // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_RankAchieved
// 0x0010 (0x01A0 - 0x0190)
struct FDelMarObjectiveFilter_RankAchieved final : public FDelMarObjectiveFilterBase
{
public:
	struct FInt32Range                            RequiredRank;                                      // 0x0190(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_RunComplete
// 0x0038 (0x01C8 - 0x0190)
struct FDelMarObjectiveFilter_RunComplete final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredFinishTime;                                // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredFinalPlacement;                            // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarJellyHazardProcessorInfo               RequiredJellyHazardInfo;                           // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarDemolishedProcessorInfo                RequiredDemolishedInfo;                            // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_RunCompleteTest
// 0x0038 (0x01C8 - 0x0190)
struct FDelMarObjectiveFilter_RunCompleteTest final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredFinishTime;                                // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInt32Range                            RequiredFinalPlacement;                            // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarJellyHazardProcessorInfo               RequiredJellyHazardInfo;                           // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarDemolishedProcessorInfo                RequiredDemolishedInfo;                            // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_StartlineBoostActivated
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_StartlineBoostActivated final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredStartlineBoostPercent;                     // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_UnderthrustDeactivated
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_UnderthrustDeactivated final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredPercentUsed;                               // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_UnderthrustPercentUsed
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_UnderthrustPercentUsed final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_VehicleJumped
// 0x0000 (0x0190 - 0x0190)
struct FDelMarObjectiveFilter_VehicleJumped final : public FDelMarObjectiveFilterBase
{
};

// ScriptStruct DelMarCore.DelMarObjectiveFilter_VehicleLanded
// 0x0020 (0x01B0 - 0x0190)
struct FDelMarObjectiveFilter_VehicleLanded final : public FDelMarObjectiveFilterBase
{
public:
	struct FDoubleRange                           RequiredTimeInAir;                                 // 0x0190(0x0020)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarAnalyticsPlayerRaceData
// 0x0040 (0x0040 - 0x0000)
struct FDelMarAnalyticsPlayerRaceData final
{
public:
	class AFortPlayerController*                  DriverPC;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x38];                                       // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarProxyMeshMaterialInfo
// 0x0010 (0x0010 - 0x0000)
struct FDelMarProxyMeshMaterialInfo final
{
public:
	TArray<class UMaterialInstanceDynamic*>       MaterialArray;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarMusicTrack
// 0x0020 (0x0020 - 0x0000)
struct FDelMarMusicTrack final
{
public:
	class USoundWave*                             StartLineIntro;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             MainTrack;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             MainTrack_LowSpec;                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BPM;                                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_MusicPlaylistUpdated
// 0x001C (0x001C - 0x0000)
struct FDelMarEvent_MusicPlaylistUpdated final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USoundBase>              PreRaceMusic;                                      // 0x0008(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USoundBase>              PostRaceMusic;                                     // 0x0010(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x4];                                       // 0x0018(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarTutorialSection
// 0x0098 (0x0098 - 0x0000)
struct FDelMarTutorialSection final
{
public:
	float                                         FinishTargetTime;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADelMarStartLineActor*                  StartLine;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADelMarStartLineActor*                  FinishLine;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         DisabledActors;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InputDisabledTags;                                 // 0x0028(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FDelMarVehicleAbilityConfig            VehicleAbilityConfig;                              // 0x0048(0x0011)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartingTurboCharges;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarEvent_SetControlsText           ControlsText;                                      // 0x0070(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DialogTag;                                         // 0x0090(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipCountdown;                                    // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarEvent_TutorialSectionChanged
// 0x00A0 (0x00A0 - 0x0000)
struct FDelMarEvent_TutorialSectionChanged final
{
public:
	struct FDelMarTutorialSection                 CurrentSection;                                    // 0x0000(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         CurrentSectionIndex;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarScaledCurve
// 0x0090 (0x0090 - 0x0000)
struct FDelMarScaledCurve final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0008(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarHintText
// 0x0030 (0x0030 - 0x0000)
struct FDelMarHintText final
{
public:
	class FText                                   KBMText;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   GamepadText;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   TouchText;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleAxleConfig
// 0x0028 (0x0028 - 0x0000)
struct FDelMarVehicleAxleConfig final
{
public:
	float                                         TranslateX;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateY;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslateZ;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadius;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestDistanceZ;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarVehicleSuspensionConfig         Suspension;                                        // 0x0014(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarCameraFloatProperty
// 0x00B0 (0x00B0 - 0x0000)
struct FDelMarCameraFloatProperty final
{
public:
	bool                                          bEvaluateInputOnCurve;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccumulateInput;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         InterpLambda;                                      // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecayLambda;                                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                            ClampedRange;                                      // 0x0098(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarCameraFloatBlendedProperty
// 0x01D0 (0x01D0 - 0x0000)
struct FDelMarCameraFloatBlendedProperty final
{
public:
	bool                                          bEvaluateInputOnCurve;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     InputCurve;                                        // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         ActiveValue;                                       // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemapOutputValue;                                 // 0x0094(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     RemapCurve;                                        // 0x0098(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         BlendInLambda;                                     // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutLambda;                                    // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBlendOutCurve;                                 // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BlendOutLambdaCurve;                               // 0x0130(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x14];                                     // 0x01BC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplay_InputState_RL
// 0x0020 (0x0020 - 0x0000)
struct FDelMarVehicleReplay_InputState_RL final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steer;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pitch;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeForward;                                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeRight;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandbrake;                                        // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJump;                                             // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoost;                                            // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleReplay_InputState_DM
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleReplay_InputState_DM final
{
public:
	float                                         AerialPitch;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrift;                                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroundedFlip;                                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickflip;                                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShunt;                                            // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplay_RigidBodyState
// 0x0070 (0x0070 - 0x0000)
struct FDelMarVehicleReplay_RigidBodyState final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LinearVelocity;                                    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleReplay_FrameData
// 0x00B0 (0x00B0 - 0x0000)
struct FDelMarVehicleReplay_FrameData final
{
public:
	int32                                         FrameCaptureIndex;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SecondsSinceCountdownFinished;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplay_InputState_RL     Input;                                             // 0x0010(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleReplay_InputState_DM     Input_DM;                                          // 0x0030(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleReplay_RigidBodyState    PreSimRBState;                                     // 0x0040(0x0070)(NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleCachedContact
// 0x0070 (0x0070 - 0x0000)
struct FDelMarVehicleCachedContact final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaVelocity;                                     // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVehicleContact;                                   // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriveableContact;                                 // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x2];                                       // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UPrimitiveComponent>     Component;                                         // 0x0064(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarWorldBonusSpeedStack
// 0x0028 (0x0028 - 0x0000)
struct FDelMarWorldBonusSpeedStack final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusSpeed;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyForce;                                       // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GroupId;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  ActorSource;                                       // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0xC];                                       // 0x001C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarWorldBonusSpeedGroup
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDelMarWorldBonusSpeedGroup final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleLandingData
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FDelMarVehicleLandingData final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleSkydivingData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FDelMarVehicleSkydivingData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarStartlineBoostData
// 0x0014 (0x0014 - 0x0000)
struct FDelMarStartlineBoostData final
{
public:
	bool                                          bFailed;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReactionSeconds;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunStartTime;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalSeconds;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EarnedPotential;                                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarKickflipSimulationResult
// 0x0120 (0x0120 - 0x0000)
struct FDelMarKickflipSimulationResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00F0)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FQuat                                  VehicleLandingRotation;                            // 0x00F0(0x0020)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidLandingRotation;                             // 0x0110(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDriveableSurfaceHit;                              // 0x0111(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuctionVelocityUsed;                               // 0x0114(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x0118(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceTravelled;                                 // 0x011C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleInPersistent
// 0x08A0 (0x0A40 - 0x01A0)
struct alignas(0x10) FDelMarVehicleInPersistent final : public FFortVehicleInPersistent
{
public:
	uint8                                         Pad_1A0[0x8A0];                                    // 0x01A0(0x08A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleInternalPersistent
// 0x0A40 (0x0B20 - 0x00E0)
struct alignas(0x10) FDelMarVehicleInternalPersistent final : public FFortVehicleInternalPersistent
{
public:
	uint8                                         Pad_E0[0xA40];                                     // 0x00E0(0x0A40)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleOutContinuous
// 0x0160 (0x01B0 - 0x0050)
struct alignas(0x10) FDelMarVehicleOutContinuous final : public FFortVehicleOutContinuous
{
public:
	uint8                                         Pad_50[0x160];                                     // 0x0050(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleNetworkInput
// 0x0048 (0x0048 - 0x0000)
struct FDelMarVehicleNetworkInput final
{
public:
	int32                                         FrameNum;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleInContinuous             Input;                                             // 0x0008(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleSpawnInfo
// 0x0010 (0x0010 - 0x0000)
struct FDelMarVehicleSpawnInfo final
{
public:
	bool                                          bFirstVehicleForPlayer;                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousVehicleDemolished;                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ServerSpawnTime;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVerbMessage_BonusTurboActivated
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_BonusTurboActivated final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_BoostPadBonusSpeedEnded
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_BoostPadBonusSpeedEnded final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_BoostPadHit
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_BoostPadHit final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_DraftActivated
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_DraftActivated final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_DriftBoostDeactivated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_DriftBoostDeactivated final : public FDelMarVerbMessageBase
{
public:
	float                                         TotalDistance;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_DriftComplete
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_DriftComplete final : public FDelMarVerbMessageBase
{
public:
	float                                         DriftDuration;                                     // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_HighestSpeedUpdated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_HighestSpeedUpdated final : public FDelMarVerbMessageBase
{
public:
	float                                         HighestSpeed;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_Kickflipped
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_Kickflipped final : public FDelMarVerbMessageBase
{
public:
	EDelMarKickflipDirection                      Direction;                                         // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_PlacementUpdated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_PlacementUpdated final : public FDelMarVerbMessageBase
{
public:
	uint8                                         CurrentPosition;                                   // 0x0138(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarPositionChangeInfo                     PositionChangeInfo;                                // 0x0139(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_PlayedDelMarExperience
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_PlayedDelMarExperience final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_RaceFinished
// 0x0018 (0x0150 - 0x0138)
struct FDelMarVerbMessage_RaceFinished final : public FDelMarVerbMessageBase
{
public:
	double                                        FinishTime;                                        // 0x0138(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FinalPlacement;                                    // 0x0140(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         PlayerRank;                                        // 0x0141(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EDelMarJellyHazardProcessorInfo               JellyHazardInfo;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarDemolishedProcessorInfo                DemolishedInfo;                                    // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_RankAchieved
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_RankAchieved final : public FDelMarVerbMessageBase
{
public:
	int32                                         RankAchieved;                                      // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_RunComplete
// 0x0018 (0x0150 - 0x0138)
struct FDelMarVerbMessage_RunComplete final : public FDelMarVerbMessageBase
{
public:
	double                                        FinishTime;                                        // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FinalPlacement;                                    // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDelMarJellyHazardProcessorInfo               JellyHazardInfo;                                   // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarDemolishedProcessorInfo                DemolishedInfo;                                    // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_RunCompleteTest
// 0x0018 (0x0150 - 0x0138)
struct FDelMarVerbMessage_RunCompleteTest final : public FDelMarVerbMessageBase
{
public:
	double                                        FinishTime;                                        // 0x0138(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         FinalPlacement;                                    // 0x0140(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EDelMarJellyHazardProcessorInfo               JellyHazardInfo;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDelMarDemolishedProcessorInfo                DemolishedInfo;                                    // 0x0148(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_StartlineBoostActivated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_StartlineBoostActivated final : public FDelMarVerbMessageBase
{
public:
	float                                         StartLineBoostPercent;                             // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_UnderthrustDeactivated
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_UnderthrustDeactivated final : public FDelMarVerbMessageBase
{
public:
	float                                         PercentUsed;                                       // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_UnderthrustPercentUsed
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_UnderthrustPercentUsed final : public FDelMarVerbMessageBase
{
public:
	float                                         PercentUsed;                                       // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVerbMessage_VehicleJumped
// 0x0000 (0x0138 - 0x0138)
struct FDelMarVerbMessage_VehicleJumped final : public FDelMarVerbMessageBase
{
};

// ScriptStruct DelMarCore.DelMarVerbMessage_VehicleLanded
// 0x0008 (0x0140 - 0x0138)
struct FDelMarVerbMessage_VehicleLanded final : public FDelMarVerbMessageBase
{
public:
	float                                         TimeInAir;                                         // 0x0138(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.AudioMixModifier
// 0x0098 (0x0098 - 0x0000)
struct FAudioMixModifier final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMixModifierTarget                            Target;                                            // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     Curve;                                             // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.AudioMixModifierGroup
// 0x0018 (0x0018 - 0x0000)
struct FAudioMixModifierGroup final
{
public:
	class FName                                   GroupName;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioMixModifier>              Modifiers;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarRankedInfo
// 0x0018 (0x0018 - 0x0000)
struct FDelMarRankedInfo final
{
public:
	class FString                                 RankType;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentRank;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.CheckpointTrackDistance
// 0x0018 (0x0018 - 0x0000)
struct FCheckpointTrackDistance final
{
public:
	class ADelMarTrack*                           Track;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrimaryDistance;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalDistance;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarTerrainData
// 0x0018 (0x0018 - 0x0000)
struct FDelMarTerrainData final
{
public:
	float                                         MaxForwardSpeedPercentage;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationMultiplier;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationMultiplier;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerMultiplier;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlipMultiplier;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeedPenalty;                                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleCameraSettings
// 0x001C (0x001C - 0x0000)
struct FDelMarVehicleCameraSettings final
{
public:
	float                                         FOV;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         pitch;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stiffness;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwivelSpeed;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionSpeed;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarEliminationMMRCountPair
// 0x0008 (0x0008 - 0x0000)
struct FDelMarEliminationMMRCountPair final
{
public:
	int32                                         MaxMmr;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayersToEliminate;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarTimeDelayedState
// 0x0008 (0x0008 - 0x0000)
struct FDelMarTimeDelayedState final
{
public:
	struct FGameplayTag                           Name;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarReplicatedLoadout
// 0x0010 (0x0010 - 0x0000)
struct FDelMarReplicatedLoadout final
{
public:
	TArray<class UDelMarCosmeticItemDefinition*>  Items;                                             // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarLoadout
// 0x0050 (0x0050 - 0x0000)
struct FDelMarLoadout final
{
public:
	TMap<struct FGameplayTag, class UDelMarCosmeticItemDefinition*> Items;                           // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPrivate)
};

// ScriptStruct DelMarCore.DelMarLeaderboardConfig
// 0x0020 (0x0020 - 0x0000)
struct FDelMarLeaderboardConfig final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WindowId;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.PhysicalMaterialAttributes_X
// 0x0010 (0x0010 - 0x0000)
struct FPhysicalMaterialAttributes_X final
{
public:
	TArray<class UDelMarPhysMatAttribute*>        Attributes;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarNetworkInputPacket
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDelMarNetworkInputPacket final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarMapStatus
// 0x0010 (0x0010 - 0x0000)
struct FDelMarMapStatus final
{
public:
	class UDelMarLevelDataAsset*                  MapAsset;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBeenPlayed;                                    // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarMapSet
// 0x0018 (0x0018 - 0x0000)
struct FDelMarMapSet final
{
public:
	bool                                          bShouldConsiderValid;                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayLevelsRandomly;                               // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldRepeat;                                     // 0x0002(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarMapStatus>               Levels;                                            // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarDeathRaceConfig
// 0x0018 (0x0018 - 0x0000)
struct FDelMarDeathRaceConfig final
{
public:
	TArray<int32>                                 PlacementPointsMap;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ScoreThresholdToEndMatch;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarPositionValue
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FDelMarPositionValue final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarFinalRacePositionEntry
// 0x0010 (0x0010 - 0x0000)
struct FDelMarFinalRacePositionEntry final
{
public:
	TWeakObjectPtr<class AFortPlayerState>        PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        RunTime;                                           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleRuntimeConfig
// 0x0014 (0x0014 - 0x0000)
struct FDelMarVehicleRuntimeConfig final
{
public:
	bool                                          bCollisionDemosEnabled;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDemolishActionEnabled;                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RequiredDemolishActionDuration;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdleDisablesVehicleCollision;                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsToSetIdle;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDelMarVehicleCollisionOverrideSetting        VehicleCollisionsGlobalOverride;                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyOverlapFilter;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarRespawnConfig
// 0x0010 (0x0010 - 0x0000)
struct FDelMarRespawnConfig final
{
public:
	EDelMarRaceSpawnMode                          SpawnMode;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTracesToDetermineRespawn;                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnInvulnerabilityEnabled;                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RespawnInvulnerabilitySeconds;                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnCollisionProtectionEnabled;                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RespawnCollisionProtectionSeconds;                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarRubberbandingConfig
// 0x0028 (0x0028 - 0x0000)
struct FDelMarRubberbandingConfig final
{
public:
	bool                                          bRubberbandingEnabled;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPackDistance;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPackDistance;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PackDistanceOffset;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceFromPack;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFromPack;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayersForPackDistance;                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPackDistanceGainedPerSecond;                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPackDistanceLostPerSecond;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeedScalar;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarRubberbandingMMRConfig
// 0x0030 (0x0030 - 0x0000)
struct FDelMarRubberbandingMMRConfig final
{
public:
	float                                         MinMmr;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMmr;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarRubberbandingConfig             RubberbandingConfig;                               // 0x0008(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarMatchmakingConfig
// 0x0014 (0x0014 - 0x0000)
struct FDelMarMatchmakingConfig final
{
public:
	float                                         MaxLoadWaitSeconds;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadWaitBufferSeconds;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MatchStartDelaySeconds;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchInProgressBackFillEnabled;                   // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSecondsRemainingForBackfill;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarRandomRange
// 0x0008 (0x0008 - 0x0000)
struct FDelMarRandomRange final
{
public:
	float                                         MinValue;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarStartlineConfig
// 0x0028 (0x0028 - 0x0000)
struct FDelMarStartlineConfig final
{
public:
	bool                                          bEnableDynamicStartline;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialCountdownDelayTime;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestCountdownDelayTime;                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultIntervalSeconds;                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDelMarRandomRange>             IntervalRanges;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CountdownIntervalNum;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarStateOverride
// 0x0028 (0x0028 - 0x0000)
struct FDelMarStateOverride final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0004)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   StateClass;                                        // 0x0008(0x0020)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarStateMachineConfig
// 0x0010 (0x0010 - 0x0000)
struct FDelMarStateMachineConfig final
{
public:
	TArray<struct FDelMarStateOverride>           StateOverrides;                                    // 0x0000(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarDynamicCameraShakeEffect
// 0x00A0 (0x00A0 - 0x0000)
struct FDelMarDynamicCameraShakeEffect final
{
public:
	TSubclassOf<class UCameraShakeBase>           CameraShakeClass;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UCameraShakeBase>        CameraShakeInstance;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ShakeIntensityCurve;                               // 0x0010(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         CurrentShakeIntensity;                             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarThrottledValue
// 0x0008 (0x0008 - 0x0000)
struct FDelMarThrottledValue final
{
public:
	float                                         RiseRate;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallRate;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleLandingLevel
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleLandingLevel final
{
public:
	float                                         MinForce;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedChange;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarTurboBonusZone
// 0x0008 (0x0008 - 0x0000)
struct FDelMarTurboBonusZone final
{
public:
	float                                         ZoneStartTime;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoneEndTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarWorldBonusSpeedSourceCap
// 0x0008 (0x0008 - 0x0000)
struct FDelMarWorldBonusSpeedSourceCap final
{
public:
	struct FGameplayTag                           Source;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCap;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleRigidBodyConfig
// 0x0038 (0x0038 - 0x0000)
struct FDelMarVehicleRigidBodyConfig final
{
public:
	bool                                          bApplyGlobalBodySettings;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinearDamping;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDamping;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleMass;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyRigidBodyCollisions;                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmoothEdgeCollisionsEnabled;                      // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCCD;                                           // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CenterOfMassOffset;                                // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuspensionIgnoresBodyCollision;                   // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleDriveSetup
// 0x0370 (0x0370 - 0x0000)
struct FDelMarVehicleDriveSetup final
{
public:
	float                                         MaxBaseForwardSpeed;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     DriveAccel;                                        // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     TargetSpeedMaxAccelCurve;                          // 0x0098(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TargetSpeedAerialFriction;                         // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowBrakingInAir;                                // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakeAccel;                                        // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopSpeed;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleBrakeFactor;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedToResetTargetSpeedDirection;               // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteerAngleCurve;                                   // 0x0140(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRuntimeFloatCurve>             SteerAngleCurveOverrides;                          // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     LatFrictionCurve;                                  // 0x01D8(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     WheelsGroundedFrictionCurve;                       // 0x0268(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxForwardSpeedToIgnoreLandingSpeed;               // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxKickflipLandingSeconds;                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlipAngle;                                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveVerticalVelocitySensitivity;                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkydiveVerticalPitchSensitivity;                   // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StableSpeedMinGroundedTime;                        // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInAirTimeStableLanding;                         // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsForActivelyLanding;                       // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAerialSpeedForPrimaryDirection;                 // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGroundNormalDiffForPrimaryDirection;            // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPrevVelocityDotProductForPrimaryDirection;      // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardMaxSpeed;                                   // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpwardMaxLandingSpeed;                             // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpwardMaxSpeed;                                    // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLandingAngularVelocity;                         // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLinearSpeed;                                    // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngularSpeed;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCeilingDegrees;                                 // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCeilingDegrees;                                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialCeilingDegrees;                              // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInvertedControlSteering;                        // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCeilingSecondsToInvertControls;                 // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelPushForce;                                    // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForVelocityDirection;                      // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZSpeedForUpwardDirection;                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalOrientationSensitivity;                    // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInactiveLandedFlipTime;                         // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsForWheelsOnGround;                        // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLandingSpeedSpringVarianceDegrees;              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDownDegreesForForwardDirection;                 // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNormalizedForwardSpeed;                         // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNormalizedBonusSpeed;                           // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleCollisionConfig
// 0x0218 (0x0218 - 0x0000)
struct FDelMarVehicleCollisionConfig final
{
public:
	float                                         MinWallAngleDegrees;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeBetweenSpeedLossHits;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForTargetSpeedReduction;                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveBumpTime;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     SpeedReductionPercentageCurve;                     // 0x0010(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     AerialSpeedReductionPercentageCurve;               // 0x00A0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     WallTargetRedirectAngleDegreesCurve;               // 0x0130(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         WallTargetRedirectPercent;                         // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallTargetRedirectDriftPercent;                    // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallDriftHeadOnThresholdDegrees;                   // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallHeadOnDriftRedirectAngleDegrees;               // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallTargetRedirectHeadOnDriftPercent;              // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftTargetAngleDegrees;                           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrivingTargetAngleDegrees;                         // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGroundedDemolitionSpeed;                        // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAerialDemolitionSpeed;                          // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGroundedDemolitionAngleDegrees;                 // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAerialDemolitionAngleDegrees;                   // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParallelCollisionThresholdDegrees;                 // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadOnCollisionThresholdDegrees;                   // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumperToBumperThresholdDegrees;                    // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumpToBumperSpeedPenalty;                          // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactNormalToVehicleRightThresholdDegrees;       // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackDirectionThresholdDegrees;                    // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackTraceLength;                                  // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TrackTraceChannel;                                 // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounterWorldHitImpulses;                          // 0x0209(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounterVehicleHitImpulses;                        // 0x020A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20B[0x1];                                      // 0x020B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VehicleHitImpulseScalar;                           // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleHitDriftImpulseScalar;                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleDriftConfig
// 0x0718 (0x0718 - 0x0000)
struct FDelMarVehicleDriftConfig final
{
public:
	float                                         MinSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDirectedDriftTime;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInAirTime;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialDriftNoKeybindGracePeriod;                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForcedDriftTime;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinKickDriftActiveSeconds;                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSteerWhenKicking;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinForcedSteerWhenKicking;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickCooldownSeconds;                               // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateDriftOnStrafeEnd;                         // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateDriftOnLanding;                           // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateDriftOnKickflipLanding;                   // 0x0026(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateExitDriftTime;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteerInput;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFullThrottleInput;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFullSteerInput;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFullDriftInput;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcedDriftSteer;                                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialTorqueImpulse;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwapDirectionImpulse;                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelInDriftDir;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelNoSteer;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelNotInDriftDir;                          // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelChangeDir;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelDampening;                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelWithKick;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelWithKickV2;                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAccelForcedDrift;                            // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueAgainstExit;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeedWithThrottle;                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeedNoThrottle;                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeedWithKick;                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeedSwapDirections;                    // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDriftDegrees;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDriftDegrees;                                   // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitDriftDegrees;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachDistance;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PeakForwardSpeedDegrees;                           // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickRedirectRate;                                  // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KickRedirectRateV2;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForcedDriftRedirectRate;                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteerRedirectInput;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     NonKickRedirectRateCurve;                          // 0x00A0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAngleCurveControlled;              // 0x0130(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAgainstAngleCurveControlled;       // 0x01C0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAngleCurveNoSteer;                 // 0x0250(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAngleCurveUncontrolled;            // 0x02E0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAngleCurveKickback;                // 0x0370(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     VelocityRedirectAngleCurveKickbackV2;              // 0x0400(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         PeakSpeedIncreaseDegrees;                          // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccelSpeed;                                     // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     AccelerationScalarCurve;                           // 0x0498(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     AdditionalSpeedLossNoThrottle;                     // 0x0528(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxControlledDriftRatio;                           // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5BC[0x4];                                      // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     ControlledSpeedCapBySlipAngle;                     // 0x05C0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     ControlledSpeedCapDecelRate;                       // 0x0650(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         UncontrolledSpeedCap;                              // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UncontrolledSpeedLoss;                             // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitVelocityMaxDegrees;                            // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitKickEndMaxDegrees;                             // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitVelocityTorqueAccel;                           // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitVelocityMaxRotationSpeed;                      // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitForwardMaxDegrees;                             // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitForwardTorqueSteer;                            // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitForwardMaxRotation;                            // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitForwardTargetRedirectRate;                     // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitForwardRedirectRate;                           // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExitForwardLandingSpeed;                        // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceThrottleForControlledDrift;                // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleDriftBoostConfig
// 0x01D8 (0x01D8 - 0x0000)
struct FDelMarVehicleDriftBoostConfig final
{
public:
	float                                         MaxDriftBoostRatio;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeed;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     BonusSpeedPercentageCurve;                         // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         WaitingPeriodSeconds;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDriftBoostSeconds;                              // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     PotentialDriftBoostPercentageCurve;                // 0x00A0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxNumActiveBonusSpeedSeconds;                     // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     DriftBoostDurationCurve;                           // 0x0138(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BonusSpeedDecaySeconds;                            // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PotentialRemovalRate;                              // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceThrottleForDriftBoost;                     // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         QueuedBoostImpulseScalar;                          // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleDraftingConfig
// 0x00C8 (0x00C8 - 0x0000)
struct FDelMarVehicleDraftingConfig final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinEligibleDistance;                               // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHorizontalDegreesToDraftTarget;                 // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalDegreesToDraftTarget;                   // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDynamicAngle;                               // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     MaxBonusSpeedPercentageCurve;                      // 0x0018(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECollisionChannel                             LineOfSightChannel;                                // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeedToStartDrafting;                           // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumSecondsToActivateDrafting;                      // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumForgivenessSeconds;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumGracePeriodSeconds;                             // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumSecondsToMaxBonusSpeed;                         // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeed;                                     // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NumSpeedRemovalSeconds;                            // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleOversteerConfig
// 0x0138 (0x0138 - 0x0000)
struct FDelMarVehicleOversteerConfig final
{
public:
	float                                         MinInput;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAccumulatedSteer;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     CappedAccumulatedSteerCurve;                       // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     AccumulatedSteerRateCurve;                         // 0x0098(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AccumulatedSteerDecayRate;                         // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftImpulseForce;                                 // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDecayAccumulatedSteer;                            // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearAccumulatedSteerOnDrift;                     // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136[0x2];                                      // 0x0136(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Terrain
// 0x0030 (0x0030 - 0x0000)
struct FDelMarVehicleConfig_Terrain final
{
public:
	float                                         TargetSpeedPenaltyCooldownSeconds;                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsTargetSpeedPenalty;                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoGripBrakeFactorWithThrottle;                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedPercentage;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDemolishInWater;                                  // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWaterDepth;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDestructionDelay;                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             NonDriveableActorClasses;                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleTurboConfig
// 0x0070 (0x0070 - 0x0000)
struct FDelMarVehicleTurboConfig final
{
public:
	float                                         MaxActiveTimeSeconds;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownSeconds;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialImpulseForce;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBaseTargetSpeed;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarFloatModifier                   TargetSpeedModifier;                               // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDelMarTurboBonusZone>          BonusZones;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BonusZoneImpulseForce;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusZoneSpeedDecaySeconds;                        // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessfulBonusZoneHitSeconds;                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApproachingBonusZoneSeconds;                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMissingZoneSeconds;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNumCharges;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeRegenRateSeconds;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaceStartCharges;                                  // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LapCompleteCharges;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboGainedForDriftBoostPotential;                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboGainedPerSecondAtMaxDriftPotential;           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTurboChargesFromDrift;                          // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTerrainInvulnerabilityDuringTurbo;                // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Rubberbanding
// 0x01B8 (0x01B8 - 0x0000)
struct FDelMarVehicleConfig_Rubberbanding final
{
public:
	float                                         MinSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeedLostPerSecond;                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     MaxBonusSpeedGainedPerSecond;                      // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     MaxBonusSpeed;                                     // 0x0098(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     MaxSpeed;                                          // 0x0128(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_StartlineBoost
// 0x00A8 (0x00A8 - 0x0000)
struct FDelMarVehicleConfig_StartlineBoost final
{
public:
	float                                         MaxBonusSpeed;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     PercentageMaxBonusSpeedEarned;                     // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BoostGainSeconds;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostDurationSeconds;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceForwardThrottle;                           // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Strafe
// 0x001C (0x001C - 0x0000)
struct FDelMarVehicleConfig_Strafe final
{
public:
	float                                         InitialVelocityForce;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityRelative;                                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSteerInput;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeybindPressLandedBufferSeconds;                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActiveSeconds;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaceStartCooldownSeconds;                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownSeconds;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Underthrust
// 0x00D8 (0x00D8 - 0x0000)
struct FDelMarVehicleConfig_Underthrust final
{
public:
	float                                         UpwardAccel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardAccel;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpwardSpeed;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForwardSpeed;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndThrustForce;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingTankPercentage;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThrustSeconds;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardSpeedCap;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedReduction;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedCapSecondsBuffer;                             // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinJumpActiveSecondsBeforeActivating;              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     FallingUpsideDownThrustDampeningPercentage;        // 0x0030(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bVehicleRelativeWithFreestyle;                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinUpwardAccel;                                    // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralRelativeAccel;                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplenishTankOnLanding;                           // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplenishTankOverTime;                            // 0x00CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TankReplenishDelaySeconds;                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TankReplenishRatePerSecond;                        // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_AirControl
// 0x00D0 (0x00D0 - 0x0000)
struct FDelMarVehicleConfig_AirControl final
{
public:
	float                                         MaxPitchAdjustmentForwardSpeed;                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     LateralTurnRateCurve;                              // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         UnderthrustTurnRate;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRedirectDuringKickflip;                      // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowVerticalRedirectDuringVerticalKickflip;      // 0x009D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LateralKickflipScalar;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalTurnRate;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalTurnRateAboveHorizon;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteerInput;                                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchVerticalDegreesFromWorldDown;              // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchVerticalDegreesFromWorldDown;              // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAerialDivingBonusEnabled;                         // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPitchForAerialDivingBonus;                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAerialDivingBonusSpeed;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAerialDivingBonusSpeed;                         // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialDivingBonusSpeedChangeRate;                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialDivingBonusSpeedDecayRate;                   // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_AirFreestyle
// 0x0030 (0x0030 - 0x0000)
struct FDelMarVehicleConfig_AirFreestyle final
{
public:
	struct FVector                                TorqueAccel;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TorqueDamping;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_AirThrottle
// 0x00A0 (0x00A0 - 0x0000)
struct FDelMarVehicleConfig_AirThrottle final
{
public:
	struct FDelMarScaledCurve                     AccelerationScalarCurve;                           // 0x0000(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AerialSpeedCap;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverCapSpeedLossPerSecond;                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialSlowdownImmunitySeconds;                     // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyNoThrottleSlowdown;                          // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_AutoAerialRotation
// 0x00A8 (0x00A8 - 0x0000)
struct FDelMarVehicleConfig_AutoAerialRotation final
{
public:
	struct FVector                                StabilizationDampingFactor;                        // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StabilizationFactor;                               // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpsideDownDegreesForForcedRoll;                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleRotationThreshold;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpsideDownRollTorque;                              // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpsideDownRollDamping;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRollInput;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteerRollOffsetDegrees;                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchInput;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUserPitchOffsetDegrees;                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralPitchOffsetDegrees;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderthrustPitchDegrees;                           // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinThrottleInput;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUserThrottleOffsetDegrees;                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawTorque;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MaxRotationSpeed;                                  // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinApproachTargetScalar;                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForYawRotation;                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSteerInputForForwardStateTurning;               // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardStateTurnRate;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandingAssistanceEnabled;                         // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             LandingCollisionChannel;                           // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandingDetectionSeconds;                           // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLandingDetectionDistance;                       // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingSurfaceNormalMaxDegrees;                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandingRotationAmplifier;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_AutoUpright
// 0x0024 (0x0024 - 0x0000)
struct FDelMarVehicleConfig_AutoUpright final
{
public:
	float                                         RotationTorque;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDamping;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinActiveSeconds;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinActiveSecondsGrounded;                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelsOnGroundChangedDelaySeconds;                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearAngularVelocity;                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDegreesFromVehicleUpThreshold;                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinThrottleForWheelRotation;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowActiveStateOnGround;                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Jump
// 0x0018 (0x0018 - 0x0000)
struct FDelMarVehicleConfig_Jump final
{
public:
	float                                         MinJumpTime;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpVelocity;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardVelocity;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchTorque;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndThrustForce;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Kickflip
// 0x0158 (0x0158 - 0x0000)
struct FDelMarVehicleConfig_Kickflip final
{
public:
	float                                         DirectionalSensitivity;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryDirectionalSensitivity;                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDiagonalKickDirection;                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumWheelsForLanding;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumActivationCharges;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetChargesOnLanding;                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinActiveSecondsToReactivate;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinActiveTime;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActiveLateralTime;                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActiveUpwardTime;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActiveDownwardTime;                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownSeconds;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowGroundedKickflips;                           // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GroundedKickflipForce;                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralVelocity;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarScaledCurve                     LateralVelocityScalarCurve;                        // 0x0040(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForLateralScalar;                   // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLateralVelocityCancelled;                       // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpwardVerticalVelocity;                            // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownwardVerticalVelocity;                          // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LateralVerticalForce;                              // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationDamping;                                   // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationTorque;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationTorqueIncomingCollision;                   // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedToRotateYaw;                               // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalYawLandingDegrees;                      // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLateralYawLandingDegrees;                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVerticalNormalLandingDegrees;                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLateralNormalLandingDegrees;                    // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLongRollTimeCheck;                              // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLongRollTimeCheckDownwardKick;                  // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLongRollDegrees;                                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDegreesToCompleteRoll;                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastTorqueDistanceCheck;                           // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStartingDirectionWhenLanding;                  // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PredictionTickInterval;                            // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimulationRedirectSeconds;                      // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimulationDistanceLateral;                      // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimulationDistanceUpward;                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSimulationDistanceDownward;                     // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplySuctionToSurfaces;                           // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuctionVelocity;                                   // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSuctionPerSecond;                               // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuctionDistanceCheck;                              // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdditionalVelocitySuctionDistance;              // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             SuctionChannel;                                    // 0x0144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxForwardVelocityDegreeDifference;                // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForPrimaryForwardRotation;                 // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGroundedDirectionDegrees;                       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Gravity
// 0x0020 (0x0020 - 0x0000)
struct FDelMarVehicleConfig_Gravity final
{
public:
	float                                         ForceScaleCeiling;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceScaleWall;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceScaleGround;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialGravityForceMultiplier;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoyoteTimeDuration;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinWheelsForCounterGravityMeasures;                // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCounterGravitySpringVarianceDegrees;            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCounterGravityInKickflipSuctionDirection;         // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_Reattachment
// 0x00A0 (0x00A0 - 0x0000)
struct FDelMarVehicleConfig_Reattachment final
{
public:
	float                                         SurfaceTraceDistance;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReattachmentForceAmount;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDelMarScaledCurve                     ReattachmentForceScalarCurve;                      // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReattachmentChannel;                               // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

// ScriptStruct DelMarCore.DelMarVehicleConfig_WorldBonusSpeed
// 0x0028 (0x0028 - 0x0000)
struct FDelMarVehicleConfig_WorldBonusSpeed final
{
public:
	TArray<struct FDelMarWorldBonusSpeedSourceCap> BonusSpeedSourceCaps;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxBonusSpeedPerStack;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStackDuration;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             WorldBonusSpeedActors;                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_AutoUpright
// 0x0004 (0x0004 - 0x0000)
struct FDelMarVehicleConfigOverride_AutoUpright final
{
public:
	float                                         MaxWorldContactDegreeThreshold;                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Collision
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleConfigOverride_Collision final
{
public:
	bool                                          bCollisionDemosEnabled;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWallRicochetEnabled;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DemoSpeedScalar;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Drift
// 0x000C (0x000C - 0x0000)
struct FDelMarVehicleConfigOverride_Drift final
{
public:
	float                                         SpeedCapScalar;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationRateScalar;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationRateScalar;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_DriftBoost
// 0x000C (0x000C - 0x0000)
struct FDelMarVehicleConfigOverride_DriftBoost final
{
public:
	float                                         MaxBonusSpeedScalar;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationScalar;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PotentialRateScalar;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Drive
// 0x0014 (0x0014 - 0x0000)
struct FDelMarVehicleConfigOverride_Drive final
{
public:
	float                                         MaxBaseForwardSpeedScalar;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationScalar;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationScalar;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakeScalar;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAerialSpeedScalar;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Gravity
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleConfigOverride_Gravity final
{
public:
	float                                         CounterGravityContactDegreeThreshold;              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialGravityScalar;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Jump
// 0x0004 (0x0004 - 0x0000)
struct FDelMarVehicleConfigOverride_Jump final
{
public:
	float                                         JumpImpulseScalar;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Kickflip
// 0x000C (0x000C - 0x0000)
struct FDelMarVehicleConfigOverride_Kickflip final
{
public:
	bool                                          bResetChargesOnLanding;                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumActivationCharges;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownSeconds;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Oversteer
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleConfigOverride_Oversteer final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulatedSteerThresholdScalar;                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Terrain
// 0x0008 (0x0008 - 0x0000)
struct FDelMarVehicleConfigOverride_Terrain final
{
public:
	bool                                          bDemolishInWater;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterDestructionDelay;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Turbo
// 0x0018 (0x0018 - 0x0000)
struct FDelMarVehicleConfigOverride_Turbo final
{
public:
	float                                         StartingVehicleCharges;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeRegenRateScalar;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftBoostTurboGenerationScalar;                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurboSpeedScalar;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActiveTimeSeconds;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuccessfulBonusZoneHitSeconds;                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverride_Underthrust
// 0x001C (0x001C - 0x0000)
struct FDelMarVehicleConfigOverride_Underthrust final
{
public:
	float                                         StartingTankPercentage;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConsumptionRateMultiplier;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplenishTankOnLanding;                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplenishTankOverTime;                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TankReplenishDelaySeconds;                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TankReplenishRateMultiplier;                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelScalar;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxUpwardSpeedScalar;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarVehicleConfigOverrides
// 0x0098 (0x0098 - 0x0000)
struct FDelMarVehicleConfigOverrides final
{
public:
	bool                                          bValid;                                            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDelMarVehicleConfigOverride_AutoUpright AutoUpright;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Collision Collision;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Drift     Drift;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_DriftBoost DriftBoost;                                       // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Drive     Drive;                                             // 0x0028(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Gravity   Gravity;                                           // 0x003C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Jump      Jump;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Kickflip  Kickflip;                                          // 0x0048(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Oversteer Oversteer;                                         // 0x0054(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Terrain   Terrain;                                           // 0x005C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Turbo     Turbo;                                             // 0x0064(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FDelMarVehicleConfigOverride_Underthrust Underthrust;                                     // 0x007C(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};

// ScriptStruct DelMarCore.DelMarDynamicForceFeedbackEffect
// 0x0128 (0x0128 - 0x0000)
struct FDelMarDynamicForceFeedbackEffect final
{
public:
	struct FForceFeedbackChannelDetails           Effect;                                            // 0x0000(0x0090)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     IntensityAmplifierCurve;                           // 0x0090(0x0088)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};

}

