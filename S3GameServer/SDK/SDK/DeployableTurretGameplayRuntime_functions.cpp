#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DeployableTurretGameplayRuntime

#include "Basic.hpp"

#include "DeployableTurretGameplayRuntime_classes.hpp"
#include "DeployableTurretGameplayRuntime_parameters.hpp"


namespace SDK
{

// Function DeployableTurretGameplayRuntime.DeployableTurretAnimInstance.SetNativeVariables
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class ABuildingGameplayActor*     OwningTurretBGA                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDeployableTurretBPAnimData&AnimData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDeployableTurretAnimInstance::SetNativeVariables(const class ABuildingGameplayActor* OwningTurretBGA, const struct FDeployableTurretBPAnimData& AnimData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeployableTurretAnimInstance", "SetNativeVariables");

	Params::DeployableTurretAnimInstance_SetNativeVariables Parms{};

	Parms.OwningTurretBGA = OwningTurretBGA;
	Parms.AnimData = std::move(AnimData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_CalculateTargetingLaserScale
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     TurretActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                CurrentTurretAimTransform                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LaserOrigin                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             MaxLaserRange                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistMult                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDeployableTurretLibrary::DeployableTurret_CalculateTargetingLaserScale(const class AActor* TurretActor, const struct FTransform& CurrentTurretAimTransform, const struct FVector& LaserOrigin, const float MaxLaserRange, const float DistMult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DeployableTurretLibrary", "DeployableTurret_CalculateTargetingLaserScale");

	Params::DeployableTurretLibrary_DeployableTurret_CalculateTargetingLaserScale Parms{};

	Parms.TurretActor = TurretActor;
	Parms.CurrentTurretAimTransform = std::move(CurrentTurretAimTransform);
	Parms.LaserOrigin = std::move(LaserOrigin);
	Parms.MaxLaserRange = MaxLaserRange;
	Parms.DistMult = DistMult;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_EnableSkeletalMeshComponentBudgeting
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponentBudgeted*   SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeployableTurretLibrary::DeployableTurret_EnableSkeletalMeshComponentBudgeting(class USkeletalMeshComponentBudgeted* SkeletalMesh, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DeployableTurretLibrary", "DeployableTurret_EnableSkeletalMeshComponentBudgeting");

	Params::DeployableTurretLibrary_DeployableTurret_EnableSkeletalMeshComponentBudgeting Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.DeployableTurret_GetAimLocationForTargetActor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     TargetActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<struct FGameplayTag, struct FScalableFloat>&NonPlayerPawnTargetTagToZOffsetMap                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDeployableTurretLibrary::DeployableTurret_GetAimLocationForTargetActor(const class AActor* TargetActor, const TMap<struct FGameplayTag, struct FScalableFloat>& NonPlayerPawnTargetTagToZOffsetMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DeployableTurretLibrary", "DeployableTurret_GetAimLocationForTargetActor");

	Params::DeployableTurretLibrary_DeployableTurret_GetAimLocationForTargetActor Parms{};

	Parms.TargetActor = TargetActor;
	Parms.NonPlayerPawnTargetTagToZOffsetMap = std::move(NonPlayerPawnTargetTagToZOffsetMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DeployableTurretGameplayRuntime.DeployableTurretLibrary.FireAnalyticsEvent_DeployableTurretSessionEnd
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUniqueNetIdRepl&          TurretOwnerAccountId                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FFortAnalyticsEventAttribute>&Attributes                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UDeployableTurretLibrary::FireAnalyticsEvent_DeployableTurretSessionEnd(class UObject* WorldContextObject, const struct FUniqueNetIdRepl& TurretOwnerAccountId, const TArray<struct FFortAnalyticsEventAttribute>& Attributes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DeployableTurretLibrary", "FireAnalyticsEvent_DeployableTurretSessionEnd");

	Params::DeployableTurretLibrary_FireAnalyticsEvent_DeployableTurretSessionEnd Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TurretOwnerAccountId = std::move(TurretOwnerAccountId);
	Parms.Attributes = std::move(Attributes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

