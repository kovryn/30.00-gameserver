#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MapDevice

#include "Basic.hpp"

#include "MapDevice_classes.hpp"
#include "MapDevice_parameters.hpp"


namespace SDK
{

// Function MapDevice.CRDMapCustomizationComponent.ClearOverrides
// (Final, Native, Public, BlueprintCallable)

void UCRDMapCustomizationComponent::ClearOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CRDMapCustomizationComponent", "ClearOverrides");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function MapDevice.CRDMapCustomizationComponent.SetOverrideMapMaterial
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UMaterialInterface>MaterialOverride                                       (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Zoom                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCRDMapCustomizationComponent::SetOverrideMapMaterial(TSoftObjectPtr<class UMaterialInterface> MaterialOverride, const struct FVector& Location, const struct FRotator& Rotation, float Width, float Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CRDMapCustomizationComponent", "SetOverrideMapMaterial");

	Params::CRDMapCustomizationComponent_SetOverrideMapMaterial Parms{};

	Parms.MaterialOverride = MaterialOverride;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Width = Width;
	Parms.Zoom = Zoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MapDevice.CRDMapCustomizationComponent.SetOverrideMapTexture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        TextureOverride                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Zoom                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCRDMapCustomizationComponent::SetOverrideMapTexture(TSoftObjectPtr<class UTexture2D> TextureOverride, const struct FVector& Location, const struct FRotator& Rotation, float Width, float Zoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CRDMapCustomizationComponent", "SetOverrideMapTexture");

	Params::CRDMapCustomizationComponent_SetOverrideMapTexture Parms{};

	Parms.TextureOverride = TextureOverride;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Width = Width;
	Parms.Zoom = Zoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function MapDevice.CRDMapCustomizationComponent.SetOverrideSceneCapture
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Zoom                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseClippingPlanes                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NearClipLength                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FarClipLength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCRDMapCustomizationComponent::SetOverrideSceneCapture(const struct FVector& Location, const struct FRotator& Rotation, float Width, float Zoom, bool bUseClippingPlanes, float NearClipLength, float FarClipLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CRDMapCustomizationComponent", "SetOverrideSceneCapture");

	Params::CRDMapCustomizationComponent_SetOverrideSceneCapture Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Width = Width;
	Parms.Zoom = Zoom;
	Parms.bUseClippingPlanes = bUseClippingPlanes;
	Parms.NearClipLength = NearClipLength;
	Parms.FarClipLength = FarClipLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

