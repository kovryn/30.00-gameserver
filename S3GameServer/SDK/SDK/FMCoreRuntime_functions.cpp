#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMCoreRuntime

#include "Basic.hpp"

#include "FMCoreRuntime_classes.hpp"
#include "FMCoreRuntime_parameters.hpp"


namespace SDK
{

// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetDegreeShiftFromProgression
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EHarmonicProgression                    Progression                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMCoreMusicFunctionLibrary::GetDegreeShiftFromProgression(EHarmonicProgression Progression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "GetDegreeShiftFromProgression");

	Params::FMCoreMusicFunctionLibrary_GetDegreeShiftFromProgression Parms{};

	Parms.Progression = Progression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalAtStepInScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ScaleStep                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicKeyMode                           KeyMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicInterval                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicInterval UFMCoreMusicFunctionLibrary::GetIntervalAtStepInScale(int32 ScaleStep, EMusicKeyMode KeyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "GetIntervalAtStepInScale");

	Params::FMCoreMusicFunctionLibrary_GetIntervalAtStepInScale Parms{};

	Parms.ScaleStep = ScaleStep;
	Parms.KeyMode = KeyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalForNote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMidiNote&                 Note                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EMusicKey                               Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicInterval                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicInterval UFMCoreMusicFunctionLibrary::GetIntervalForNote(const struct FMidiNote& Note, EMusicKey Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "GetIntervalForNote");

	Params::FMCoreMusicFunctionLibrary_GetIntervalForNote Parms{};

	Parms.Note = std::move(Note);
	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetIntervalStepInScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicInterval                          Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicKeyMode                           KeyMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMCoreMusicFunctionLibrary::GetIntervalStepInScale(EMusicInterval Interval, EMusicKeyMode KeyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "GetIntervalStepInScale");

	Params::FMCoreMusicFunctionLibrary_GetIntervalStepInScale Parms{};

	Parms.Interval = Interval;
	Parms.KeyMode = KeyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.GetMidiNoteFromScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EMusicKey                               Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Octave                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicInterval                          Interval                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UFMCoreMusicFunctionLibrary::GetMidiNoteFromScale(EMusicKey Key, int32 Octave, EMusicInterval Interval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "GetMidiNoteFromScale");

	Params::FMCoreMusicFunctionLibrary_GetMidiNoteFromScale Parms{};

	Parms.Key = Key;
	Parms.Octave = Octave;
	Parms.Interval = Interval;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicFunctionLibrary.SnapToScale
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FMidiNote&                 Note                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EMusicKey                               Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicKeyMode                           KeyMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMidiNote                        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMidiNote UFMCoreMusicFunctionLibrary::SnapToScale(const struct FMidiNote& Note, EMusicKey Key, EMusicKeyMode KeyMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMCoreMusicFunctionLibrary", "SnapToScale");

	Params::FMCoreMusicFunctionLibrary_SnapToScale Parms{};

	Parms.Note = std::move(Note);
	Parms.Key = Key;
	Parms.KeyMode = KeyMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.OnRep_ServerKeyChanged
// (Final, Native, Private)

void UFMCoreMusicManagerComponent::OnRep_ServerKeyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "OnRep_ServerKeyChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.OnRep_ServerModeChanged
// (Final, Native, Private)

void UFMCoreMusicManagerComponent::OnRep_ServerModeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "OnRep_ServerModeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.OnRep_ServerSpeedChanged
// (Final, Native, Private)

void UFMCoreMusicManagerComponent::OnRep_ServerSpeedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "OnRep_ServerSpeedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.OnRep_ServerTempoChanged
// (Final, Native, Private)

void UFMCoreMusicManagerComponent::OnRep_ServerTempoChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "OnRep_ServerTempoChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.OnRep_ServerTimeSignatureChanged
// (Final, Native, Private)

void UFMCoreMusicManagerComponent::OnRep_ServerTimeSignatureChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "OnRep_ServerTimeSignatureChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerKeyChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMusicKey                               InKey                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::TriggerKeyChange(EMusicKey InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "TriggerKeyChange");

	Params::FMCoreMusicManagerComponent_TriggerKeyChange Parms{};

	Parms.InKey = InKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerModeChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMusicKeyMode                           InMode                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::TriggerModeChange(EMusicKeyMode InMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "TriggerModeChange");

	Params::FMCoreMusicManagerComponent_TriggerModeChange Parms{};

	Parms.InMode = InMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerSpeedChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocalChangeOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::TriggerSpeedChange(float Speed, bool bLocalChangeOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "TriggerSpeedChange");

	Params::FMCoreMusicManagerComponent_TriggerSpeedChange Parms{};

	Parms.Speed = Speed;
	Parms.bLocalChangeOnly = bLocalChangeOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerTempoChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   BPM                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLocalChangeOnly                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::TriggerTempoChange(int32 BPM, bool bLocalChangeOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "TriggerTempoChange");

	Params::FMCoreMusicManagerComponent_TriggerTempoChange Parms{};

	Parms.BPM = BPM;
	Parms.bLocalChangeOnly = bLocalChangeOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.TriggerTimeSignatureChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Numerator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Denominator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::TriggerTimeSignatureChange(int32 Numerator, int32 Denominator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "TriggerTimeSignatureChange");

	Params::FMCoreMusicManagerComponent_TriggerTimeSignatureChange Parms{};

	Parms.Numerator = Numerator;
	Parms.Denominator = Denominator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentAudioState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey*                              OutKey                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMusicKeyMode*                          OutKeyMode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  OutTempo                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMCoreMusicManagerComponent::GetCurrentAudioState(EMusicKey* OutKey, EMusicKeyMode* OutKeyMode, int32* OutTempo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentAudioState");

	Params::FMCoreMusicManagerComponent_GetCurrentAudioState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKey != nullptr)
		*OutKey = Parms.OutKey;

	if (OutKeyMode != nullptr)
		*OutKeyMode = Parms.OutKeyMode;

	if (OutTempo != nullptr)
		*OutTempo = Parms.OutTempo;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKey                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKey UFMCoreMusicManagerComponent::GetCurrentKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentKey");

	Params::FMCoreMusicManagerComponent_GetCurrentKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentKeyMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMusicKeyMode                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMusicKeyMode UFMCoreMusicManagerComponent::GetCurrentKeyMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentKeyMode");

	Params::FMCoreMusicManagerComponent_GetCurrentKeyMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFMCoreMusicManagerComponent::GetCurrentSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentSpeed");

	Params::FMCoreMusicManagerComponent_GetCurrentSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentTempo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFMCoreMusicManagerComponent::GetCurrentTempo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentTempo");

	Params::FMCoreMusicManagerComponent_GetCurrentTempo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMCoreMusicManagerComponent.GetCurrentTimeSignature
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFMCoreTimeSignature             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFMCoreTimeSignature UFMCoreMusicManagerComponent::GetCurrentTimeSignature() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMCoreMusicManagerComponent", "GetCurrentTimeSignature");

	Params::FMCoreMusicManagerComponent_GetCurrentTimeSignature Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMPlayspaceScopedSystemComponent.RemoveFromPlayspaceSystemManager
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFMPlayspaceScopedSystemComponent::RemoveFromPlayspaceSystemManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMPlayspaceScopedSystemComponent", "RemoveFromPlayspaceSystemManager");

	Params::FMPlayspaceScopedSystemComponent_RemoveFromPlayspaceSystemManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.GetOrCreateSystemForActorBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               SystemClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Requester                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor**                          OutActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESystemGetResult*                       OutWasValid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMPlayspaceScopedSystemManager::GetOrCreateSystemForActorBP(TSubclassOf<class AActor> SystemClass, class AActor* Requester, class AActor** OutActor, ESystemGetResult* OutWasValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMPlayspaceScopedSystemManager", "GetOrCreateSystemForActorBP");

	Params::FMPlayspaceScopedSystemManager_GetOrCreateSystemForActorBP Parms{};

	Parms.SystemClass = SystemClass;
	Parms.Requester = Requester;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	if (OutWasValid != nullptr)
		*OutWasValid = Parms.OutWasValid;
}


// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.GetSystemForActorIfExistsBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               SystemClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Requester                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor**                          OutActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESystemGetResult*                       OutWasValid                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMPlayspaceScopedSystemManager::GetSystemForActorIfExistsBP(TSubclassOf<class AActor> SystemClass, class AActor* Requester, class AActor** OutActor, ESystemGetResult* OutWasValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FMPlayspaceScopedSystemManager", "GetSystemForActorIfExistsBP");

	Params::FMPlayspaceScopedSystemManager_GetSystemForActorIfExistsBP Parms{};

	Parms.SystemClass = SystemClass;
	Parms.Requester = Requester;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;

	if (OutWasValid != nullptr)
		*OutWasValid = Parms.OutWasValid;
}


// Function FMCoreRuntime.FMPlayspaceScopedSystemManager.MulticastNewSystemCreated
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           PlayspaceActor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               SystemClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           CreatedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFMPlayspaceScopedSystemManager::MulticastNewSystemCreated(class AActor* PlayspaceActor, TSubclassOf<class AActor> SystemClass, class AActor* CreatedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FMPlayspaceScopedSystemManager", "MulticastNewSystemCreated");

	Params::FMPlayspaceScopedSystemManager_MulticastNewSystemCreated Parms{};

	Parms.PlayspaceActor = PlayspaceActor;
	Parms.SystemClass = SystemClass;
	Parms.CreatedActor = CreatedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

