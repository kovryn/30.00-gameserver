#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AccoladesRuntime

#include "Basic.hpp"

#include "AccoladesRuntime_classes.hpp"
#include "AccoladesRuntime_parameters.hpp"


namespace SDK
{

// Function AccoladesRuntime.FortCheatManager_Accolades.ResetAccoladeData
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)

void UFortCheatManager_Accolades::ResetAccoladeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Accolades", "ResetAccoladeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortCheatManager_Accolades.TriggerAccolade
// (Final, BlueprintAuthorityOnly, Exec, Native, Private)
// Parameters:
// const class FString&                    AccoladeName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_Accolades::TriggerAccolade(const class FString& AccoladeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_Accolades", "TriggerAccolade");

	Params::FortCheatManager_Accolades_TriggerAccolade Parms{};

	Parms.AccoladeName = std::move(AccoladeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.ClientNotifyRestored
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// const EPersistenceFrameworkResult       Result                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::ClientNotifyRestored(const EPersistenceFrameworkResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "ClientNotifyRestored");

	Params::FortControllerComponent_AccoladeCollection_ClientNotifyRestored Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.ClientResetAccoladeData
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UFortControllerComponent_AccoladeCollection::ClientResetAccoladeData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "ClientResetAccoladeData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.HandlePinnedQuestChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FAthenaPinnedQuestData&    PinnedQuestData                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::HandlePinnedQuestChanged(const struct FAthenaPinnedQuestData& PinnedQuestData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "HandlePinnedQuestChanged");

	Params::FortControllerComponent_AccoladeCollection_HandlePinnedQuestChanged Parms{};

	Parms.PinnedQuestData = std::move(PinnedQuestData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.HandlePlayerProfileInitialized
// (Final, Native, Private)

void UFortControllerComponent_AccoladeCollection::HandlePlayerProfileInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "HandlePlayerProfileInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.OnEndMatchForPlayer
// (Final, Native, Private)
// Parameters:
// class UFortControllerComponent_EndMatchPersistence*EndMatchPersistence                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::OnEndMatchForPlayer(class UFortControllerComponent_EndMatchPersistence* EndMatchPersistence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "OnEndMatchForPlayer");

	Params::FortControllerComponent_AccoladeCollection_OnEndMatchForPlayer Parms{};

	Parms.EndMatchPersistence = EndMatchPersistence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.OnRep_PinnedAccoladeName
// (Final, Native, Private)
// Parameters:
// class FName                             OldPinnedAccoladeName                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::OnRep_PinnedAccoladeName(class FName OldPinnedAccoladeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "OnRep_PinnedAccoladeName");

	Params::FortControllerComponent_AccoladeCollection_OnRep_PinnedAccoladeName Parms{};

	Parms.OldPinnedAccoladeName = OldPinnedAccoladeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.ServerMarkAccoladesAsSeen
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const TArray<class FName>&              AccoladeNames                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::ServerMarkAccoladesAsSeen(const TArray<class FName>& AccoladeNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "ServerMarkAccoladesAsSeen");

	Params::FortControllerComponent_AccoladeCollection_ServerMarkAccoladesAsSeen Parms{};

	Parms.AccoladeNames = std::move(AccoladeNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function AccoladesRuntime.FortControllerComponent_AccoladeCollection.ServerPinAccolade
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// const class FName                       AccoladeName                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortControllerComponent_AccoladeCollection::ServerPinAccolade(const class FName AccoladeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortControllerComponent_AccoladeCollection", "ServerPinAccolade");

	Params::FortControllerComponent_AccoladeCollection_ServerPinAccolade Parms{};

	Parms.AccoladeName = AccoladeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

