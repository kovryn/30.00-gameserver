#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SwimmingAnimBP

#include "Basic.hpp"

#include "SwimmingAnimBP_classes.hpp"
#include "SwimmingAnimBP_parameters.hpp"


namespace SDK
{

// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimGraph
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPoseLink*                       AnimGraph_0                                            (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::AnimGraph(struct FPoseLink* AnimGraph_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimGraph");

	Params::SwimmingAnimBP_C_AnimGraph Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AnimGraph_0 != nullptr)
		*AnimGraph_0 = std::move(Parms.AnimGraph_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimMovementAccelAdditive_Exited_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimMovementAccelAdditive_Exited_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimMovementAccelAdditive_Exited_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprint_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprint_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprint_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintSlow_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintSlow_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintSlow_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintStart_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintStart_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintStart_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimSprintStart_Exited_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimSprintStart_Exited_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimSprintStart_Exited_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.AnimNotify_SwimStartAdditive_Entered_Layer
// (BlueprintCallable, BlueprintEvent)

void USwimmingAnimBP_C::AnimNotify_SwimStartAdditive_Entered_Layer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "AnimNotify_SwimStartAdditive_Entered_Layer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.ExecuteUbergraph_SwimmingAnimBP
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USwimmingAnimBP_C::ExecuteUbergraph_SwimmingAnimBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "ExecuteUbergraph_SwimmingAnimBP");

	Params::SwimmingAnimBP_C_ExecuteUbergraph_SwimmingAnimBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_AimOffset
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InAimOffsetsPose                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InSourcePosePreAimOffsets                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_AimOffset_0                               (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_AimOffset(const struct FPoseLink& InAimOffsetsPose, const struct FPoseLink& InSourcePosePreAimOffsets, struct FPoseLink* MovementMode_AimOffset_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_AimOffset");

	Params::SwimmingAnimBP_C_MovementMode_AimOffset Parms{};

	Parms.InAimOffsetsPose = std::move(InAimOffsetsPose);
	Parms.InSourcePosePreAimOffsets = std::move(InSourcePosePreAimOffsets);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_AimOffset_0 != nullptr)
		*MovementMode_AimOffset_0 = std::move(Parms.MovementMode_AimOffset_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_FinalPoseOverride
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InFinalPose                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_FinalPoseOverride_0                       (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_FinalPoseOverride(const struct FPoseLink& InFinalPose, struct FPoseLink* MovementMode_FinalPoseOverride_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_FinalPoseOverride");

	Params::SwimmingAnimBP_C_MovementMode_FinalPoseOverride Parms{};

	Parms.InFinalPose = std::move(InFinalPose);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_FinalPoseOverride_0 != nullptr)
		*MovementMode_FinalPoseOverride_0 = std::move(Parms.MovementMode_FinalPoseOverride_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_FullBodyOverride
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InputPoseFullBody                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_FullBodyOverride_0                        (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_FullBodyOverride(const struct FPoseLink& InputPoseFullBody, struct FPoseLink* MovementMode_FullBodyOverride_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_FullBodyOverride");

	Params::SwimmingAnimBP_C_MovementMode_FullBodyOverride Parms{};

	Parms.InputPoseFullBody = std::move(InputPoseFullBody);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_FullBodyOverride_0 != nullptr)
		*MovementMode_FullBodyOverride_0 = std::move(Parms.MovementMode_FullBodyOverride_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_LocomotionAdditives
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InLocomotionAdditivesPose                              (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_LocomotionAdditives_0                     (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_LocomotionAdditives(const struct FPoseLink& InLocomotionAdditivesPose, struct FPoseLink* MovementMode_LocomotionAdditives_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_LocomotionAdditives");

	Params::SwimmingAnimBP_C_MovementMode_LocomotionAdditives Parms{};

	Parms.InLocomotionAdditivesPose = std::move(InLocomotionAdditivesPose);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_LocomotionAdditives_0 != nullptr)
		*MovementMode_LocomotionAdditives_0 = std::move(Parms.MovementMode_LocomotionAdditives_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_LowerBodyOverride
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InLowerBodyPose                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InSourcePose                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_LowerBodyOverride_0                       (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_LowerBodyOverride(const struct FPoseLink& InLowerBodyPose, const struct FPoseLink& InSourcePose, struct FPoseLink* MovementMode_LowerBodyOverride_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_LowerBodyOverride");

	Params::SwimmingAnimBP_C_MovementMode_LowerBodyOverride Parms{};

	Parms.InLowerBodyPose = std::move(InLowerBodyPose);
	Parms.InSourcePose = std::move(InSourcePose);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_LowerBodyOverride_0 != nullptr)
		*MovementMode_LowerBodyOverride_0 = std::move(Parms.MovementMode_LowerBodyOverride_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.MovementMode_SourcePose
// (HasOutParams, BlueprintCallable)
// Parameters:
// const struct FPoseLink&                 InSourcePoseBase                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       MovementMode_SourcePose_0                              (Parm, OutParm, NoDestructor)

void USwimmingAnimBP_C::MovementMode_SourcePose(const struct FPoseLink& InSourcePoseBase, struct FPoseLink* MovementMode_SourcePose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "MovementMode_SourcePose");

	Params::SwimmingAnimBP_C_MovementMode_SourcePose Parms{};

	Parms.InSourcePoseBase = std::move(InSourcePoseBase);

	UObject::ProcessEvent(Func, &Parms);

	if (MovementMode_SourcePose_0 != nullptr)
		*MovementMode_SourcePose_0 = std::move(Parms.MovementMode_SourcePose_0);
}


// Function SwimmingAnimBP.SwimmingAnimBP_C.On Dive Jump Ground Land Update
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAnimUpdateContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FAnimNodeReference&        Node                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void USwimmingAnimBP_C::On_Dive_Jump_Ground_Land_Update(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SwimmingAnimBP_C", "On Dive Jump Ground Land Update");

	Params::SwimmingAnimBP_C_On_Dive_Jump_Ground_Land_Update Parms{};

	Parms.Context = std::move(Context);
	Parms.Node = std::move(Node);

	UObject::ProcessEvent(Func, &Parms);
}

}

