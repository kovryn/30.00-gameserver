#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarDiorama

#include "Basic.hpp"

#include "DelMarDiorama_classes.hpp"
#include "DelMarDiorama_parameters.hpp"


namespace SDK
{

// Function DelMarDiorama.DelMarCockpitActor.BP_OnBoundVehicleChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class ADelMarVehicle*             NewVehicle                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADelMarCockpitActor::BP_OnBoundVehicleChanged(const class ADelMarVehicle* NewVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCockpitActor", "BP_OnBoundVehicleChanged");

	Params::DelMarCockpitActor_BP_OnBoundVehicleChanged Parms{};

	Parms.NewVehicle = NewVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarDiorama.DelMarDioramaActor.HandleSequenceFinished
// (Final, Native, Protected)

void ADelMarDioramaActor::HandleSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDioramaActor", "HandleSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaOpenChannel
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bOpened                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaOpenChannel(bool bOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaOpenChannel");

	Params::DelMarDriverCheatManager_DelMarDioramaOpenChannel Parms{};

	Parms.bOpened = bOpened;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetDriverReaction
// (Final, Exec, Native, Protected)
// Parameters:
// const class FString&                    ReactionTag                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaSetDriverReaction(const class FString& ReactionTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaSetDriverReaction");

	Params::DelMarDriverCheatManager_DelMarDioramaSetDriverReaction Parms{};

	Parms.ReactionTag = std::move(ReactionTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetEnabled
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaSetEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaSetEnabled");

	Params::DelMarDriverCheatManager_DelMarDioramaSetEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetLightingChannel
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bMainChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaSetLightingChannel(bool bMainChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaSetLightingChannel");

	Params::DelMarDriverCheatManager_DelMarDioramaSetLightingChannel Parms{};

	Parms.bMainChannel = bMainChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetLocation
// (Final, Exec, Native, Protected)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaSetLocation(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaSetLocation");

	Params::DelMarDriverCheatManager_DelMarDioramaSetLocation Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarDioramaSetVisibleInSceneCaptureOnly
// (Final, Exec, Native, Protected)
// Parameters:
// bool                                    bOnly                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarDioramaSetVisibleInSceneCaptureOnly(bool bOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarDioramaSetVisibleInSceneCaptureOnly");

	Params::DelMarDriverCheatManager_DelMarDioramaSetVisibleInSceneCaptureOnly Parms{};

	Parms.bOnly = bOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarIntercomBroadcastEmote
// (Final, Exec, Native, Protected)
// Parameters:
// const class FString&                    EmoteTag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarIntercomBroadcastEmote(const class FString& EmoteTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarIntercomBroadcastEmote");

	Params::DelMarDriverCheatManager_DelMarIntercomBroadcastEmote Parms{};

	Parms.EmoteTag = std::move(EmoteTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverCheatManager.DelMarIntercomPlayInteraction
// (Final, Exec, Native, Protected)
// Parameters:
// const class FString&                    InteractionTag                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverCheatManager::DelMarIntercomPlayInteraction(const class FString& InteractionTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverCheatManager", "DelMarIntercomPlayInteraction");

	Params::DelMarDriverCheatManager_DelMarIntercomPlayInteraction Parms{};

	Parms.InteractionTag = std::move(InteractionTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverAnimInstance.IsDrivingSpeed
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarDriverAnimInstance::IsDrivingSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverAnimInstance", "IsDrivingSpeed");

	Params::DelMarDriverAnimInstance_IsDrivingSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarDiorama.DelMarDioramaControllerComponent.HandleViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            PC                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Old                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDioramaControllerComponent::HandleViewTargetChanged(class AFortPlayerController* PC, class AActor* Old, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDioramaControllerComponent", "HandleViewTargetChanged");

	Params::DelMarDioramaControllerComponent_HandleViewTargetChanged Parms{};

	Parms.PC = PC;
	Parms.Old = Old;
	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannelBase.HandleSequenceFinished
// (Native, Protected)

void UDelMarDriverChannelBase::HandleSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannelBase", "HandleSequenceFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleDraftStateChanged
// (Final, Native, Protected)
// Parameters:
// EDelmarDraftingState                    DraftState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleDraftStateChanged(EDelmarDraftingState DraftState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleDraftStateChanged");

	Params::DelMarDriverChannel_HandleDraftStateChanged Parms{};

	Parms.DraftState = DraftState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleDriftBoostActivated
// (Final, Native, Protected)
// Parameters:
// float                                   PercentageMaxBoostGained                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleDriftBoostActivated(float PercentageMaxBoostGained)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleDriftBoostActivated");

	Params::DelMarDriverChannel_HandleDriftBoostActivated Parms{};

	Parms.PercentageMaxBoostGained = PercentageMaxBoostGained;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleHazardSpeedLost
// (Final, Native, Protected)

void UDelMarDriverChannel::HandleHazardSpeedLost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleHazardSpeedLost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleSpeedChanged
// (Final, Native, Protected)
// Parameters:
// float                                   NewSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleSpeedChanged(float NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleSpeedChanged");

	Params::DelMarDriverChannel_HandleSpeedChanged Parms{};

	Parms.NewSpeed = NewSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleStartlineBoostActivated
// (Final, Native, Protected)
// Parameters:
// float                                   PercentageSpeedEarned                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleStartlineBoostActivated(float PercentageSpeedEarned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleStartlineBoostActivated");

	Params::DelMarDriverChannel_HandleStartlineBoostActivated Parms{};

	Parms.PercentageSpeedEarned = PercentageSpeedEarned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleTurboActivated
// (Final, Native, Protected)

void UDelMarDriverChannel::HandleTurboActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleTurboActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleDemolished
// (Final, Native, Protected)
// Parameters:
// const struct FGameplayTag&              CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleVehicleDemolished");

	Params::DelMarDriverChannel_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleHitWall
// (Final, Native, Protected, HasDefaults)
// Parameters:
// float                                   ImpactMagnitude                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ForwardRotationDegrees                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleVehicleHitWall(float ImpactMagnitude, const struct FVector& WorldLocation, float ForwardRotationDegrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleVehicleHitWall");

	Params::DelMarDriverChannel_HandleVehicleHitWall Parms{};

	Parms.ImpactMagnitude = ImpactMagnitude;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.ForwardRotationDegrees = ForwardRotationDegrees;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleLanded
// (Final, Native, Protected)
// Parameters:
// float                                   LandingForce                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLandedKickflip                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleVehicleLanded(float LandingForce, bool bLandedKickflip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleVehicleLanded");

	Params::DelMarDriverChannel_HandleVehicleLanded Parms{};

	Parms.LandingForce = LandingForce;
	Parms.bLandedKickflip = bLandedKickflip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarDriverChannel.HandleVehicleSpawned
// (Final, Native, Protected)
// Parameters:
// bool                                    bFirstCar                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPrevCarDemolished                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarDriverChannel::HandleVehicleSpawned(bool bFirstCar, bool bPrevCarDemolished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarDriverChannel", "HandleVehicleSpawned");

	Params::DelMarDriverChannel_HandleVehicleSpawned Parms{};

	Parms.bFirstCar = bFirstCar;
	Parms.bPrevCarDemolished = bPrevCarDemolished;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarIntercomComponent.ClientReceiveEmote
// (Net, Native, Event, Protected, NetClient)
// Parameters:
// const struct FGameplayTag&              EmoteTag                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerState*                     Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarIntercomComponent::ClientReceiveEmote(const struct FGameplayTag& EmoteTag, class APlayerState* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarIntercomComponent", "ClientReceiveEmote");

	Params::DelMarIntercomComponent_ClientReceiveEmote Parms{};

	Parms.EmoteTag = std::move(EmoteTag);
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarIntercomComponent.ClientReceiveInteraction
// (Net, Native, Event, Protected, NetClient)
// Parameters:
// const struct FGameplayTag&              InteractionTag                                         (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class APlayerState*               Instigator                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class APlayerState*               Receiver                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarIntercomComponent::ClientReceiveInteraction(const struct FGameplayTag& InteractionTag, const class APlayerState* Instigator, const class APlayerState* Receiver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarIntercomComponent", "ClientReceiveInteraction");

	Params::DelMarIntercomComponent_ClientReceiveInteraction Parms{};

	Parms.InteractionTag = std::move(InteractionTag);
	Parms.Instigator = Instigator;
	Parms.Receiver = Receiver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarIntercomComponent.HandleViewTargetChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            InController                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarIntercomComponent::HandleViewTargetChanged(class AFortPlayerController* InController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarIntercomComponent", "HandleViewTargetChanged");

	Params::DelMarIntercomComponent_HandleViewTargetChanged Parms{};

	Parms.InController = InController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarIntercomComponent.ServerReceiveEmote
// (Net, Native, Event, Protected, NetServer)
// Parameters:
// const struct FGameplayTag&              EmoteTag                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarIntercomComponent::ServerReceiveEmote(const struct FGameplayTag& EmoteTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarIntercomComponent", "ServerReceiveEmote");

	Params::DelMarIntercomComponent_ServerReceiveEmote Parms{};

	Parms.EmoteTag = std::move(EmoteTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarDiorama.DelMarIntercomComponent.ServerReceiveInteraction
// (Net, Native, Event, Public, NetServer)
// Parameters:
// const struct FGameplayTag&              EmoteTag                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class APlayerState*               Receiver                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarIntercomComponent::ServerReceiveInteraction(const struct FGameplayTag& EmoteTag, const class APlayerState* Receiver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarIntercomComponent", "ServerReceiveInteraction");

	Params::DelMarIntercomComponent_ServerReceiveInteraction Parms{};

	Parms.EmoteTag = std::move(EmoteTag);
	Parms.Receiver = Receiver;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

