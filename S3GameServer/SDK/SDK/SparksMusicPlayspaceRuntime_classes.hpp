#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksMusicPlayspaceRuntime

#include "Basic.hpp"

#include "SparksCoreRuntime_structs.hpp"
#include "PlayspaceSystem_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "SparksMusicPlayspaceRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "FMCoreRuntime_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SparksMusicPlayspaceRuntime.PlayspaceComponent_LipSyncAssetManager
// 0x0028 (0x00C8 - 0x00A0)
class UPlayspaceComponent_LipSyncAssetManager : public UPlayspaceComponent
{
public:
	TMulticastInlineDelegate<void(const TSoftObjectPtr<class UAnimSequence> LipSyncAnimSequence, const TArray<class APlayerState*>& PlayerStates)> OnLipSyncAnimChanged; // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TSoftObjectPtr<class UAnimSequence> TryGetLipSyncAnimAssetForPlayer(const class APlayerState* PlayerState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayspaceComponent_LipSyncAssetManager">();
	}
	static class UPlayspaceComponent_LipSyncAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayspaceComponent_LipSyncAssetManager>();
	}
};

// Class SparksMusicPlayspaceRuntime.PlayspaceComponent_SparksPerfMem
// 0x0010 (0x00B0 - 0x00A0)
class UPlayspaceComponent_SparksPerfMem final : public UPlayspaceComponent
{
public:
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartTrackingServerPerf(const struct FSparksServerPerfMemSettings& Settings);
	void StopTrackingServerPerf();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayspaceComponent_SparksPerfMem">();
	}
	static class UPlayspaceComponent_SparksPerfMem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayspaceComponent_SparksPerfMem>();
	}
};

// Class SparksMusicPlayspaceRuntime.SparksMusicPlayspaceInteractorInterface
// 0x0000 (0x0000 - 0x0000)
class ISparksMusicPlayspaceInteractorInterface final
{
public:
	void EnteredSparksMusicPlayspace(class ASparksMusicPlayspace* Playspace);
	void ExitedSparksMusicPlayspace(class ASparksMusicPlayspace* Playspace);

	bool AllowedToEnterMusicPlayspace(class ASparksMusicPlayspace* Playspace) const;
	bool DoesSparksMusicPlayspaceInteratorHaveTag(const struct FGameplayTag& tag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMusicPlayspaceInteractorInterface">();
	}
	static class ISparksMusicPlayspaceInteractorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISparksMusicPlayspaceInteractorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class SparksMusicPlayspaceRuntime.SparksMusicPlayerInterface
// 0x0000 (0x0000 - 0x0000)
class ISparksMusicPlayerInterface final
{
public:
	bool IsSparksMusicPlayerPlaying() const;
	bool IsSparksMusicPlayerPlayingWithKey() const;
	bool ShouldAutoRegister() const;
	void SparksMusicPlayerAddedToMusicPlayspace(class ASparksMusicPlayspace* Playspace) const;
	void SparksMusicPlayerRemovedFromMusicPlayspace(class ASparksMusicPlayspace* Playspace) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMusicPlayerInterface">();
	}
	static class ISparksMusicPlayerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISparksMusicPlayerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class SparksMusicPlayspaceRuntime.SparksMusicPlayspace
// 0x00B0 (0x07F0 - 0x0740)
class ASparksMusicPlayspace : public AFortPlayspace
{
public:
	TMulticastInlineDelegate<void(TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver)> OnMidiEventDriverChanged; // 0x0740(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_750[0x18];                                     // 0x0750(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, class UParsedMidiEventData* ParsedMidiEventData)> OnMidiEventDataParsed; // 0x0768(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_778[0x18];                                     // 0x0778(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSparksPlayspaceInteractor>     Interactors;                                       // 0x0790(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAudioComponent*                        MetasoundPlayer;                                   // 0x07A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        MetasoundMixer;                                    // 0x07A8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMusicClockComponent*                   MusicClock;                                        // 0x07B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSparksPlayspaceMusicPlayer>    MusicPlayers;                                      // 0x07B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USparksMusicPlayspaceAudioState*        AudioState;                                        // 0x07C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USparksCameraDirectorComponent*         CameraDirector;                                    // 0x07D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayspaceComponent_PlayerManager*      PlayerManagerComp;                                 // 0x07D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayspaceComponent_LipSyncAssetManager* LipSyncManager;                                   // 0x07E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayspaceComponent_SparksPerfMem*      PerfMemComp;                                       // 0x07E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class ASparksMusicPlayspace* GetSparksMusicPlayspaceOfClass(TSubclassOf<class ASparksMusicPlayspace> PlayspaceType, const class UObject* WorldContextObject, class AActor* Actor, bool bMatchChildTypes);
	static class ASparksMusicPlayspace* GetSparksMusicPlayspaceOfClassByLocation(TSubclassOf<class ASparksMusicPlayspace> PlayspaceType, const class UObject* WorldContextObject, struct FVector* Location, bool bMatchChildTypes);

	bool AddInteractor(class UObject* Interactor, class AActor* ForActor);
	bool AddMusicPlayer(class UObject* Interactor, class AActor* ForActor);
	void BP_RemovePlayspaceUser(class AController* Controller);
	void BPEvent_OnIntialized();
	void BPEvent_OnUserAdded(const struct FPlayspaceUser& User, const class APlayerState* PlayerState);
	void BPEvent_OnUserRemoved(const struct FPlayspaceUser& User, const class APlayerState* PlayerState);
	void OnBeatEvent(int32 BeatNumber, int32 BeatInBar);
	void OnMeasureEvent(int32 MeasureNumber);
	bool RemoveInteractor(class UObject* Interactor, class AActor* ForActor);
	bool RemoveMusicPlayer(class UObject* MusicPlayer, class AActor* ForActor);

	TArray<class APlayerState*> BP_GetAllPlayerStates() const;
	class UGameplayEventRouterComponent* BP_GetOwnedEventRouter() const;
	bool DoesPlayerHaveInstrument(const class APlayerState* PlayerState, const ESparksInstrumentType InstrumentType) const;
	TArray<class AController*> GetAllPlayerControllers() const;
	TArray<class APawn*> GetAllPlayerPawns() const;
	TArray<class UObject*> GetMusicPlayers() const;
	bool IsAnyMusicPlaying() const;
	bool IsAnyMusicPlayingWithKey() const;
	TScriptInterface<class IMidiEventDriverInterface> TryGetMidiEventDriverForPlayerState(const class APlayerState* PlayerState) const;
	TArray<TScriptInterface<class IMidiEventDriverInterface>> TryGetMidiEventDrivers() const;
	bool TryGetMusicKeyAndMode(EMusicKey* OutMusicKey, EMusicKeyMode* OutMusicKeyMode) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMusicPlayspace">();
	}
	static class ASparksMusicPlayspace* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASparksMusicPlayspace>();
	}
};

// Class SparksMusicPlayspaceRuntime.SparksMusicPlayspaceAudioState
// 0x0008 (0x00A8 - 0x00A0)
class USparksMusicPlayspaceAudioState final : public UActorComponent
{
public:
	EMusicKey                                     CurrentKey;                                        // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMusicKeyMode                                 CurrentMode;                                       // 0x00A1(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTempo;                                      // 0x00A4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRep_OnKeyChanged();
	void OnRep_OnModeChanged();
	void OnRep_OnTempoChanged();
	void TriggerKeyChange(EMusicKey InKey);
	void TriggerModeChange(EMusicKeyMode InMode);
	void TriggerTempoChange(int32 BPM);

	void GetCurrentAudioState(EMusicKey* OutKey, EMusicKeyMode* OutKeyMode, int32* OutTempo) const;
	EMusicKey GetCurrentKey() const;
	EMusicKeyMode GetCurrentKeyMode() const;
	int32 GetCurrentTempo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SparksMusicPlayspaceAudioState">();
	}
	static class USparksMusicPlayspaceAudioState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USparksMusicPlayspaceAudioState>();
	}
};

}

