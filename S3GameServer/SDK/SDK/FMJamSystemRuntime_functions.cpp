#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FMJamSystemRuntime

#include "Basic.hpp"

#include "FMJamSystemRuntime_classes.hpp"
#include "FMJamSystemRuntime_parameters.hpp"


namespace SDK
{

// Function FMJamSystemRuntime.JamGlobalControlsWidget.Close
// (Final, Native, Protected, BlueprintCallable)

void UJamGlobalControlsWidget::Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamGlobalControlsWidget", "Close");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamControllerComponent.GetControllerOfClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class AController>          ControllerType                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchChildTypes                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* UJamControllerComponent::GetControllerOfClass(TSubclassOf<class AController> ControllerType, bool bMatchChildTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent", "GetControllerOfClass");

	Params::JamControllerComponent_GetControllerOfClass Parms{};

	Parms.ControllerType = ControllerType;
	Parms.bMatchChildTypes = bMatchChildTypes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamSystemRuntime.JamControllerComponent.UpdateJamUI
// (Event, Protected, BlueprintEvent)

void UJamControllerComponent::UpdateJamUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent", "UpdateJamUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function FMJamSystemRuntime.JamControllerComponent_LoopOptions.AddJamCategories
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPostLockerCategory                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamControllerComponent_LoopOptions::AddJamCategories(bool bPostLockerCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent_LoopOptions", "AddJamCategories");

	Params::JamControllerComponent_LoopOptions_AddJamCategories Parms{};

	Parms.bPostLockerCategory = bPostLockerCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamControllerComponent_LoopOptions.OnLoadoutChanged
// (Final, Native, Private)

void UJamControllerComponent_LoopOptions::OnLoadoutChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent_LoopOptions", "OnLoadoutChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamControllerComponent_LoopPreloader.OnLoadoutFilled
// (Final, Native, Protected)

void UJamControllerComponent_LoopPreloader::OnLoadoutFilled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent_LoopPreloader", "OnLoadoutFilled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamControllerComponent_LoopPreloader.OnPawnSet
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamControllerComponent_LoopPreloader::OnPawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent_LoopPreloader", "OnPawnSet");

	Params::JamControllerComponent_LoopPreloader_OnPawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamControllerComponent_LoopPreloader.OnSongCatalogRetrieved
// (Final, Native, Protected)
// Parameters:
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamControllerComponent_LoopPreloader::OnSongCatalogRetrieved(bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamControllerComponent_LoopPreloader", "OnSongCatalogRetrieved");

	Params::JamControllerComponent_LoopPreloader_OnSongCatalogRetrieved Parms{};

	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamOnOffSwitchComponent.ShouldApplyJamOnSplitscreenLogic
// (Final, RequiredAPI, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReferenceController                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamOnOffSwitchComponent::ShouldApplyJamOnSplitscreenLogic(class UObject* WorldContextObject, class APlayerController* ReferenceController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JamOnOffSwitchComponent", "ShouldApplyJamOnSplitscreenLogic");

	Params::JamOnOffSwitchComponent_ShouldApplyJamOnSplitscreenLogic Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ReferenceController = ReferenceController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamSystemRuntime.JamOnOffSwitchComponent.OnMutatorUpdated
// (Final, Native, Protected)

void UJamOnOffSwitchComponent::OnMutatorUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamOnOffSwitchComponent", "OnMutatorUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamOnOffSwitchComponent.OnPlayerStatePawnSet
// (Final, Native, Protected)
// Parameters:
// class APlayerState*                     Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJamOnOffSwitchComponent::OnPlayerStatePawnSet(class APlayerState* Player, class APawn* NewPawn, class APawn* OldPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamOnOffSwitchComponent", "OnPlayerStatePawnSet");

	Params::JamOnOffSwitchComponent_OnPlayerStatePawnSet Parms{};

	Parms.Player = Player;
	Parms.NewPawn = NewPawn;
	Parms.OldPawn = OldPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FMJamSystemRuntime.JamPlayerPawnComponent.GetPawnOfClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class APawn>                PawnType                                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchChildTypes                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* UJamPlayerPawnComponent::GetPawnOfClass(TSubclassOf<class APawn> PawnType, bool bMatchChildTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JamPlayerPawnComponent", "GetPawnOfClass");

	Params::JamPlayerPawnComponent_GetPawnOfClass Parms{};

	Parms.PawnType = PawnType;
	Parms.bMatchChildTypes = bMatchChildTypes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FMJamSystemRuntime.JamSystemEmoteBPFL.GetEmoteActionBinding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    EmoteTemplateID                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEmoteActionBinding*             OutCreatedEmote                                        (Parm, OutParm, NativeAccessSpecifierPublic)

void UJamSystemEmoteBPFL::GetEmoteActionBinding(const class FString& EmoteTemplateID, struct FEmoteActionBinding* OutCreatedEmote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JamSystemEmoteBPFL", "GetEmoteActionBinding");

	Params::JamSystemEmoteBPFL_GetEmoteActionBinding Parms{};

	Parms.EmoteTemplateID = std::move(EmoteTemplateID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCreatedEmote != nullptr)
		*OutCreatedEmote = std::move(Parms.OutCreatedEmote);
}


// Function FMJamSystemRuntime.JamSystemEmoteBPFL.IsJamDebugDisplayEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJamSystemEmoteBPFL::IsJamDebugDisplayEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JamSystemEmoteBPFL", "IsJamDebugDisplayEnabled");

	Params::JamSystemEmoteBPFL_IsJamDebugDisplayEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

