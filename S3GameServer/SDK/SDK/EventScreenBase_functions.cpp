#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventScreenBase

#include "Basic.hpp"

#include "EventScreenBase_classes.hpp"
#include "EventScreenBase_parameters.hpp"


namespace SDK
{

// Function EventScreenBase.FortEventModalBase.CloseModal
// (Final, Native, Public, BlueprintCallable)

void UFortEventModalBase::CloseModal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventModalBase", "CloseModal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventMoreInfoGroup.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventMoreInfoGroup::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoGroup", "OnEventScreenDataSet");

	Params::FortEventMoreInfoGroup_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoGroup.OnIconLoaded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UObject*                    Icon                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventMoreInfoGroup::OnIconLoaded(const class UObject* Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoGroup", "OnIconLoaded");

	Params::FortEventMoreInfoGroup_OnIconLoaded Parms{};

	Parms.Icon = Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoGroup.OnSetGroupText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Body                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventMoreInfoGroup::OnSetGroupText(const class FText& Header, const class FText& Body)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoGroup", "OnSetGroupText");

	Params::FortEventMoreInfoGroup_OnSetGroupText Parms{};

	Parms.Header = std::move(Header);
	Parms.Body = std::move(Body);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoModal.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventMoreInfoModal::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "OnEventScreenDataSet");

	Params::FortEventMoreInfoModal_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoModal.OnModalBackout
// (Event, Protected, BlueprintEvent)

void UFortEventMoreInfoModal::OnModalBackout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "OnModalBackout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventMoreInfoModal.SetModalText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      SubHeader                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      Legal                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventMoreInfoModal::SetModalText(const class FText& Header, const class FText& SubHeader, const class FText& Legal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "SetModalText");

	Params::FortEventMoreInfoModal_SetModalText Parms{};

	Parms.Header = std::move(Header);
	Parms.SubHeader = std::move(SubHeader);
	Parms.Legal = std::move(Legal);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventMoreInfoModal.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventMoreInfoModal::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventMoreInfoModal", "GetEventScreenData");

	Params::FortEventMoreInfoModal_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventPurchaseLevelsModal.OnAmountChangeButtonClicked
// (Event, Protected, BlueprintEvent)

void UFortEventPurchaseLevelsModal::OnAmountChangeButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseLevelsModal", "OnAmountChangeButtonClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventPurchaseLevelsModal.OnCMSTextApplied
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      LegalText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventPurchaseLevelsModal::OnCMSTextApplied(const class FText& LegalText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseLevelsModal", "OnCMSTextApplied");

	Params::FortEventPurchaseLevelsModal_OnCMSTextApplied Parms{};

	Parms.LegalText = std::move(LegalText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseLevelsModal.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseLevelsModal::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseLevelsModal", "OnEventScreenDataSet");

	Params::FortEventPurchaseLevelsModal_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseLevelsModal.OnPurchaseAmountChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             TotalPrice                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             LevelQuantity                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             PurchaseQuantity                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ResourceQuantity                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchaseLevelsModal::OnPurchaseAmountChanged(const int32 TotalPrice, const int32 LevelQuantity, const int32 PurchaseQuantity, const int32 ResourceQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseLevelsModal", "OnPurchaseAmountChanged");

	Params::FortEventPurchaseLevelsModal_OnPurchaseAmountChanged Parms{};

	Parms.TotalPrice = TotalPrice;
	Parms.LevelQuantity = LevelQuantity;
	Parms.PurchaseQuantity = PurchaseQuantity;
	Parms.ResourceQuantity = ResourceQuantity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchaseLevelsModal.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventPurchaseLevelsModal::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchaseLevelsModal", "GetEventScreenData");

	Params::FortEventPurchaseLevelsModal_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortPurchasePremiumTrackBody.OnPopulate
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const int32                             BodyIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      BodyText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPurchasePremiumTrackBody::OnPopulate(const int32 BodyIndex, const class FText& BodyText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPurchasePremiumTrackBody", "OnPopulate");

	Params::FortPurchasePremiumTrackBody_OnPopulate Parms{};

	Parms.BodyIndex = BodyIndex;
	Parms.BodyText = std::move(BodyText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnCMSTextApplied
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      HeaderText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      LegalText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventPurchasePremiumTrackModal::OnCMSTextApplied(const class FText& HeaderText, const class FText& LegalText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchasePremiumTrackModal", "OnCMSTextApplied");

	Params::FortEventPurchasePremiumTrackModal_OnCMSTextApplied Parms{};

	Parms.HeaderText = std::move(HeaderText);
	Parms.LegalText = std::move(LegalText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchasePremiumTrackModal::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchasePremiumTrackModal", "OnEventScreenDataSet");

	Params::FortEventPurchasePremiumTrackModal_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchasePremiumTrackModal.OnPriceSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             Price                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventPurchasePremiumTrackModal::OnPriceSet(const int32 Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchasePremiumTrackModal", "OnPriceSet");

	Params::FortEventPurchasePremiumTrackModal_OnPriceSet Parms{};

	Parms.Price = Price;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventPurchasePremiumTrackModal.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventPurchasePremiumTrackModal::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventPurchasePremiumTrackModal", "GetEventScreenData");

	Params::FortEventPurchasePremiumTrackModal_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPOnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPOnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPOnEventScreenDataSet");

	Params::FortEventRewardTracksWidget_BPOnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPOnSetRewardItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             RequiredProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RemainingProgress                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardProgressPercent                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PreviewProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             OverallProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bInPreviewMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPOnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPOnSetRewardItem");

	Params::FortEventRewardTracksWidget_BPOnSetRewardItem Parms{};

	Parms.RequiredProgress = RequiredProgress;
	Parms.RemainingProgress = RemainingProgress;
	Parms.RewardProgressPercent = RewardProgressPercent;
	Parms.PreviewProgressPercent = PreviewProgressPercent;
	Parms.OverallProgressPercent = OverallProgressPercent;
	Parms.bInPreviewMode = bInPreviewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPSetAllRewardsCollected
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bAllCollected                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPSetAllRewardsCollected(const bool bAllCollected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPSetAllRewardsCollected");

	Params::FortEventRewardTracksWidget_BPSetAllRewardsCollected Parms{};

	Parms.bAllCollected = bAllCollected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardTracksWidget.BPSetProgressPercent
// (Event, Protected, BlueprintEvent)
// Parameters:
// const float                             Percent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardTracksWidget::BPSetProgressPercent(const float Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardTracksWidget", "BPSetProgressPercent");

	Params::FortEventRewardTracksWidget_BPSetProgressPercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnEventScreenDataSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnEventScreenDataSet(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnEventScreenDataSet");

	Params::FortEventRewardWidget_OnEventScreenDataSet Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnInputMethodChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const ECommonInputType                  NewInputType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnInputMethodChanged(const ECommonInputType NewInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnInputMethodChanged");

	Params::FortEventRewardWidget_OnInputMethodChanged Parms{};

	Parms.NewInputType = NewInputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.OnRewardWidgetReset
// (Event, Public, BlueprintEvent)

void UFortEventRewardWidget::OnRewardWidgetReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnRewardWidgetReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventRewardWidget.OnSetRewardItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// const int32                             RequiredProgress                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             RemainingProgress                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RewardProgressPercent                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PreviewProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             OverallProgressPercent                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bInPreviewMode                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::OnSetRewardItem(const int32 RequiredProgress, const int32 RemainingProgress, const float RewardProgressPercent, const float PreviewProgressPercent, const float OverallProgressPercent, const bool bInPreviewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "OnSetRewardItem");

	Params::FortEventRewardWidget_OnSetRewardItem Parms{};

	Parms.RequiredProgress = RequiredProgress;
	Parms.RemainingProgress = RemainingProgress;
	Parms.RewardProgressPercent = RewardProgressPercent;
	Parms.PreviewProgressPercent = PreviewProgressPercent;
	Parms.OverallProgressPercent = OverallProgressPercent;
	Parms.bInPreviewMode = bInPreviewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetAllRewardsCollected
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bAllCollected                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetAllRewardsCollected(const bool bAllCollected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetAllRewardsCollected");

	Params::FortEventRewardWidget_SetAllRewardsCollected Parms{};

	Parms.bAllCollected = bAllCollected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetCustomItemIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UTexture2D*                 CustomItemIcon                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetCustomItemIcon(const class UTexture2D* CustomItemIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetCustomItemIcon");

	Params::FortEventRewardWidget_SetCustomItemIcon Parms{};

	Parms.CustomItemIcon = CustomItemIcon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetDoubleWidth
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bDoubleWidth                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetDoubleWidth(const bool bDoubleWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetDoubleWidth");

	Params::FortEventRewardWidget_SetDoubleWidth Parms{};

	Parms.bDoubleWidth = bDoubleWidth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInPremiumUpgradeState
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bHighlighted                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInPremiumUpgradeState(const bool bHighlighted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInPremiumUpgradeState");

	Params::FortEventRewardWidget_SetInPremiumUpgradeState Parms{};

	Parms.bHighlighted = bHighlighted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInPreviewedState
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bPreviewed                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInPreviewedState(const bool bPreviewed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInPreviewedState");

	Params::FortEventRewardWidget_SetInPreviewedState Parms{};

	Parms.bPreviewed = bPreviewed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInPreviewSelectedState
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bSelected                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInPreviewSelectedState(const bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInPreviewSelectedState");

	Params::FortEventRewardWidget_SetInPreviewSelectedState Parms{};

	Parms.bSelected = bSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetInSelectedState
// (Event, Public, BlueprintEvent)
// Parameters:
// const bool                              bSelected                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetInSelectedState(const bool bSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetInSelectedState");

	Params::FortEventRewardWidget_SetInSelectedState Parms{};

	Parms.bSelected = bSelected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetIsBannerItem
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bIsBanner                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetIsBannerItem(const bool bIsBanner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetIsBannerItem");

	Params::FortEventRewardWidget_SetIsBannerItem Parms{};

	Parms.bIsBanner = bIsBanner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetProgressPercent
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             Percent                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetProgressPercent(const float Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetProgressPercent");

	Params::FortEventRewardWidget_SetProgressPercent Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.SetTrackData
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FEventScreenTrackData&     TrackData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const bool                              bIsOwned                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventRewardWidget::SetTrackData(const struct FEventScreenTrackData& TrackData, const bool bIsOwned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "SetTrackData");

	Params::FortEventRewardWidget_SetTrackData Parms{};

	Parms.TrackData = std::move(TrackData);
	Parms.bIsOwned = bIsOwned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventRewardWidget.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventRewardWidget::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventRewardWidget", "GetEventScreenData");

	Params::FortEventRewardWidget_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HandleActiveSeasonDataChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<class FString>&            ActiveEventFlags                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::HandleActiveSeasonDataChanged(const TArray<class FString>& ActiveEventFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleActiveSeasonDataChanged");

	Params::FortEventScreenBase_HandleActiveSeasonDataChanged Parms{};

	Parms.ActiveEventFlags = std::move(ActiveEventFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.HandleGiftBoxClosed
// (Final, Native, Private)

void UFortEventScreenBase::HandleGiftBoxClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleGiftBoxClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.HandleRewardListNavigateRightEvent
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortEventScreenBase::HandleRewardListNavigateRightEvent(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleRewardListNavigateRightEvent");

	Params::FortEventScreenBase_HandleRewardListNavigateRightEvent Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HandleRewardListNavigateUpEvent
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortEventScreenBase::HandleRewardListNavigateUpEvent(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleRewardListNavigateUpEvent");

	Params::FortEventScreenBase_HandleRewardListNavigateUpEvent Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HandleToggleFullscreenMap
// (Final, Native, Private)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::HandleToggleFullscreenMap(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleToggleFullscreenMap");

	Params::FortEventScreenBase_HandleToggleFullscreenMap Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenBase.HandleUpsellPromptNavigateUpEvent
// (Final, Native, Private)
// Parameters:
// EUINavigation                           InNavigation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UFortEventScreenBase::HandleUpsellPromptNavigateUpEvent(EUINavigation InNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HandleUpsellPromptNavigateUpEvent");

	Params::FortEventScreenBase_HandleUpsellPromptNavigateUpEvent Parms{};

	Parms.InNavigation = InNavigation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.OnCalendarEventEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnCalendarEventEnded(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnCalendarEventEnded");

	Params::FortEventScreenBase_OnCalendarEventEnded Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.OnCalendarEventStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnCalendarEventStarted(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnCalendarEventStarted");

	Params::FortEventScreenBase_OnCalendarEventStarted Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.OnFirstViewAfterCompletion
// (Event, Protected, BlueprintEvent)

void UFortEventScreenBase::OnFirstViewAfterCompletion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnFirstViewAfterCompletion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventScreenBase.OnRewardPreviewItemChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortAccountItemDefinition* Item                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bFreeTrack                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnRewardPreviewItemChanged(const class UFortAccountItemDefinition* Item, const bool bFreeTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnRewardPreviewItemChanged");

	Params::FortEventScreenBase_OnRewardPreviewItemChanged Parms{};

	Parms.Item = Item;
	Parms.bFreeTrack = bFreeTrack;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.OnRewardTrackReady
// (Event, Protected, BlueprintEvent)

void UFortEventScreenBase::OnRewardTrackReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnRewardTrackReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventScreenBase.OnScreenViewChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// const EEventScreenView                  PrevScreenView                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EEventScreenView                  NewScreenView                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnScreenViewChanged(const EEventScreenView PrevScreenView, const EEventScreenView NewScreenView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnScreenViewChanged");

	Params::FortEventScreenBase_OnScreenViewChanged Parms{};

	Parms.PrevScreenView = PrevScreenView;
	Parms.NewScreenView = NewScreenView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.OnSetBonusInfo
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FBonusInfoMiniTagData&     BonusInfo                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::OnSetBonusInfo(const struct FBonusInfoMiniTagData& BonusInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "OnSetBonusInfo");

	Params::FortEventScreenBase_OnSetBonusInfo Parms{};

	Parms.BonusInfo = std::move(BonusInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.RegisterLayoutSlots
// (Event, Protected, BlueprintEvent)

void UFortEventScreenBase::RegisterLayoutSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "RegisterLayoutSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function EventScreenBase.FortEventScreenBase.SetItemShopCallout
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      ItemShopCalloutText                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetItemShopCallout(const class FText& ItemShopCalloutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetItemShopCallout");

	Params::FortEventScreenBase_SetItemShopCallout Parms{};

	Parms.ItemShopCalloutText = std::move(ItemShopCalloutText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.SetItemShopOfferInfoVisibility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetItemShopOfferInfoVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetItemShopOfferInfoVisibility");

	Params::FortEventScreenBase_SetItemShopOfferInfoVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.SetRewardTrackLegal
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      LegalText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenBase::SetRewardTrackLegal(const class FText& LegalText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "SetRewardTrackLegal");

	Params::FortEventScreenBase_SetRewardTrackLegal Parms{};

	Parms.LegalText = std::move(LegalText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.UpdateVariantCounter
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   CurrentVariantIndex                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalNumVariants                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenBase::UpdateVariantCounter(int32 CurrentVariantIndex, int32 TotalNumVariants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "UpdateVariantCounter");

	Params::FortEventScreenBase_UpdateVariantCounter Parms{};

	Parms.CurrentVariantIndex = CurrentVariantIndex;
	Parms.TotalNumVariants = TotalNumVariants;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenBase.GetActiveModal
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFortEventModalBase*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFortEventModalBase* UFortEventScreenBase::GetActiveModal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "GetActiveModal");

	Params::FortEventScreenBase_GetActiveModal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.GetEventTimeRemaining
// (Final, Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan UFortEventScreenBase::GetEventTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "GetEventTimeRemaining");

	Params::FortEventScreenBase_GetEventTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.GetVaultWorldBackgroundMID
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UFortEventScreenBase::GetVaultWorldBackgroundMID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "GetVaultWorldBackgroundMID");

	Params::FortEventScreenBase_GetVaultWorldBackgroundMID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.GetVaultWorldFloorMID
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UFortEventScreenBase::GetVaultWorldFloorMID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "GetVaultWorldFloorMID");

	Params::FortEventScreenBase_GetVaultWorldFloorMID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HasAllRewardsCollected
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventScreenBase::HasAllRewardsCollected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HasAllRewardsCollected");

	Params::FortEventScreenBase_HasAllRewardsCollected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.HasPurchasedPremiumTrack
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventScreenBase::HasPurchasedPremiumTrack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "HasPurchasedPremiumTrack");

	Params::FortEventScreenBase_HasPurchasedPremiumTrack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenBase.IsCalendarEventActive
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventScreenBase::IsCalendarEventActive(const class FString& EventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenBase", "IsCalendarEventActive");

	Params::FortEventScreenBase_IsCalendarEventActive Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.EventScreenListView.SetNativeTickAllowed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bAllowed                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventScreenListView::SetNativeTickAllowed(const bool bAllowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventScreenListView", "SetNativeTickAllowed");

	Params::EventScreenListView_SetNativeTickAllowed Parms{};

	Parms.bAllowed = bAllowed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.EventScreenListView.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UEventScreenListView::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventScreenListView", "GetEventScreenData");

	Params::EventScreenListView_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventScreenTeaser.BP_SetCountdownTimeRemaining
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FTimespan&                 TimeRemaining                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenTeaser::BP_SetCountdownTimeRemaining(const struct FTimespan& TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenTeaser", "BP_SetCountdownTimeRemaining");

	Params::FortEventScreenTeaser_BP_SetCountdownTimeRemaining Parms{};

	Parms.TimeRemaining = std::move(TimeRemaining);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenTeaser.HandleActiveSeasonDataChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// const TArray<class FString>&            ActiveEventFlags                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventScreenTeaser::HandleActiveSeasonDataChanged(const TArray<class FString>& ActiveEventFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenTeaser", "HandleActiveSeasonDataChanged");

	Params::FortEventScreenTeaser_HandleActiveSeasonDataChanged Parms{};

	Parms.ActiveEventFlags = std::move(ActiveEventFlags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function EventScreenBase.FortEventScreenTeaser.OnCalendarEventEnded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenTeaser::OnCalendarEventEnded(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenTeaser", "OnCalendarEventEnded");

	Params::FortEventScreenTeaser_OnCalendarEventEnded Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenTeaser.OnCalendarEventStarted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventScreenTeaser::OnCalendarEventStarted(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenTeaser", "OnCalendarEventStarted");

	Params::FortEventScreenTeaser_OnCalendarEventStarted Parms{};

	Parms.EventName = std::move(EventName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventScreenTeaser.IsCalendarEventActive
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventScreenTeaser::IsCalendarEventActive(const class FString& EventName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventScreenTeaser", "IsCalendarEventActive");

	Params::FortEventScreenTeaser_IsCalendarEventActive Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTokenCollectionWidget.OnRefreshIcon
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              IsCollected                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsFirstViewAfterCollection                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTokenCollectionWidget::OnRefreshIcon(const bool IsCollected, const bool bIsFirstViewAfterCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTokenCollectionWidget", "OnRefreshIcon");

	Params::FortEventTokenCollectionWidget_OnRefreshIcon Parms{};

	Parms.IsCollected = IsCollected;
	Parms.bIsFirstViewAfterCollection = bIsFirstViewAfterCollection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule.OnModuleInitialized
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UFortEventScreenData*       InEventScreenData                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule::OnModuleInitialized(const class UFortEventScreenData* InEventScreenData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule", "OnModuleInitialized");

	Params::FortEventTrackerModule_OnModuleInitialized Parms{};

	Parms.InEventScreenData = InEventScreenData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule.GetEventScreenData
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UFortEventScreenData*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UFortEventScreenData* UFortEventTrackerModule::GetEventScreenData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule", "GetEventScreenData");

	Params::FortEventTrackerModule_GetEventScreenData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTrackerModule_EventDetails.OnPopulateEventDetailsText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      OutEventName                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      OutEventDescription                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_EventDetails::OnPopulateEventDetailsText(const class FText& OutEventName, const class FText& OutEventDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_EventDetails", "OnPopulateEventDetailsText");

	Params::FortEventTrackerModule_EventDetails_OnPopulateEventDetailsText Parms{};

	Parms.OutEventName = std::move(OutEventName);
	Parms.OutEventDescription = std::move(OutEventDescription);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_EventDetails.UpdateEventTimeRemaining
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FText&                      EventTimeRemainingText                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FTimespan&                 TimeRemaining                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_EventDetails::UpdateEventTimeRemaining(const class FText& EventTimeRemainingText, const struct FTimespan& TimeRemaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_EventDetails", "UpdateEventTimeRemaining");

	Params::FortEventTrackerModule_EventDetails_UpdateEventTimeRemaining Parms{};

	Parms.EventTimeRemainingText = std::move(EventTimeRemainingText);
	Parms.TimeRemaining = std::move(TimeRemaining);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceHeader
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             ResourceValue                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Header::OnPopulateEventResourceHeader(const class FText& Header, const int32 ResourceValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Header", "OnPopulateEventResourceHeader");

	Params::FortEventTrackerModule_Header_OnPopulateEventResourceHeader Parms{};

	Parms.Header = std::move(Header);
	Parms.ResourceValue = ResourceValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Header.OnPopulateEventResourceStarterHeader
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      Header                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Header::OnPopulateEventResourceStarterHeader(const class FText& Header)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Header", "OnPopulateEventResourceStarterHeader");

	Params::FortEventTrackerModule_Header_OnPopulateEventResourceStarterHeader Parms{};

	Parms.Header = std::move(Header);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateCompletedReward
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              RewardNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardDetails::OnPopulateCompletedReward(const TArray<class FText>& RewardNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "OnPopulateCompletedReward");

	Params::FortEventTrackerModule_RewardDetails_OnPopulateCompletedReward Parms{};

	Parms.RewardNames = std::move(RewardNames);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.OnPopulateNextRewardDetails
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              RewardNames                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             ResourceNeeded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardDetails::OnPopulateNextRewardDetails(const TArray<class FText>& RewardNames, const int32 ResourceNeeded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "OnPopulateNextRewardDetails");

	Params::FortEventTrackerModule_RewardDetails_OnPopulateNextRewardDetails Parms{};

	Parms.RewardNames = std::move(RewardNames);
	Parms.ResourceNeeded = ResourceNeeded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_RewardDetails.IsPremiumTrackOwned
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventTrackerModule_RewardDetails::IsPremiumTrackOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardDetails", "IsPremiumTrackOwned");

	Params::FortEventTrackerModule_RewardDetails_IsPremiumTrackOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTrackerModule_RewardRemaining.OnPopulateRemaining
// (Event, Public, BlueprintEvent)
// Parameters:
// const int32                             ResourceNeeded                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             TotalResourceRequired                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bRequiresPremiumTrackPurchase                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_RewardRemaining::OnPopulateRemaining(const int32 ResourceNeeded, const int32 TotalResourceRequired, const bool bRequiresPremiumTrackPurchase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_RewardRemaining", "OnPopulateRemaining");

	Params::FortEventTrackerModule_RewardRemaining_OnPopulateRemaining Parms{};

	Parms.ResourceNeeded = ResourceNeeded;
	Parms.TotalResourceRequired = TotalResourceRequired;
	Parms.bRequiresPremiumTrackPurchase = bRequiresPremiumTrackPurchase;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_ProgressiveRewards.OnPopulateCompletionMessage
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const bool                              bIsComplete                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      CompletionText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_ProgressiveRewards::OnPopulateCompletionMessage(const bool bIsComplete, const class FText& CompletionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_ProgressiveRewards", "OnPopulateCompletionMessage");

	Params::FortEventTrackerModule_ProgressiveRewards_OnPopulateCompletionMessage Parms{};

	Parms.bIsComplete = bIsComplete;
	Parms.CompletionText = std::move(CompletionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Collection.OnGatherTokenCollectionWidgets
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<class UFortEventTokenCollectionWidget*>*OutCollectionWidgets                                   (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Collection::OnGatherTokenCollectionWidgets(TArray<class UFortEventTokenCollectionWidget*>* OutCollectionWidgets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Collection", "OnGatherTokenCollectionWidgets");

	Params::FortEventTrackerModule_Collection_OnGatherTokenCollectionWidgets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutCollectionWidgets != nullptr)
		*OutCollectionWidgets = std::move(Parms.OutCollectionWidgets);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnCTACompleted
// (Event, Protected, BlueprintEvent)
// Parameters:
// const bool                              bIsComplete                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnCTACompleted(const bool bIsComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnCTACompleted");

	Params::FortEventTrackerModule_Banner_OnCTACompleted Parms{};

	Parms.bIsComplete = bIsComplete;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateBannerText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      BannerText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnPopulateBannerText(const class FText& BannerText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnPopulateBannerText");

	Params::FortEventTrackerModule_Banner_OnPopulateBannerText Parms{};

	Parms.BannerText = std::move(BannerText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_Banner.OnPopulateHeaderCTAText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      HeaderCTAText                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_Banner::OnPopulateHeaderCTAText(const class FText& HeaderCTAText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_Banner", "OnPopulateHeaderCTAText");

	Params::FortEventTrackerModule_Banner_OnPopulateHeaderCTAText Parms{};

	Parms.HeaderCTAText = std::move(HeaderCTAText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.OnIconLoaded
// (Event, Protected, BlueprintEvent)
// Parameters:
// const class UTexture*                   LoadedTexture                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_PremiumUpsell::OnIconLoaded(const class UTexture* LoadedTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_PremiumUpsell", "OnIconLoaded");

	Params::FortEventTrackerModule_PremiumUpsell_OnIconLoaded Parms{};

	Parms.LoadedTexture = LoadedTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.OnPopulateText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      HeaderText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      BodyText                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_PremiumUpsell::OnPopulateText(const class FText& HeaderText, const class FText& BodyText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_PremiumUpsell", "OnPopulateText");

	Params::FortEventTrackerModule_PremiumUpsell_OnPopulateText Parms{};

	Parms.HeaderText = std::move(HeaderText);
	Parms.BodyText = std::move(BodyText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function EventScreenBase.FortEventTrackerModule_PremiumUpsell.IsPremiumTrackOwned
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortEventTrackerModule_PremiumUpsell::IsPremiumTrackOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_PremiumUpsell", "IsPremiumTrackOwned");

	Params::FortEventTrackerModule_PremiumUpsell_IsPremiumTrackOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function EventScreenBase.FortEventTrackerModule_CustomText.OnPopulateText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      CustomText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortEventTrackerModule_CustomText::OnPopulateText(const class FText& CustomText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortEventTrackerModule_CustomText", "OnPopulateText");

	Params::FortEventTrackerModule_CustomText_OnPopulateText Parms{};

	Parms.CustomText = std::move(CustomText);

	UObject::ProcessEvent(Func, &Parms);
}

}

