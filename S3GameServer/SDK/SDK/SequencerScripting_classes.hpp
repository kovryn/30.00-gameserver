#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequencerScripting

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "MovieScene_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SequencerScripting.MovieSceneScriptingKey
// 0x0018 (0x0040 - 0x0028)
class UMovieSceneScriptingKey : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingKey">();
	}
	static class UMovieSceneScriptingKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingActorReferenceKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingActorReferenceKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(const struct FMovieSceneObjectBindingID& InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	struct FMovieSceneObjectBindingID GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingActorReferenceKey">();
	}
	static class UMovieSceneScriptingActorReferenceKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingActorReferenceKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingChannel
// 0x0008 (0x0030 - 0x0028)
class UMovieSceneScriptingChannel : public UObject
{
public:
	class FName                                   ChannelName;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingChannel">();
	}
	static class UMovieSceneScriptingChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingActorReferenceChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingActorReferenceChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingActorReferenceKey* AddKey(const struct FFrameNumber& InTime, const struct FMovieSceneObjectBindingID& NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(const struct FMovieSceneObjectBindingID& InDefaultValue);

	struct FMovieSceneObjectBindingID GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingActorReferenceChannel">();
	}
	static class UMovieSceneScriptingActorReferenceChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingActorReferenceChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingBoolKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingBoolKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(bool InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	bool GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingBoolKey">();
	}
	static class UMovieSceneScriptingBoolKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingBoolKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingBoolChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingBoolChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingBoolKey* AddKey(const struct FFrameNumber& InTime, bool NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(bool InDefaultValue);

	struct FSequencerScriptingRange ComputeEffectiveRange() const;
	TArray<bool> EvaluateKeys(const struct FSequencerScriptingRange& Range, const struct FFrameRate& FrameRate) const;
	bool GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	int32 GetNumKeys() const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingBoolChannel">();
	}
	static class UMovieSceneScriptingBoolChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingBoolChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingByteKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingByteKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(uint8 InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	uint8 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingByteKey">();
	}
	static class UMovieSceneScriptingByteKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingByteKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingByteChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingByteChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingByteKey* AddKey(const struct FFrameNumber& InTime, uint8 NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit, EMovieSceneKeyInterpolation InInterpolation);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(uint8 InDefaultValue);

	uint8 GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingByteChannel">();
	}
	static class UMovieSceneScriptingByteChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingByteChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingDoubleKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingDoubleKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetArriveTangent(float InNewValue);
	void SetArriveTangentWeight(float InNewValue);
	void SetInterpolationMode(ERichCurveInterpMode InNewValue);
	void SetLeaveTangent(float InNewValue);
	void SetLeaveTangentWeight(float InNewValue);
	void SetTangentMode(ERichCurveTangentMode InNewValue);
	void SetTangentWeightMode(ERichCurveTangentWeightMode InNewValue);
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(double InNewValue);

	float GetArriveTangent() const;
	float GetArriveTangentWeight() const;
	ERichCurveInterpMode GetInterpolationMode() const;
	float GetLeaveTangent() const;
	float GetLeaveTangentWeight() const;
	ERichCurveTangentMode GetTangentMode() const;
	ERichCurveTangentWeightMode GetTangentWeightMode() const;
	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	double GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingDoubleKey">();
	}
	static class UMovieSceneScriptingDoubleKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingDoubleKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingDoubleChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingDoubleChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingDoubleKey* AddKey(const struct FFrameNumber& InTime, double NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit, EMovieSceneKeyInterpolation InInterpolation);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(double InDefaultValue);
	void SetPostInfinityExtrapolation(ERichCurveExtrapolation InExtrapolation);
	void SetPreInfinityExtrapolation(ERichCurveExtrapolation InExtrapolation);

	struct FSequencerScriptingRange ComputeEffectiveRange() const;
	TArray<double> EvaluateKeys(const struct FSequencerScriptingRange& Range, const struct FFrameRate& FrameRate) const;
	double GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	int32 GetNumKeys() const;
	ERichCurveExtrapolation GetPostInfinityExtrapolation() const;
	ERichCurveExtrapolation GetPreInfinityExtrapolation() const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingDoubleChannel">();
	}
	static class UMovieSceneScriptingDoubleChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingDoubleChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingEventKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingEventKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(const struct FMovieSceneEvent& InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	struct FMovieSceneEvent GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingEventKey">();
	}
	static class UMovieSceneScriptingEventKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingEventKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingEventChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingEventChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingEventKey* AddKey(const struct FFrameNumber& InTime, const struct FMovieSceneEvent& NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveKey(class UMovieSceneScriptingKey* Key);

	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingEventChannel">();
	}
	static class UMovieSceneScriptingEventChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingEventChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingFloatKey
// 0x0000 (0x0040 - 0x0040)
class UMovieSceneScriptingFloatKey : public UMovieSceneScriptingKey
{
public:
	void SetArriveTangent(float InNewValue);
	void SetArriveTangentWeight(float InNewValue);
	void SetInterpolationMode(ERichCurveInterpMode InNewValue);
	void SetLeaveTangent(float InNewValue);
	void SetLeaveTangentWeight(float InNewValue);
	void SetTangentMode(ERichCurveTangentMode InNewValue);
	void SetTangentWeightMode(ERichCurveTangentWeightMode InNewValue);
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(float InNewValue);

	float GetArriveTangent() const;
	float GetArriveTangentWeight() const;
	ERichCurveInterpMode GetInterpolationMode() const;
	float GetLeaveTangent() const;
	float GetLeaveTangentWeight() const;
	ERichCurveTangentMode GetTangentMode() const;
	ERichCurveTangentWeightMode GetTangentWeightMode() const;
	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingFloatKey">();
	}
	static class UMovieSceneScriptingFloatKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingFloatKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingActualFloatKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingActualFloatKey final : public UMovieSceneScriptingFloatKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingActualFloatKey">();
	}
	static class UMovieSceneScriptingActualFloatKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingActualFloatKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingDoubleAsFloatKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingDoubleAsFloatKey final : public UMovieSceneScriptingFloatKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingDoubleAsFloatKey">();
	}
	static class UMovieSceneScriptingDoubleAsFloatKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingDoubleAsFloatKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingFloatChannel
// 0x0040 (0x0070 - 0x0030)
class UMovieSceneScriptingFloatChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingFloatKey* AddKey(const struct FFrameNumber& InTime, float NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit, EMovieSceneKeyInterpolation InInterpolation);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(float InDefaultValue);
	void SetPostInfinityExtrapolation(ERichCurveExtrapolation InExtrapolation);
	void SetPreInfinityExtrapolation(ERichCurveExtrapolation InExtrapolation);

	struct FSequencerScriptingRange ComputeEffectiveRange() const;
	TArray<float> EvaluateKeys(const struct FSequencerScriptingRange& Range, const struct FFrameRate& FrameRate) const;
	float GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	int32 GetNumKeys() const;
	ERichCurveExtrapolation GetPostInfinityExtrapolation() const;
	ERichCurveExtrapolation GetPreInfinityExtrapolation() const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingFloatChannel">();
	}
	static class UMovieSceneScriptingFloatChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingFloatChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingIntegerKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingIntegerKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(int32 InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	int32 GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingIntegerKey">();
	}
	static class UMovieSceneScriptingIntegerKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingIntegerKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingIntegerChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingIntegerChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingIntegerKey* AddKey(const struct FFrameNumber& InTime, int32 NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(int32 InDefaultValue);

	TArray<int32> EvaluateKeys(const struct FSequencerScriptingRange& Range, const struct FFrameRate& FrameRate) const;
	int32 GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	int32 GetNumKeys() const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingIntegerChannel">();
	}
	static class UMovieSceneScriptingIntegerChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingIntegerChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingObjectPathKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingObjectPathKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(class UObject* InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	class UObject* GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingObjectPathKey">();
	}
	static class UMovieSceneScriptingObjectPathKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingObjectPathKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingObjectPathChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingObjectPathChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingObjectPathKey* AddKey(const struct FFrameNumber& InTime, class UObject* NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(class UObject* InDefaultValue);

	class UObject* GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingObjectPathChannel">();
	}
	static class UMovieSceneScriptingObjectPathChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingObjectPathChannel>();
	}
};

// Class SequencerScripting.MovieSceneScriptingStringKey
// 0x0018 (0x0058 - 0x0040)
class UMovieSceneScriptingStringKey final : public UMovieSceneScriptingKey
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTime(const struct FFrameNumber& NewFrameNumber, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void SetValue(const class FString& InNewValue);

	struct FFrameTime GetTime(EMovieSceneTimeUnit TimeUnit) const;
	class FString GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingStringKey">();
	}
	static class UMovieSceneScriptingStringKey* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingStringKey>();
	}
};

// Class SequencerScripting.MovieSceneScriptingStringChannel
// 0x0028 (0x0058 - 0x0030)
class UMovieSceneScriptingStringChannel final : public UMovieSceneScriptingChannel
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMovieSceneScriptingStringKey* AddKey(const struct FFrameNumber& InTime, const class FString& NewValue, float SubFrame, EMovieSceneTimeUnit TimeUnit);
	void RemoveDefault();
	void RemoveKey(class UMovieSceneScriptingKey* Key);
	void SetDefault(const class FString& InDefaultValue);

	class FString GetDefault() const;
	TArray<class UMovieSceneScriptingKey*> GetKeys() const;
	TArray<class UMovieSceneScriptingKey*> GetKeysByIndex(const TArray<int32>& Indices) const;
	bool HasDefault() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneScriptingStringChannel">();
	}
	static class UMovieSceneScriptingStringChannel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneScriptingStringChannel>();
	}
};

// Class SequencerScripting.MovieSceneBindingExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneBindingExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UMovieSceneTrack* AddTrack(const struct FMovieSceneBindingProxy& InBinding, TSubclassOf<class UMovieSceneTrack> TrackType);
	static TArray<class UMovieSceneTrack*> FindTracksByExactType(const struct FMovieSceneBindingProxy& InBinding, TSubclassOf<class UMovieSceneTrack> TrackType);
	static TArray<class UMovieSceneTrack*> FindTracksByType(const struct FMovieSceneBindingProxy& InBinding, TSubclassOf<class UMovieSceneTrack> TrackType);
	static TArray<struct FMovieSceneBindingProxy> GetChildPossessables(const struct FMovieSceneBindingProxy& InBinding);
	static class FText GetDisplayName(const struct FMovieSceneBindingProxy& InBinding);
	static struct FGuid GetId(const struct FMovieSceneBindingProxy& InBinding);
	static class FString GetName(const struct FMovieSceneBindingProxy& InBinding);
	static class UObject* GetObjectTemplate(const struct FMovieSceneBindingProxy& InBinding);
	static struct FMovieSceneBindingProxy GetParent(const struct FMovieSceneBindingProxy& InBinding);
	static class UClass* GetPossessedObjectClass(const struct FMovieSceneBindingProxy& InBinding);
	static int32 GetSortingOrder(const struct FMovieSceneBindingProxy& InBinding);
	static TArray<class UMovieSceneTrack*> GetTracks(const struct FMovieSceneBindingProxy& InBinding);
	static bool IsValid(const struct FMovieSceneBindingProxy& InBinding);
	static void MoveBindingContents(const struct FMovieSceneBindingProxy& SourceBindingId, const struct FMovieSceneBindingProxy& DestinationBindingId);
	static void Remove(const struct FMovieSceneBindingProxy& InBinding);
	static void RemoveTrack(const struct FMovieSceneBindingProxy& InBinding, class UMovieSceneTrack* TrackToRemove);
	static void SetDisplayName(const struct FMovieSceneBindingProxy& InBinding, const class FText& InDisplayName);
	static void SetName(const struct FMovieSceneBindingProxy& InBinding, const class FString& InName);
	static void SetParent(const struct FMovieSceneBindingProxy& InBinding, const struct FMovieSceneBindingProxy& InParentBinding);
	static void SetSortingOrder(const struct FMovieSceneBindingProxy& InBinding, int32 SortingOrder);
	static void SetSpawnableBindingID(const struct FMovieSceneBindingProxy& InBinding, const struct FMovieSceneObjectBindingID& SpawnableBindingID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneBindingExtensions">();
	}
	static class UMovieSceneBindingExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneBindingExtensions>();
	}
};

// Class SequencerScripting.MovieSceneEventTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneEventTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UMovieSceneEventRepeaterSection* AddEventRepeaterSection(class UMovieSceneEventTrack* InTrack);
	static class UMovieSceneEventTriggerSection* AddEventTriggerSection(class UMovieSceneEventTrack* InTrack);
	static class UClass* GetBoundObjectPropertyClass(const struct FMovieSceneEvent& EventKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneEventTrackExtensions">();
	}
	static class UMovieSceneEventTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneEventTrackExtensions>();
	}
};

// Class SequencerScripting.MovieSceneFolderExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneFolderExtensions final : public UBlueprintFunctionLibrary
{
public:
	static bool AddChildFolder(class UMovieSceneFolder* TargetFolder, class UMovieSceneFolder* FolderToAdd);
	static bool AddChildMasterTrack(class UMovieSceneFolder* Folder, class UMovieSceneTrack* InTrack);
	static bool AddChildObjectBinding(class UMovieSceneFolder* Folder, const struct FMovieSceneBindingProxy& InObjectBinding);
	static bool AddChildTrack(class UMovieSceneFolder* Folder, class UMovieSceneTrack* InTrack);
	static TArray<class UMovieSceneFolder*> GetChildFolders(class UMovieSceneFolder* Folder);
	static TArray<class UMovieSceneTrack*> GetChildMasterTracks(class UMovieSceneFolder* Folder);
	static TArray<struct FMovieSceneBindingProxy> GetChildObjectBindings(class UMovieSceneFolder* Folder);
	static TArray<class UMovieSceneTrack*> GetChildTracks(class UMovieSceneFolder* Folder);
	static struct FColor GetFolderColor(class UMovieSceneFolder* Folder);
	static class FName GetFolderName(class UMovieSceneFolder* Folder);
	static bool RemoveChildFolder(class UMovieSceneFolder* TargetFolder, class UMovieSceneFolder* FolderToRemove);
	static bool RemoveChildMasterTrack(class UMovieSceneFolder* Folder, class UMovieSceneTrack* InTrack);
	static bool RemoveChildObjectBinding(class UMovieSceneFolder* Folder, const struct FMovieSceneBindingProxy& InObjectBinding);
	static bool RemoveChildTrack(class UMovieSceneFolder* Folder, class UMovieSceneTrack* InTrack);
	static bool SetFolderColor(class UMovieSceneFolder* Folder, const struct FColor& InFolderColor);
	static bool SetFolderName(class UMovieSceneFolder* Folder, class FName InFolderName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFolderExtensions">();
	}
	static class UMovieSceneFolderExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFolderExtensions>();
	}
};

// Class SequencerScripting.MovieSceneMaterialTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneMaterialTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetMaterialIndex(class UMovieSceneComponentMaterialTrack* Track);
	static struct FComponentMaterialInfo GetMaterialInfo(class UMovieSceneComponentMaterialTrack* Track);
	static void SetMaterialIndex(class UMovieSceneComponentMaterialTrack* Track, const int32 MaterialIndex);
	static void SetMaterialInfo(class UMovieSceneComponentMaterialTrack* Track, const struct FComponentMaterialInfo& MaterialInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneMaterialTrackExtensions">();
	}
	static class UMovieSceneMaterialTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneMaterialTrackExtensions>();
	}
};

// Class SequencerScripting.MovieScenePrimitiveMaterialTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieScenePrimitiveMaterialTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetMaterialIndex(class UMovieScenePrimitiveMaterialTrack* Track);
	static struct FComponentMaterialInfo GetMaterialInfo(class UMovieScenePrimitiveMaterialTrack* Track);
	static void SetMaterialIndex(class UMovieScenePrimitiveMaterialTrack* Track, const int32 MaterialIndex);
	static void SetMaterialInfo(class UMovieScenePrimitiveMaterialTrack* Track, const struct FComponentMaterialInfo& MaterialInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePrimitiveMaterialTrackExtensions">();
	}
	static class UMovieScenePrimitiveMaterialTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePrimitiveMaterialTrackExtensions>();
	}
};

// Class SequencerScripting.MovieScenePropertyTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieScenePropertyTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UEnum* GetByteTrackEnum(class UMovieSceneByteTrack* Track);
	static class UClass* GetObjectPropertyClass(class UMovieSceneObjectPropertyTrack* Track);
	static class FName GetPropertyName(class UMovieScenePropertyTrack* Track);
	static class FString GetPropertyPath(class UMovieScenePropertyTrack* Track);
	static class FName GetUniqueTrackName(class UMovieScenePropertyTrack* Track);
	static void SetByteTrackEnum(class UMovieSceneByteTrack* Track, class UEnum* InEnum);
	static void SetObjectPropertyClass(class UMovieSceneObjectPropertyTrack* Track, class UClass* PropertyClass);
	static void SetPropertyNameAndPath(class UMovieScenePropertyTrack* Track, const class FName& InPropertyName, const class FString& InPropertyPath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieScenePropertyTrackExtensions">();
	}
	static class UMovieScenePropertyTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieScenePropertyTrackExtensions>();
	}
};

// Class SequencerScripting.MovieSceneSectionExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneSectionExtensions final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class UMovieSceneScriptingChannel*> GetAllChannels(class UMovieSceneSection* Section);
	static int32 GetAutoSizeEndFrame(class UMovieSceneSection* Section);
	static float GetAutoSizeEndFrameSeconds(class UMovieSceneSection* Section);
	static bool GetAutoSizeHasEndFrame(class UMovieSceneSection* Section);
	static bool GetAutoSizeHasStartFrame(class UMovieSceneSection* Section);
	static int32 GetAutoSizeStartFrame(class UMovieSceneSection* Section);
	static float GetAutoSizeStartFrameSeconds(class UMovieSceneSection* Section);
	static class UMovieSceneScriptingChannel* GetChannel(class UMovieSceneSection* Section, const class FName& ChannelName);
	static TArray<class UMovieSceneScriptingChannel*> GetChannelsByType(class UMovieSceneSection* Section, TSubclassOf<class UMovieSceneScriptingChannel> ChannelType);
	static int32 GetEndFrame(class UMovieSceneSection* Section);
	static float GetEndFrameSeconds(class UMovieSceneSection* Section);
	static int32 GetParentSequenceFrame(class UMovieSceneSubSection* Section, int32 InFrame, class UMovieSceneSequence* ParentSequence);
	static int32 GetStartFrame(class UMovieSceneSection* Section);
	static float GetStartFrameSeconds(class UMovieSceneSection* Section);
	static bool HasEndFrame(class UMovieSceneSection* Section);
	static bool HasStartFrame(class UMovieSceneSection* Section);
	static void SetEndFrame(class UMovieSceneSection* Section, int32 EndFrame);
	static void SetEndFrameBounded(class UMovieSceneSection* Section, bool bIsBounded);
	static void SetEndFrameSeconds(class UMovieSceneSection* Section, float EndTime);
	static void SetRange(class UMovieSceneSection* Section, int32 StartFrame, int32 EndFrame);
	static void SetRangeSeconds(class UMovieSceneSection* Section, float StartTime, float EndTime);
	static void SetStartFrame(class UMovieSceneSection* Section, int32 StartFrame);
	static void SetStartFrameBounded(class UMovieSceneSection* Section, bool bIsBounded);
	static void SetStartFrameSeconds(class UMovieSceneSection* Section, float StartTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSectionExtensions">();
	}
	static class UMovieSceneSectionExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSectionExtensions>();
	}
};

// Class SequencerScripting.MovieSceneSequenceExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneSequenceExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 AddMarkedFrame(class UMovieSceneSequence* Sequence, const struct FMovieSceneMarkedFrame& InMarkedFrame);
	static int32 AddMarkedFrameToSequence(class UMovieSceneSequence* Sequence, const struct FMovieSceneMarkedFrame& InMarkedFrame, EMovieSceneTimeUnit TimeUnit);
	static class UMovieSceneTrack* AddMasterTrack(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static struct FMovieSceneBindingProxy AddPossessable(class UMovieSceneSequence* Sequence, class UObject* ObjectToPossess);
	static class UMovieSceneFolder* AddRootFolderToSequence(class UMovieSceneSequence* Sequence, const class FString& NewFolderName);
	static struct FMovieSceneBindingProxy AddSpawnableFromClass(class UMovieSceneSequence* Sequence, class UClass* ClassToSpawn);
	static struct FMovieSceneBindingProxy AddSpawnableFromInstance(class UMovieSceneSequence* Sequence, class UObject* ObjectToSpawn);
	static class UMovieSceneTrack* AddTrack(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static bool AreMarkedFramesLocked(class UMovieSceneSequence* Sequence);
	static void DeleteMarkedFrame(class UMovieSceneSequence* Sequence, int32 DeleteIndex);
	static void DeleteMarkedFrames(class UMovieSceneSequence* Sequence);
	static struct FMovieSceneBindingProxy FindBindingById(class UMovieSceneSequence* Sequence, const struct FGuid& BindingID);
	static struct FMovieSceneBindingProxy FindBindingByName(class UMovieSceneSequence* Sequence, const class FString& Name_0);
	static int32 FindMarkedFrameByFrameNumber(class UMovieSceneSequence* Sequence, const struct FFrameNumber& InFrameNumber);
	static int32 FindMarkedFrameByFrameNumberInSequence(class UMovieSceneSequence* Sequence, const struct FFrameNumber& InFrameNumber, EMovieSceneTimeUnit TimeUnit);
	static int32 FindMarkedFrameByLabel(class UMovieSceneSequence* Sequence, const class FString& InLabel);
	static TArray<class UMovieSceneTrack*> FindMasterTracksByExactType(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static TArray<class UMovieSceneTrack*> FindMasterTracksByType(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static int32 FindNextMarkedFrame(class UMovieSceneSequence* Sequence, const struct FFrameNumber& InFrameNumber, bool bForward);
	static int32 FindNextMarkedFrameInSequence(class UMovieSceneSequence* Sequence, const struct FFrameNumber& InFrameNumber, bool bForward, EMovieSceneTimeUnit TimeUnit);
	static TArray<class UMovieSceneTrack*> FindTracksByExactType(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static TArray<class UMovieSceneTrack*> FindTracksByType(class UMovieSceneSequence* Sequence, TSubclassOf<class UMovieSceneTrack> TrackType);
	static struct FMovieSceneObjectBindingID GetBindingID(class UMovieSceneSequence* Sequence, const struct FMovieSceneBindingProxy& InBinding);
	static TArray<struct FMovieSceneBindingProxy> GetBindings(class UMovieSceneSequence* Sequence);
	static EUpdateClockSource GetClockSource(class UMovieSceneSequence* InSequence);
	static struct FFrameRate GetDisplayRate(class UMovieSceneSequence* Sequence);
	static EMovieSceneEvaluationType GetEvaluationType(class UMovieSceneSequence* InSequence);
	static TArray<struct FMovieSceneMarkedFrame> GetMarkedFrames(class UMovieSceneSequence* Sequence);
	static TArray<struct FMovieSceneMarkedFrame> GetMarkedFramesFromSequence(class UMovieSceneSequence* Sequence, EMovieSceneTimeUnit TimeUnit);
	static TArray<class UMovieSceneTrack*> GetMasterTracks(class UMovieSceneSequence* Sequence);
	static class UMovieScene* GetMovieScene(class UMovieSceneSequence* Sequence);
	static int32 GetPlaybackEnd(class UMovieSceneSequence* Sequence);
	static float GetPlaybackEndSeconds(class UMovieSceneSequence* Sequence);
	static struct FSequencerScriptingRange GetPlaybackRange(class UMovieSceneSequence* Sequence);
	static int32 GetPlaybackStart(class UMovieSceneSequence* Sequence);
	static float GetPlaybackStartSeconds(class UMovieSceneSequence* Sequence);
	static struct FMovieSceneObjectBindingID GetPortableBindingID(class UMovieSceneSequence* RootSequence, class UMovieSceneSequence* DestinationSequence, const struct FMovieSceneBindingProxy& InBinding);
	static TArray<struct FMovieSceneBindingProxy> GetPossessables(class UMovieSceneSequence* Sequence);
	static TArray<class UMovieSceneFolder*> GetRootFoldersInSequence(class UMovieSceneSequence* Sequence);
	static TArray<struct FMovieSceneBindingProxy> GetSpawnables(class UMovieSceneSequence* Sequence);
	static struct FFrameRate GetTickResolution(class UMovieSceneSequence* Sequence);
	static TArray<class UMovieSceneTrack*> GetTracks(class UMovieSceneSequence* Sequence);
	static double GetViewRangeEnd(class UMovieSceneSequence* InSequence);
	static double GetViewRangeStart(class UMovieSceneSequence* InSequence);
	static double GetWorkRangeEnd(class UMovieSceneSequence* InSequence);
	static double GetWorkRangeStart(class UMovieSceneSequence* InSequence);
	static bool IsPlaybackRangeLocked(class UMovieSceneSequence* Sequence);
	static bool IsReadOnly(class UMovieSceneSequence* Sequence);
	static TArray<class UObject*> LocateBoundObjects(class UMovieSceneSequence* Sequence, const struct FMovieSceneBindingProxy& InBinding, class UObject* Context);
	static struct FSequencerScriptingRange MakeRange(class UMovieSceneSequence* Sequence, int32 StartFrame, int32 duration);
	static struct FSequencerScriptingRange MakeRangeSeconds(class UMovieSceneSequence* Sequence, float StartTime, float duration);
	static bool RemoveMasterTrack(class UMovieSceneSequence* Sequence, class UMovieSceneTrack* Track);
	static void RemoveRootFolderFromSequence(class UMovieSceneSequence* Sequence, class UMovieSceneFolder* Folder);
	static bool RemoveTrack(class UMovieSceneSequence* Sequence, class UMovieSceneTrack* Track);
	static struct FMovieSceneBindingProxy ResolveBindingID(class UMovieSceneSequence* RootSequence, const struct FMovieSceneObjectBindingID& InObjectBindingID);
	static void SetClockSource(class UMovieSceneSequence* InSequence, EUpdateClockSource InClockSource);
	static void SetDisplayRate(class UMovieSceneSequence* Sequence, const struct FFrameRate& DisplayRate);
	static void SetEvaluationType(class UMovieSceneSequence* InSequence, EMovieSceneEvaluationType InEvaluationType);
	static void SetMarkedFrame(class UMovieSceneSequence* Sequence, int32 InMarkIndex, const struct FFrameNumber& InFrameNumber);
	static void SetMarkedFrameInSequence(class UMovieSceneSequence* Sequence, int32 InMarkIndex, const struct FFrameNumber& InFrameNumber, EMovieSceneTimeUnit TimeUnit);
	static void SetMarkedFramesLocked(class UMovieSceneSequence* Sequence, bool bInLocked);
	static void SetPlaybackEnd(class UMovieSceneSequence* Sequence, int32 EndFrame);
	static void SetPlaybackEndSeconds(class UMovieSceneSequence* Sequence, float EndTime);
	static void SetPlaybackRangeLocked(class UMovieSceneSequence* Sequence, bool bInLocked);
	static void SetPlaybackStart(class UMovieSceneSequence* Sequence, int32 StartFrame);
	static void SetPlaybackStartSeconds(class UMovieSceneSequence* Sequence, float StartTime);
	static void SetReadOnly(class UMovieSceneSequence* Sequence, bool bInReadOnly);
	static void SetTickResolution(class UMovieSceneSequence* Sequence, const struct FFrameRate& TickResolution);
	static void SetTickResolutionDirectly(class UMovieSceneSequence* Sequence, const struct FFrameRate& TickResolution);
	static void SetViewRangeEnd(class UMovieSceneSequence* InSequence, double EndTimeInSeconds);
	static void SetViewRangeStart(class UMovieSceneSequence* InSequence, double StartTimeInSeconds);
	static void SetWorkRangeEnd(class UMovieSceneSequence* InSequence, double EndTimeInSeconds);
	static void SetWorkRangeStart(class UMovieSceneSequence* InSequence, double StartTimeInSeconds);
	static void SortMarkedFrames(class UMovieSceneSequence* Sequence);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneSequenceExtensions">();
	}
	static class UMovieSceneSequenceExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneSequenceExtensions>();
	}
};

// Class SequencerScripting.MovieSceneTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static class UMovieSceneSection* AddSection(class UMovieSceneTrack* Track);
	static struct FColor GetColorTint(class UMovieSceneTrack* Track);
	static class FText GetDisplayName(class UMovieSceneTrack* Track);
	static TArray<class UMovieSceneSection*> GetSections(class UMovieSceneTrack* Track);
	static class UMovieSceneSection* GetSectionToKey(class UMovieSceneTrack* Track);
	static int32 GetSortingOrder(class UMovieSceneTrack* Track);
	static class FText GetTrackRowDisplayName(class UMovieSceneTrack* Track, int32 RowIndex);
	static void RemoveSection(class UMovieSceneTrack* Track, class UMovieSceneSection* Section);
	static void SetColorTint(class UMovieSceneTrack* Track, const struct FColor& ColorTint);
	static void SetDisplayName(class UMovieSceneTrack* Track, const class FText& InName);
	static void SetSectionToKey(class UMovieSceneTrack* Track, class UMovieSceneSection* Section);
	static void SetSortingOrder(class UMovieSceneTrack* Track, int32 SortingOrder);
	static void SetTrackRowDisplayName(class UMovieSceneTrack* Track, const class FText& InName, int32 RowIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneTrackExtensions">();
	}
	static class UMovieSceneTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneTrackExtensions>();
	}
};

// Class SequencerScripting.MovieSceneFloatVectorTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneFloatVectorTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetNumChannelsUsed(class UMovieSceneFloatVectorTrack* Track);
	static void SetNumChannelsUsed(class UMovieSceneFloatVectorTrack* Track, int32 InNumChannelsUsed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneFloatVectorTrackExtensions">();
	}
	static class UMovieSceneFloatVectorTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneFloatVectorTrackExtensions>();
	}
};

// Class SequencerScripting.MovieSceneDoubleVectorTrackExtensions
// 0x0000 (0x0028 - 0x0028)
class UMovieSceneDoubleVectorTrackExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetNumChannelsUsed(class UMovieSceneDoubleVectorTrack* Track);
	static void SetNumChannelsUsed(class UMovieSceneDoubleVectorTrack* Track, int32 InNumChannelsUsed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneDoubleVectorTrackExtensions">();
	}
	static class UMovieSceneDoubleVectorTrackExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneDoubleVectorTrackExtensions>();
	}
};

// Class SequencerScripting.SequencerScriptingRangeExtensions
// 0x0000 (0x0028 - 0x0028)
class USequencerScriptingRangeExtensions final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetEndFrame(const struct FSequencerScriptingRange& Range);
	static float GetEndSeconds(const struct FSequencerScriptingRange& Range);
	static int32 GetStartFrame(const struct FSequencerScriptingRange& Range);
	static float GetStartSeconds(const struct FSequencerScriptingRange& Range);
	static bool HasEnd(const struct FSequencerScriptingRange& Range);
	static bool HasStart(const struct FSequencerScriptingRange& Range);
	static void RemoveEnd(struct FSequencerScriptingRange& Range);
	static void RemoveStart(struct FSequencerScriptingRange& Range);
	static void SetEndFrame(struct FSequencerScriptingRange& Range, int32 End);
	static void SetEndSeconds(struct FSequencerScriptingRange& Range, float End);
	static void SetStartFrame(struct FSequencerScriptingRange& Range, int32 Start);
	static void SetStartSeconds(struct FSequencerScriptingRange& Range, float Start);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SequencerScriptingRangeExtensions">();
	}
	static class USequencerScriptingRangeExtensions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USequencerScriptingRangeExtensions>();
	}
};

}

