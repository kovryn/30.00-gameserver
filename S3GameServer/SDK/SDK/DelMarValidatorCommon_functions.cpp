#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarValidatorCommon

#include "Basic.hpp"

#include "DelMarValidatorCommon_classes.hpp"
#include "DelMarValidatorCommon_parameters.hpp"


namespace SDK
{

// Function DelMarValidatorCommon.DelMarWorldValidator_Task.AddError
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Msg                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarWorldValidator_Task::AddError(const class FText& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "AddError");

	Params::DelMarWorldValidator_Task_AddError Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.AddErrorTokenized
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Msg                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarWorldValidator_Task::AddErrorTokenized(const class UObject* InAsset, const class FText& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "AddErrorTokenized");

	Params::DelMarWorldValidator_Task_AddErrorTokenized Parms{};

	Parms.InAsset = InAsset;
	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.AddWarning
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      Msg                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarWorldValidator_Task::AddWarning(const class FText& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "AddWarning");

	Params::DelMarWorldValidator_Task_AddWarning Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.AddWarningTokenized
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    InAsset                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      Msg                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarWorldValidator_Task::AddWarningTokenized(const class UObject* InAsset, const class FText& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "AddWarningTokenized");

	Params::DelMarWorldValidator_Task_AddWarningTokenized Parms{};

	Parms.InAsset = InAsset;
	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.LogString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarWorldValidator_Task::LogString(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "LogString");

	Params::DelMarWorldValidator_Task_LogString Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.ValidateDelMarWorld
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDelMarWorldValidator_Task::ValidateDelMarWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "ValidateDelMarWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.ValidateDelMarWorld_ClientOnly
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDelMarWorldValidator_Task::ValidateDelMarWorld_ClientOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "ValidateDelMarWorld_ClientOnly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarValidatorCommon.DelMarWorldValidator_Task.ValidateDelMarWorld_CookOnly
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UDelMarWorldValidator_Task::ValidateDelMarWorld_CookOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarWorldValidator_Task", "ValidateDelMarWorld_CookOnly");

	UObject::ProcessEvent(Func, nullptr);
}

}

