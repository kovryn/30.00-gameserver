#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SunRoseFlyingRuntime

#include "Basic.hpp"

#include "SunRoseFlyingRuntime_classes.hpp"
#include "SunRoseFlyingRuntime_parameters.hpp"


namespace SDK
{

// Function SunRoseFlyingRuntime.AFortGameplayCueNotifyLoop_SunroseFlying.SetFlappingParameters
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UFXSystemComponent*               FlyingTrailFX                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UAudioComponent*>&   AudioComponents                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const class AFortPlayerPawn*            PlayerPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             FlappingAlpha                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RollCombined                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RollingAlpha                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PitchAlpha                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsBoosting                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsAscending                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bAllowWingFlap                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsSkimming                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsDiving                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             CurrentHeight                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAFortGameplayCueNotifyLoop_SunroseFlying::SetFlappingParameters(class UFXSystemComponent* FlyingTrailFX, const TArray<class UAudioComponent*>& AudioComponents, const class AFortPlayerPawn* PlayerPawn, const float FlappingAlpha, const float RollCombined, const float RollingAlpha, const float PitchAlpha, const bool bIsBoosting, const bool bIsAscending, const bool bAllowWingFlap, const bool bIsSkimming, const float Speed, const bool bIsDiving, const float CurrentHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AFortGameplayCueNotifyLoop_SunroseFlying", "SetFlappingParameters");

	Params::AFortGameplayCueNotifyLoop_SunroseFlying_SetFlappingParameters Parms{};

	Parms.FlyingTrailFX = FlyingTrailFX;
	Parms.AudioComponents = std::move(AudioComponents);
	Parms.PlayerPawn = PlayerPawn;
	Parms.FlappingAlpha = FlappingAlpha;
	Parms.RollCombined = RollCombined;
	Parms.RollingAlpha = RollingAlpha;
	Parms.PitchAlpha = PitchAlpha;
	Parms.bIsBoosting = bIsBoosting;
	Parms.bIsAscending = bIsAscending;
	Parms.bAllowWingFlap = bAllowWingFlap;
	Parms.bIsSkimming = bIsSkimming;
	Parms.Speed = Speed;
	Parms.bIsDiving = bIsDiving;
	Parms.CurrentHeight = CurrentHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortGameplayCueNotifyLoop_WingsSkimming.ShowWingFX
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   SkimLocationLeft                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SkimNormalLeft                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkimDistanceLeft                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SkimLocationRight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SkimNormalRight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkimDistanceRight                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortGameplayCueNotifyLoop_WingsSkimming::ShowWingFX(const struct FVector& SkimLocationLeft, const struct FVector& SkimNormalLeft, float SkimDistanceLeft, const struct FVector& SkimLocationRight, const struct FVector& SkimNormalRight, float SkimDistanceRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayCueNotifyLoop_WingsSkimming", "ShowWingFX");

	Params::FortGameplayCueNotifyLoop_WingsSkimming_ShowWingFX Parms{};

	Parms.SkimLocationLeft = std::move(SkimLocationLeft);
	Parms.SkimNormalLeft = std::move(SkimNormalLeft);
	Parms.SkimDistanceLeft = SkimDistanceLeft;
	Parms.SkimLocationRight = std::move(SkimLocationRight);
	Parms.SkimNormalRight = std::move(SkimNormalRight);
	Parms.SkimDistanceRight = SkimDistanceRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortCameraModifier_SunroseWingsFlying.UseNativeCalculation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortCameraModifier_SunroseWingsFlying::UseNativeCalculation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCameraModifier_SunroseWingsFlying", "UseNativeCalculation");

	Params::FortCameraModifier_SunroseWingsFlying_UseNativeCalculation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.BlueprintUpdateForMovement
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InVelocity                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InAcceleration                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutNewVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutNewAcceleration                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingWinged::BlueprintUpdateForMovement(class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus, const float DeltaTime, const struct FVector& InVelocity, const struct FVector& InAcceleration, struct FVector* OutNewVelocity, struct FVector* OutNewAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "BlueprintUpdateForMovement");

	Params::FortMovementMode_ExtLogicFlyingWinged_BlueprintUpdateForMovement Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.DeltaTime = DeltaTime;
	Parms.InVelocity = std::move(InVelocity);
	Parms.InAcceleration = std::move(InAcceleration);

	UObject::ProcessEvent(Func, &Parms);

	if (OutNewVelocity != nullptr)
		*OutNewVelocity = std::move(Parms.OutNewVelocity);

	if (OutNewAcceleration != nullptr)
		*OutNewAcceleration = std::move(Parms.OutNewAcceleration);
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.HandleFlyingStatusActivationFailed
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// EWingedFlyingStatus                     FailedStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              FailureTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingWinged::HandleFlyingStatusActivationFailed(EWingedFlyingStatus FailedStatus, const struct FGameplayTag& FailureTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "HandleFlyingStatusActivationFailed");

	Params::FortMovementMode_ExtLogicFlyingWinged_HandleFlyingStatusActivationFailed Parms{};

	Parms.FailedStatus = FailedStatus;
	Parms.FailureTag = std::move(FailureTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.HandleFlyingStatusChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus                     NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bIsActive                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              FailureTag                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingWinged::HandleFlyingStatusChanged(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus, EWingedFlyingStatus NewStatus, const bool bIsActive, const struct FGameplayTag& FailureTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "HandleFlyingStatusChanged");

	Params::FortMovementMode_ExtLogicFlyingWinged_HandleFlyingStatusChanged Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.NewStatus = NewStatus;
	Parms.bIsActive = bIsActive;
	Parms.FailureTag = std::move(FailureTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.CanContinueFlyingStatus
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus                     StatusToContinue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ElapsedDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutCanContinue                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag*                    OutFailureTag                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingWinged::CanContinueFlyingStatus(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus, EWingedFlyingStatus StatusToContinue, const float ElapsedDuration, bool* bOutCanContinue, struct FGameplayTag* OutFailureTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "CanContinueFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingWinged_CanContinueFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToContinue = StatusToContinue;
	Parms.ElapsedDuration = ElapsedDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutCanContinue != nullptr)
		*bOutCanContinue = Parms.bOutCanContinue;

	if (OutFailureTag != nullptr)
		*OutFailureTag = std::move(Parms.OutFailureTag);
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.CanEndFlyingStatus
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus                     StatusToEnd                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ElapsedDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicFlyingWinged::CanEndFlyingStatus(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus, EWingedFlyingStatus StatusToEnd, float ElapsedDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "CanEndFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingWinged_CanEndFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToEnd = StatusToEnd;
	Parms.ElapsedDuration = ElapsedDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.CanStartFlyingStatus
// (Native, Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus                     StatusToStart                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bOutCanStart                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag*                    OutFailureTag                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortMovementMode_ExtLogicFlyingWinged::CanStartFlyingStatus(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus, EWingedFlyingStatus StatusToStart, bool* bOutCanStart, struct FGameplayTag* OutFailureTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "CanStartFlyingStatus");

	Params::FortMovementMode_ExtLogicFlyingWinged_CanStartFlyingStatus Parms{};

	Parms.MoveStatus = MoveStatus;
	Parms.StatusToStart = StatusToStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutCanStart != nullptr)
		*bOutCanStart = Parms.bOutCanStart;

	if (OutFailureTag != nullptr)
		*OutFailureTag = std::move(Parms.OutFailureTag);
}


// Function SunRoseFlyingRuntime.FortMovementMode_ExtLogicFlyingWinged.IsClientReplaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortMovementMode_ExtLogicFlyingWinged::IsClientReplaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortMovementMode_ExtLogicFlyingWinged", "IsClientReplaying");

	Params::FortMovementMode_ExtLogicFlyingWinged_IsClientReplaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.EndFlying
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void UFortPawnComponent_WingedFlying::EndFlying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "EndFlying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleAddedDownZVelocityUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             NewAddedDownZVelocity                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleAddedDownZVelocityUpdated(const float NewAddedDownZVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleAddedDownZVelocityUpdated");

	Params::FortPawnComponent_WingedFlying_HandleAddedDownZVelocityUpdated Parms{};

	Parms.NewAddedDownZVelocity = NewAddedDownZVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleFlyingMoveStatusUpdated
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleFlyingMoveStatusUpdated(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleFlyingMoveStatusUpdated");

	Params::FortPawnComponent_WingedFlying_HandleFlyingMoveStatusUpdated Parms{};

	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleForwardSpeedUpdated
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             NewForwardSpeed                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleForwardSpeedUpdated(const float NewForwardSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleForwardSpeedUpdated");

	Params::FortPawnComponent_WingedFlying_HandleForwardSpeedUpdated Parms{};

	Parms.NewForwardSpeed = NewForwardSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleLeftSkimCheckComplete
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleLeftSkimCheckComplete(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleLeftSkimCheckComplete");

	Params::FortPawnComponent_WingedFlying_HandleLeftSkimCheckComplete Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleOwnerASCInitialized
// (Final, Native, Protected)
// Parameters:
// class UFortAbilitySystemComponent*      AbilitySystemComponent                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPlayerPawn*                  AffectedPawn                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleOwnerASCInitialized(class UFortAbilitySystemComponent* AbilitySystemComponent, class AFortPlayerPawn* AffectedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleOwnerASCInitialized");

	Params::FortPawnComponent_WingedFlying_HandleOwnerASCInitialized Parms{};

	Parms.AbilitySystemComponent = AbilitySystemComponent;
	Parms.AffectedPawn = AffectedPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.HandleRightSkimCheckComplete
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::HandleRightSkimCheckComplete(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "HandleRightSkimCheckComplete");

	Params::FortPawnComponent_WingedFlying_HandleRightSkimCheckComplete Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.StartCustomFlying
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSubclassOf<class UFortMovementMode_ExtLogicFlyingWinged>FlyingMMEToStart                                       (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFortMovementMode_WingedFlyingCreationData&CreationData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::StartCustomFlying(const TSubclassOf<class UFortMovementMode_ExtLogicFlyingWinged> FlyingMMEToStart, const struct FFortMovementMode_WingedFlyingCreationData& CreationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "StartCustomFlying");

	Params::FortPawnComponent_WingedFlying_StartCustomFlying Parms{};

	Parms.FlyingMMEToStart = FlyingMMEToStart;
	Parms.CreationData = std::move(CreationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.StartFlying
// (BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFortMovementMode_WingedFlyingCreationData&CreationData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::StartFlying(const struct FFortMovementMode_WingedFlyingCreationData& CreationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "StartFlying");

	Params::FortPawnComponent_WingedFlying_StartFlying Parms{};

	Parms.CreationData = std::move(CreationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.UpdateCurrentFlyingEnergy
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// const float                             NewFlyingEnergy                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bForceUpdateFX                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortPawnComponent_WingedFlying::UpdateCurrentFlyingEnergy(const float NewFlyingEnergy, const bool bForceUpdateFX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "UpdateCurrentFlyingEnergy");

	Params::FortPawnComponent_WingedFlying_UpdateCurrentFlyingEnergy Parms{};

	Parms.NewFlyingEnergy = NewFlyingEnergy;
	Parms.bForceUpdateFX = bForceUpdateFX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortPawnComponent_WingedFlying.GetLocalFlyingMoveActionValue
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UFortPawnComponent_WingedFlying::GetLocalFlyingMoveActionValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortPawnComponent_WingedFlying", "GetLocalFlyingMoveActionValue");

	Params::FortPawnComponent_WingedFlying_GetLocalFlyingMoveActionValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWeaponWings.BP_ModifyIncomingDamage
// (BlueprintAuthorityOnly, Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     DamageTags                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FHitResult&                DamageHit                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const class AController*                EventInstigator                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     DamageCauser                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutNewDamage                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::BP_ModifyIncomingDamage(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FHitResult& DamageHit, const class AController* EventInstigator, const class AActor* DamageCauser, float* OutNewDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "BP_ModifyIncomingDamage");

	Params::FortWeaponWings_BP_ModifyIncomingDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageTags = std::move(DamageTags);
	Parms.DamageHit = std::move(DamageHit);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);

	if (OutNewDamage != nullptr)
		*OutNewDamage = Parms.OutNewDamage;
}


// Function SunRoseFlyingRuntime.FortWeaponWings.HandleDBNOStateChanged
// (Final, Native, Protected)
// Parameters:
// class AFortPawn*                        FortPawn                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIsDBNO                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::HandleDBNOStateChanged(class AFortPawn* FortPawn, bool bInIsDBNO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "HandleDBNOStateChanged");

	Params::FortWeaponWings_HandleDBNOStateChanged Parms{};

	Parms.FortPawn = FortPawn;
	Parms.bInIsDBNO = bInIsDBNO;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWeaponWings.HandleSecondaryFirePressed
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::HandleSecondaryFirePressed(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "HandleSecondaryFirePressed");

	Params::FortWeaponWings_HandleSecondaryFirePressed Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SunRoseFlyingRuntime.FortWeaponWings.HandleWeaponAttachmentChanged
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      NewWeapon                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortWeapon*                      PrevWeapon                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::HandleWeaponAttachmentChanged(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "HandleWeaponAttachmentChanged");

	Params::FortWeaponWings_HandleWeaponAttachmentChanged Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.PrevWeapon = PrevWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWeaponWings.NativeUpdateEnergyFX
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bForceUpdate                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::NativeUpdateEnergyFX(const bool bForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "NativeUpdateEnergyFX");

	Params::FortWeaponWings_NativeUpdateEnergyFX Parms{};

	Parms.bForceUpdate = bForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWeaponWings.TryResetADSInput
// (Final, Native, Protected)
// Parameters:
// class AFortWeapon*                      Weapon                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortWeaponWings::TryResetADSInput(class AFortWeapon* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortWeaponWings", "TryResetADSInput");

	Params::FortWeaponWings_TryResetADSInput Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.ClearInputActionDisplayContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        PlayerPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortInputMappingContext*   InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortWingedFlyingBlueprintLibrary::ClearInputActionDisplayContext(class AFortPawn* PlayerPawn, const class UFortInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "ClearInputActionDisplayContext");

	Params::FortWingedFlyingBlueprintLibrary_ClearInputActionDisplayContext Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.FlyingStatusAddFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EWingedFlyingStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FlagsToAdd                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus*                    NewStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortWingedFlyingBlueprintLibrary::FlyingStatusAddFlags(EWingedFlyingStatus Status, int32 FlagsToAdd, EWingedFlyingStatus* NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "FlyingStatusAddFlags");

	Params::FortWingedFlyingBlueprintLibrary_FlyingStatusAddFlags Parms{};

	Parms.Status = Status;
	Parms.FlagsToAdd = FlagsToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewStatus != nullptr)
		*NewStatus = Parms.NewStatus;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.FlyingStatusHasAllFlags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EWingedFlyingStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortWingedFlyingBlueprintLibrary::FlyingStatusHasAllFlags(EWingedFlyingStatus Status, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "FlyingStatusHasAllFlags");

	Params::FortWingedFlyingBlueprintLibrary_FlyingStatusHasAllFlags Parms{};

	Parms.Status = Status;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.FlyingStatusHasAnyFlags
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EWingedFlyingStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortWingedFlyingBlueprintLibrary::FlyingStatusHasAnyFlags(EWingedFlyingStatus Status, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "FlyingStatusHasAnyFlags");

	Params::FortWingedFlyingBlueprintLibrary_FlyingStatusHasAnyFlags Parms{};

	Parms.Status = Status;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.FlyingStatusRemoveFlags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EWingedFlyingStatus                     Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FlagsToRemove                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EWingedFlyingStatus*                    NewStatus                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortWingedFlyingBlueprintLibrary::FlyingStatusRemoveFlags(EWingedFlyingStatus Status, int32 FlagsToRemove, EWingedFlyingStatus* NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "FlyingStatusRemoveFlags");

	Params::FortWingedFlyingBlueprintLibrary_FlyingStatusRemoveFlags Parms{};

	Parms.Status = Status;
	Parms.FlagsToRemove = FlagsToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewStatus != nullptr)
		*NewStatus = Parms.NewStatus;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.GetDodgeElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortWingedFlyingBlueprintLibrary::GetDodgeElapsedTime(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "GetDodgeElapsedTime");

	Params::FortWingedFlyingBlueprintLibrary_GetDodgeElapsedTime Parms{};

	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.GetFlyingDuration
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortWingedFlyingBlueprintLibrary::GetFlyingDuration(const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "GetFlyingDuration");

	Params::FortWingedFlyingBlueprintLibrary_GetFlyingDuration Parms{};

	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.GetFlyingStatusElapsedTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const EWingedFlyingStatus               FlyingStatus                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortMovementMode_WingedFlyingRuntimeData*MoveStatus                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFortWingedFlyingBlueprintLibrary::GetFlyingStatusElapsedTime(const EWingedFlyingStatus FlyingStatus, const class UFortMovementMode_WingedFlyingRuntimeData* MoveStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "GetFlyingStatusElapsedTime");

	Params::FortWingedFlyingBlueprintLibrary_GetFlyingStatusElapsedTime Parms{};

	Parms.FlyingStatus = FlyingStatus;
	Parms.MoveStatus = MoveStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.SetInputActionDisplayContext
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFortPawn*                        PlayerPawn                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UFortInputMappingContext*   InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortWingedFlyingBlueprintLibrary::SetInputActionDisplayContext(class AFortPawn* PlayerPawn, const class UFortInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "SetInputActionDisplayContext");

	Params::FortWingedFlyingBlueprintLibrary_SetInputActionDisplayContext Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortWingedFlyingBlueprintLibrary.TraceForWorldAndWater
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class AActor*                     PlayerPawn                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   TraceStart                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   TraceEnd                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bIsBlockingHit                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult*                      ClosestHit                                             (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortWingedFlyingBlueprintLibrary::TraceForWorldAndWater(const class AActor* PlayerPawn, const struct FVector& TraceStart, const struct FVector& TraceEnd, bool* bIsBlockingHit, struct FHitResult* ClosestHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FortWingedFlyingBlueprintLibrary", "TraceForWorldAndWater");

	Params::FortWingedFlyingBlueprintLibrary_TraceForWorldAndWater Parms{};

	Parms.PlayerPawn = PlayerPawn;
	Parms.TraceStart = std::move(TraceStart);
	Parms.TraceEnd = std::move(TraceEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsBlockingHit != nullptr)
		*bIsBlockingHit = Parms.bIsBlockingHit;

	if (ClosestHit != nullptr)
		*ClosestHit = std::move(Parms.ClosestHit);
}


// Function SunRoseFlyingRuntime.FortGameplayAbility_SunroseWingsCrashBase.BeginTelegraph
// (Final, Native, Public, BlueprintCallable)

void UFortGameplayAbility_SunroseWingsCrashBase::BeginTelegraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_SunroseWingsCrashBase", "BeginTelegraph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortGameplayAbility_SunroseWingsCrashBase.EndTelegraph
// (Final, Native, Public, BlueprintCallable)

void UFortGameplayAbility_SunroseWingsCrashBase::EndTelegraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_SunroseWingsCrashBase", "EndTelegraph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SunRoseFlyingRuntime.FortGameplayAbility_SunroseWingsCrashBase.UpdateTelegraph
// (Final, Native, Public, BlueprintCallable)

void UFortGameplayAbility_SunroseWingsCrashBase::UpdateTelegraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortGameplayAbility_SunroseWingsCrashBase", "UpdateTelegraph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

