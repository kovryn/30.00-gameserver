#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CRD_VideoSchedule

#include "Basic.hpp"

#include "CRD_VideoSchedule_classes.hpp"
#include "CRD_VideoSchedule_parameters.hpp"


namespace SDK
{

// Function CRD_VideoSchedule.VideoScheduleDeviceBase.OnControlVideoPlayer
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const class FString&                    VUID                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 StartTime                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AController*>&       Players                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class ULevelSequence*             Sequence                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVideoScheduleDeviceBase::OnControlVideoPlayer(const class FString& VUID, const struct FDateTime& StartTime, const TArray<class AController*>& Players, const class ULevelSequence* Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoScheduleDeviceBase", "OnControlVideoPlayer");

	Params::VideoScheduleDeviceBase_OnControlVideoPlayer Parms{};

	Parms.VUID = std::move(VUID);
	Parms.StartTime = std::move(StartTime);
	Parms.Players = std::move(Players);
	Parms.Sequence = Sequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CRD_VideoSchedule.VideoScheduleDeviceBase.StartSchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InPlayer                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVideoScheduleDeviceBase::StartSchedule(class AController* InPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoScheduleDeviceBase", "StartSchedule");

	Params::VideoScheduleDeviceBase_StartSchedule Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRD_VideoSchedule.VideoScheduleDeviceBase.StopSchedule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      InPlayer                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVideoScheduleDeviceBase::StopSchedule(class AController* InPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoScheduleDeviceBase", "StopSchedule");

	Params::VideoScheduleDeviceBase_StopSchedule Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function CRD_VideoSchedule.VideoScheduleDeviceBase.TestControlVideoPlayer
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    VUID                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDateTime&                 StartTime                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AController*>&       Players                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AVideoScheduleDeviceBase::TestControlVideoPlayer(const class FString& VUID, const struct FDateTime& StartTime, const TArray<class AController*>& Players)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VideoScheduleDeviceBase", "TestControlVideoPlayer");

	Params::VideoScheduleDeviceBase_TestControlVideoPlayer Parms{};

	Parms.VUID = std::move(VUID);
	Parms.StartTime = std::move(StartTime);
	Parms.Players = std::move(Players);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

