#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LearningAgents

#include "Basic.hpp"

#include "LearningAgents_classes.hpp"
#include "LearningAgents_parameters.hpp"


namespace SDK
{

// Function LearningAgents.LearningAgentsActions.GetAngleAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float*                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerAngleLocation                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetAngleAction(float* OutAngle, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const float RelativeAngle, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetAngleAction");

	Params::LearningAgentsActions_GetAngleAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerAngleLocation = std::move(VisualLoggerAngleLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetAngleActionRadians
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float*                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerAngleLocation                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetAngleActionRadians(float* OutAngle, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const float RelativeAngle, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerAngleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetAngleActionRadians");

	Params::LearningAgentsActions_GetAngleActionRadians Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerAngleLocation = std::move(VisualLoggerAngleLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetBitmaskAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32*                                  OutBitmaskValue                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetBitmaskAction(int32* OutBitmaskValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class UEnum* Enum, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetBitmaskAction");

	Params::LearningAgentsActions_GetBitmaskAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Enum = Enum;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBitmaskValue != nullptr)
		*OutBitmaskValue = Parms.OutBitmaskValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetBoolAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool*                                   bOutValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetBoolAction(bool* bOutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetBoolAction");

	Params::LearningAgentsActions_GetBoolAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutValue != nullptr)
		*bOutValue = Parms.bOutValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetContinuousAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetContinuousAction(TArray<float>* OutValues, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetContinuousAction");

	Params::LearningAgentsActions_GetContinuousAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetContinuousActionNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetContinuousActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetContinuousActionNum");

	Params::LearningAgentsActions_GetContinuousActionNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetDirectionAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerDirectionLocation                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VisualLoggerArrowLength                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetDirectionAction(struct FVector* OutDirection, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocation, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetDirectionAction");

	Params::LearningAgentsActions_GetDirectionAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerDirectionLocation = std::move(VisualLoggerDirectionLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerArrowLength = VisualLoggerArrowLength;
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetEitherAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELearningAgentsEitherAction*            OutEither                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetEitherAction(ELearningAgentsEitherAction* OutEither, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetEitherAction");

	Params::LearningAgentsActions_GetEitherAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEither != nullptr)
		*OutEither = Parms.OutEither;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetEncodingAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsActionObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetEncodingAction(struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetEncodingAction");

	Params::LearningAgentsActions_GetEncodingAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetEnumAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// uint8*                                  OutEnumValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetEnumAction(uint8* OutEnumValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class UEnum* Enum, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetEnumAction");

	Params::LearningAgentsActions_GetEnumAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Enum = Enum;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEnumValue != nullptr)
		*OutEnumValue = Parms.OutEnumValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetExclusiveDiscreteAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32*                                  OutIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetExclusiveDiscreteAction(int32* OutIndex, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetExclusiveDiscreteAction");

	Params::LearningAgentsActions_GetExclusiveDiscreteAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndex != nullptr)
		*OutIndex = Parms.OutIndex;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetExclusiveUnionAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName*                            OutElementName                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetExclusiveUnionAction(class FName* OutElementName, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetExclusiveUnionAction");

	Params::LearningAgentsActions_GetExclusiveUnionAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementName != nullptr)
		*OutElementName = Parms.OutElementName;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetFloatAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetFloatAction(float* OutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetFloatAction");

	Params::LearningAgentsActions_GetFloatAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetInclusiveDiscreteAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<int32>*                          OutIndices                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetInclusiveDiscreteAction(TArray<int32>* OutIndices, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetInclusiveDiscreteAction");

	Params::LearningAgentsActions_GetInclusiveDiscreteAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndices != nullptr)
		*OutIndices = std::move(Parms.OutIndices);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetInclusiveDiscreteActionNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetInclusiveDiscreteActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetInclusiveDiscreteActionNum");

	Params::LearningAgentsActions_GetInclusiveDiscreteActionNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetInclusiveUnionAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FLearningAgentsActionObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetInclusiveUnionAction(TMap<class FName, struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetInclusiveUnionAction");

	Params::LearningAgentsActions_GetInclusiveUnionAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetInclusiveUnionActionNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetInclusiveUnionActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetInclusiveUnionActionNum");

	Params::LearningAgentsActions_GetInclusiveUnionActionNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetInclusiveUnionActionToArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>*                    OutElementNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLearningAgentsActionObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetInclusiveUnionActionToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetInclusiveUnionActionToArrays");

	Params::LearningAgentsActions_GetInclusiveUnionActionToArrays Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementNames != nullptr)
		*OutElementNames = std::move(Parms.OutElementNames);

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetLocationAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetLocationAction(struct FVector* OutLocation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetLocationAction");

	Params::LearningAgentsActions_GetLocationAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetNullAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetNullAction(const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetNullAction");

	Params::LearningAgentsActions_GetNullAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetOptionalAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELearningAgentsOptionalAction*          OutOption                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetOptionalAction(ELearningAgentsOptionalAction* OutOption, struct FLearningAgentsActionObjectElement* OutElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetOptionalAction");

	Params::LearningAgentsActions_GetOptionalAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOption != nullptr)
		*OutOption = Parms.OutOption;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetPairAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsActionObjectElement*OutKey                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElement*OutValue                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetPairAction(struct FLearningAgentsActionObjectElement* OutKey, struct FLearningAgentsActionObjectElement* OutValue, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetPairAction");

	Params::LearningAgentsActions_GetPairAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKey != nullptr)
		*OutKey = std::move(Parms.OutKey);

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetRotationAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetRotationAction(struct FRotator* OutRotation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FRotator& RelativeRotation, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetRotationAction");

	Params::LearningAgentsActions_GetRotationAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocation = std::move(VisualLoggerRotationLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetRotationActionAsQuat
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FQuat*                           OutRotation                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     RelativeRotation                                       (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetRotationActionAsQuat(struct FQuat* OutRotation, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FQuat& RelativeRotation, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetRotationActionAsQuat");

	Params::LearningAgentsActions_GetRotationActionAsQuat Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocation = std::move(VisualLoggerRotationLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetScaleAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetScaleAction(struct FVector* OutScale, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FVector& RelativeScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetScaleAction");

	Params::LearningAgentsActions_GetScaleAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeScale = std::move(RelativeScale);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScale != nullptr)
		*OutScale = std::move(Parms.OutScale);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetStaticArrayAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLearningAgentsActionObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetStaticArrayAction(TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetStaticArrayAction");

	Params::LearningAgentsActions_GetStaticArrayAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetStaticArrayActionNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetStaticArrayActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetStaticArrayActionNum");

	Params::LearningAgentsActions_GetStaticArrayActionNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetStructAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FLearningAgentsActionObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetStructAction(TMap<class FName, struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetStructAction");

	Params::LearningAgentsActions_GetStructAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetStructActionNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetStructActionNum(int32* OutNum, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetStructActionNum");

	Params::LearningAgentsActions_GetStructActionNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetStructActionToArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>*                    OutElementNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLearningAgentsActionObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetStructActionToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsActionObjectElement>* OutElements, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetStructActionToArrays");

	Params::LearningAgentsActions_GetStructActionToArrays Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementNames != nullptr)
		*OutElementNames = std::move(Parms.OutElementNames);

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetTransformAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform*                      OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetTransformAction(struct FTransform* OutTransform, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetTransformAction");

	Params::LearningAgentsActions_GetTransformAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.GetVelocityAction
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerVelocityLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::GetVelocityAction(struct FVector* OutVelocity, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerVelocityLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "GetVelocityAction");

	Params::LearningAgentsActions_GetVelocityAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerVelocityLocation = std::move(VisualLoggerVelocityLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.LogAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsActions::LogAction(const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "LogAction");

	Params::LearningAgentsActions_LogAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsActions.MakeAngleAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeAngleAction(class ULearningAgentsActionObject* Object, const float Angle, const float RelativeAngle, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeAngleAction");

	Params::LearningAgentsActions_MakeAngleAction Parms{};

	Parms.Object = Object;
	Parms.Angle = Angle;
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeAngleActionRadians
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeAngleActionRadians(class ULearningAgentsActionObject* Object, const float Angle, const float RelativeAngle, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeAngleActionRadians");

	Params::LearningAgentsActions_MakeAngleActionRadians Parms{};

	Parms.Object = Object;
	Parms.Angle = Angle;
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeBitmaskAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             BitmaskValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeBitmaskAction(class ULearningAgentsActionObject* Object, const class UEnum* Enum, const int32 BitmaskValue, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeBitmaskAction");

	Params::LearningAgentsActions_MakeBitmaskAction Parms{};

	Parms.Object = Object;
	Parms.Enum = Enum;
	Parms.BitmaskValue = BitmaskValue;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeBoolAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeBoolAction(class ULearningAgentsActionObject* Object, const bool bValue, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeBoolAction");

	Params::LearningAgentsActions_MakeBoolAction Parms{};

	Parms.Object = Object;
	Parms.bValue = bValue;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeContinuousAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeContinuousAction(class ULearningAgentsActionObject* Object, const TArray<float>& Values, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeContinuousAction");

	Params::LearningAgentsActions_MakeContinuousAction Parms{};

	Parms.Object = Object;
	Parms.Values = std::move(Values);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeDirectionAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeDirectionAction(class ULearningAgentsActionObject* Object, const struct FVector& Direction, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeDirectionAction");

	Params::LearningAgentsActions_MakeDirectionAction Parms{};

	Parms.Object = Object;
	Parms.Direction = std::move(Direction);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeEitherAAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&A                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeEitherAAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& A, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeEitherAAction");

	Params::LearningAgentsActions_MakeEitherAAction Parms{};

	Parms.Object = Object;
	Parms.A = std::move(A);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeEitherAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsEitherAction       Either                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeEitherAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const ELearningAgentsEitherAction Either, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeEitherAction");

	Params::LearningAgentsActions_MakeEitherAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Either = Either;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeEitherBAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&B                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeEitherBAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& B, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeEitherBAction");

	Params::LearningAgentsActions_MakeEitherBAction Parms{};

	Parms.Object = Object;
	Parms.B = std::move(B);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeEncodingAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeEncodingAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeEncodingAction");

	Params::LearningAgentsActions_MakeEncodingAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeEnumAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             EnumValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeEnumAction(class ULearningAgentsActionObject* Object, const class UEnum* Enum, const uint8 EnumValue, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeEnumAction");

	Params::LearningAgentsActions_MakeEnumAction Parms{};

	Parms.Object = Object;
	Parms.Enum = Enum;
	Parms.EnumValue = EnumValue;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeExclusiveDiscreteAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeExclusiveDiscreteAction(class ULearningAgentsActionObject* Object, const int32 Index_0, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeExclusiveDiscreteAction");

	Params::LearningAgentsActions_MakeExclusiveDiscreteAction Parms{};

	Parms.Object = Object;
	Parms.Index_0 = Index_0;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeExclusiveUnionAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ElementName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeExclusiveUnionAction(class ULearningAgentsActionObject* Object, const class FName ElementName, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeExclusiveUnionAction");

	Params::LearningAgentsActions_MakeExclusiveUnionAction Parms{};

	Parms.Object = Object;
	Parms.ElementName = ElementName;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeFloatAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeFloatAction(class ULearningAgentsActionObject* Object, const float Value, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeFloatAction");

	Params::LearningAgentsActions_MakeFloatAction Parms{};

	Parms.Object = Object;
	Parms.Value = Value;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeInclusiveDiscreteAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    Indices                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeInclusiveDiscreteAction(class ULearningAgentsActionObject* Object, const TArray<int32>& Indices, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeInclusiveDiscreteAction");

	Params::LearningAgentsActions_MakeInclusiveDiscreteAction Parms{};

	Parms.Object = Object;
	Parms.Indices = std::move(Indices);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeInclusiveUnionAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsActionObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeInclusiveUnionAction(class ULearningAgentsActionObject* Object, const TMap<class FName, struct FLearningAgentsActionObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeInclusiveUnionAction");

	Params::LearningAgentsActions_MakeInclusiveUnionAction Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeInclusiveUnionActionFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeInclusiveUnionActionFromArrays(class ULearningAgentsActionObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeInclusiveUnionActionFromArrays");

	Params::LearningAgentsActions_MakeInclusiveUnionActionFromArrays Parms{};

	Parms.Object = Object;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeLocationAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeLocationAction(class ULearningAgentsActionObject* Object, const struct FVector& Location, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeLocationAction");

	Params::LearningAgentsActions_MakeLocationAction Parms{};

	Parms.Object = Object;
	Parms.Location = std::move(Location);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeNullAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeNullAction(class ULearningAgentsActionObject* Object, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeNullAction");

	Params::LearningAgentsActions_MakeNullAction Parms{};

	Parms.Object = Object;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeOptionalAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsOptionalAction     Option                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeOptionalAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const ELearningAgentsOptionalAction Option, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeOptionalAction");

	Params::LearningAgentsActions_MakeOptionalAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Option = Option;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeOptionalNullAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeOptionalNullAction(class ULearningAgentsActionObject* Object, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeOptionalNullAction");

	Params::LearningAgentsActions_MakeOptionalNullAction Parms{};

	Parms.Object = Object;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeOptionalValidAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeOptionalValidAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeOptionalValidAction");

	Params::LearningAgentsActions_MakeOptionalValidAction Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakePairAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&Value                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakePairAction(class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& Key, const struct FLearningAgentsActionObjectElement& Value, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakePairAction");

	Params::LearningAgentsActions_MakePairAction Parms{};

	Parms.Object = Object;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeRotationAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeRotationAction(class ULearningAgentsActionObject* Object, const struct FRotator& Rotation, const struct FRotator& RelativeRotation, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeRotationAction");

	Params::LearningAgentsActions_MakeRotationAction Parms{};

	Parms.Object = Object;
	Parms.Rotation = std::move(Rotation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeRotationActionFromQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     Rotation                                               (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     RelativeRotation                                       (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeRotationActionFromQuat(class ULearningAgentsActionObject* Object, const struct FQuat& Rotation, const struct FQuat& RelativeRotation, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeRotationActionFromQuat");

	Params::LearningAgentsActions_MakeRotationActionFromQuat Parms{};

	Parms.Object = Object;
	Parms.Rotation = std::move(Rotation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeScaleAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeScaleAction(class ULearningAgentsActionObject* Object, const struct FVector& Scale, const struct FVector& RelativeScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeScaleAction");

	Params::LearningAgentsActions_MakeScaleAction Parms{};

	Parms.Object = Object;
	Parms.Scale = std::move(Scale);
	Parms.RelativeScale = std::move(RelativeScale);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeStaticArrayAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeStaticArrayAction(class ULearningAgentsActionObject* Object, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeStaticArrayAction");

	Params::LearningAgentsActions_MakeStaticArrayAction Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeStructAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsActionObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeStructAction(class ULearningAgentsActionObject* Object, const TMap<class FName, struct FLearningAgentsActionObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeStructAction");

	Params::LearningAgentsActions_MakeStructAction Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeStructActionFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeStructActionFromArrays(class ULearningAgentsActionObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeStructActionFromArrays");

	Params::LearningAgentsActions_MakeStructActionFromArrays Parms{};

	Parms.Object = Object;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeTransformAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeTransformAction(class ULearningAgentsActionObject* Object, const struct FTransform& Transform, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeTransformAction");

	Params::LearningAgentsActions_MakeTransformAction Parms{};

	Parms.Object = Object;
	Parms.Transform = std::move(Transform);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.MakeVelocityAction
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionObject*      Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsActionObjectElement ULearningAgentsActions::MakeVelocityAction(class ULearningAgentsActionObject* Object, const struct FVector& Velocity, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "MakeVelocityAction");

	Params::LearningAgentsActions_MakeVelocityAction Parms{};

	Parms.Object = Object;
	Parms.Velocity = std::move(Velocity);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyAngleAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             AngleScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyAngleAction(class ULearningAgentsActionSchema* Schema, const float AngleScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyAngleAction");

	Params::LearningAgentsActions_SpecifyAngleAction Parms{};

	Parms.Schema = Schema;
	Parms.AngleScale = AngleScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyBitmaskAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<uint8, float>&               PriorProbabilities                                     (ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyBitmaskAction(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TMap<uint8, float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyBitmaskAction");

	Params::LearningAgentsActions_SpecifyBitmaskAction Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyBitmaskActionFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyBitmaskActionFromArray(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyBitmaskActionFromArray");

	Params::LearningAgentsActions_SpecifyBitmaskActionFromArray Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyBoolAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PriorProbability                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyBoolAction(class ULearningAgentsActionSchema* Schema, const float PriorProbability, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyBoolAction");

	Params::LearningAgentsActions_SpecifyBoolAction Parms{};

	Parms.Schema = Schema;
	Parms.PriorProbability = PriorProbability;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyContinuousAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyContinuousAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const float Scale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyContinuousAction");

	Params::LearningAgentsActions_SpecifyContinuousAction Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.Scale = Scale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyDirectionAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyDirectionAction(class ULearningAgentsActionSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyDirectionAction");

	Params::LearningAgentsActions_SpecifyDirectionAction Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyEitherAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             PriorProbabilityOfA                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyEitherAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& A, const struct FLearningAgentsActionSchemaElement& B, const float PriorProbabilityOfA, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyEitherAction");

	Params::LearningAgentsActions_SpecifyEitherAction Parms{};

	Parms.Schema = Schema;
	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.PriorProbabilityOfA = PriorProbabilityOfA;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyEncodingAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             HiddenLayerNum                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsActivationFunction ActivationFunction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyEncodingAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const int32 EncodingSize, const int32 HiddenLayerNum, const ELearningAgentsActivationFunction ActivationFunction, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyEncodingAction");

	Params::LearningAgentsActions_SpecifyEncodingAction Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.EncodingSize = EncodingSize;
	Parms.HiddenLayerNum = HiddenLayerNum;
	Parms.ActivationFunction = ActivationFunction;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyEnumAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<uint8, float>&               PriorProbabilities                                     (ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyEnumAction(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TMap<uint8, float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyEnumAction");

	Params::LearningAgentsActions_SpecifyEnumAction Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyEnumActionFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyEnumActionFromArray(class ULearningAgentsActionSchema* Schema, const class UEnum* Enum, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyEnumActionFromArray");

	Params::LearningAgentsActions_SpecifyEnumActionFromArray Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyExclusiveDiscreteAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyExclusiveDiscreteAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyExclusiveDiscreteAction");

	Params::LearningAgentsActions_SpecifyExclusiveDiscreteAction Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyExclusiveUnionAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         PriorProbabilities                                     (ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyExclusiveUnionAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const TMap<class FName, float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyExclusiveUnionAction");

	Params::LearningAgentsActions_SpecifyExclusiveUnionAction Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyExclusiveUnionActionFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyExclusiveUnionActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyExclusiveUnionActionFromArrays");

	Params::LearningAgentsActions_SpecifyExclusiveUnionActionFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyFloatAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             FloatScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyFloatAction(class ULearningAgentsActionSchema* Schema, const float FloatScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyFloatAction");

	Params::LearningAgentsActions_SpecifyFloatAction Parms{};

	Parms.Schema = Schema;
	Parms.FloatScale = FloatScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyInclusiveDiscreteAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyInclusiveDiscreteAction(class ULearningAgentsActionSchema* Schema, const int32 Size, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyInclusiveDiscreteAction");

	Params::LearningAgentsActions_SpecifyInclusiveDiscreteAction Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyInclusiveUnionAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         PriorProbabilities                                     (ConstParm, Parm, OutParm, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyInclusiveUnionAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const TMap<class FName, float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyInclusiveUnionAction");

	Params::LearningAgentsActions_SpecifyInclusiveUnionAction Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyInclusiveUnionActionFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<float>&                    PriorProbabilities                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyInclusiveUnionActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const TArray<float>& PriorProbabilities, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyInclusiveUnionActionFromArrays");

	Params::LearningAgentsActions_SpecifyInclusiveUnionActionFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.PriorProbabilities = std::move(PriorProbabilities);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyLocationAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyLocationAction(class ULearningAgentsActionSchema* Schema, const float LocationScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyLocationAction");

	Params::LearningAgentsActions_SpecifyLocationAction Parms{};

	Parms.Schema = Schema;
	Parms.LocationScale = LocationScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyNullAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyNullAction(class ULearningAgentsActionSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyNullAction");

	Params::LearningAgentsActions_SpecifyNullAction Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyOptionalAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const float                             PriorProbability                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyOptionalAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const float PriorProbability, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyOptionalAction");

	Params::LearningAgentsActions_SpecifyOptionalAction Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.PriorProbability = PriorProbability;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyPairAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&Key                                                    (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&Value                                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyPairAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Key, const struct FLearningAgentsActionSchemaElement& Value, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyPairAction");

	Params::LearningAgentsActions_SpecifyPairAction Parms{};

	Parms.Schema = Schema;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyRotationAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RotationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyRotationAction(class ULearningAgentsActionSchema* Schema, const float RotationScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyRotationAction");

	Params::LearningAgentsActions_SpecifyRotationAction Parms{};

	Parms.Schema = Schema;
	Parms.RotationScale = RotationScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyScaleAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ScaleScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyScaleAction(class ULearningAgentsActionSchema* Schema, const float ScaleScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyScaleAction");

	Params::LearningAgentsActions_SpecifyScaleAction Parms{};

	Parms.Schema = Schema;
	Parms.ScaleScale = ScaleScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyStaticArrayAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Num                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyStaticArrayAction(class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& Element, const int32 Num, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyStaticArrayAction");

	Params::LearningAgentsActions_SpecifyStaticArrayAction Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.Num = Num;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyStructAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyStructAction(class ULearningAgentsActionSchema* Schema, const TMap<class FName, struct FLearningAgentsActionSchemaElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyStructAction");

	Params::LearningAgentsActions_SpecifyStructAction Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyStructActionFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyStructActionFromArrays(class ULearningAgentsActionSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsActionSchemaElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyStructActionFromArrays");

	Params::LearningAgentsActions_SpecifyStructActionFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyTransformAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RotationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ScaleScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyTransformAction(class ULearningAgentsActionSchema* Schema, const float LocationScale, const float RotationScale, const float ScaleScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyTransformAction");

	Params::LearningAgentsActions_SpecifyTransformAction Parms{};

	Parms.Schema = Schema;
	Parms.LocationScale = LocationScale;
	Parms.RotationScale = RotationScale;
	Parms.ScaleScale = ScaleScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.SpecifyVelocityAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsActionSchema*      Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VelocityScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsActionSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsActionSchemaElement ULearningAgentsActions::SpecifyVelocityAction(class ULearningAgentsActionSchema* Schema, const float VelocityScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "SpecifyVelocityAction");

	Params::LearningAgentsActions_SpecifyVelocityAction Parms{};

	Parms.Schema = Schema;
	Parms.VelocityScale = VelocityScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsActions.ValidateActionObjectMatchesSchema
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsActionSchema*Schema                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionSchemaElement&SchemaElement                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsActionObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&ObjectElement                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsActions::ValidateActionObjectMatchesSchema(const class ULearningAgentsActionSchema* Schema, const struct FLearningAgentsActionSchemaElement& SchemaElement, const class ULearningAgentsActionObject* Object, const struct FLearningAgentsActionObjectElement& ObjectElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsActions", "ValidateActionObjectMatchesSchema");

	Params::LearningAgentsActions_ValidateActionObjectMatchesSchema Parms{};

	Parms.Schema = Schema;
	Parms.SchemaElement = std::move(SchemaElement);
	Parms.Object = Object;
	Parms.ObjectElement = std::move(ObjectElement);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManagerListener.OnAgentsAdded
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::OnAgentsAdded(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "OnAgentsAdded");

	Params::LearningAgentsManagerListener_OnAgentsAdded Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManagerListener.OnAgentsManagerTick
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const float                             DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::OnAgentsManagerTick(const TArray<int32>& AgentIds, const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "OnAgentsManagerTick");

	Params::LearningAgentsManagerListener_OnAgentsManagerTick Parms{};

	Parms.AgentIds = std::move(AgentIds);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManagerListener.OnAgentsRemoved
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::OnAgentsRemoved(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "OnAgentsRemoved");

	Params::LearningAgentsManagerListener_OnAgentsRemoved Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManagerListener.OnAgentsReset
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::OnAgentsReset(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "OnAgentsReset");

	Params::LearningAgentsManagerListener_OnAgentsReset Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManagerListener.GetAgent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* ULearningAgentsManagerListener::GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "GetAgent");

	Params::LearningAgentsManagerListener_GetAgent Parms{};

	Parms.AgentId = AgentId;
	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManagerListener.GetAgentManager
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULearningAgentsManager*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsManager* ULearningAgentsManagerListener::GetAgentManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "GetAgentManager");

	Params::LearningAgentsManagerListener_GetAgentManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManagerListener.GetAgents
// (Final, Native, Protected, HasOutParams, BlueprintCallable, Const)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>*                 OutAgents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::GetAgents(const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass, TArray<class UObject*>* OutAgents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "GetAgents");

	Params::LearningAgentsManagerListener_GetAgents Parms{};

	Parms.AgentIds = std::move(AgentIds);
	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgents != nullptr)
		*OutAgents = std::move(Parms.OutAgents);
}


// Function LearningAgents.LearningAgentsManagerListener.GetAllAgents
// (Final, Native, Protected, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class UObject*>*                 OutAgents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutAgentIds                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManagerListener::GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "GetAllAgents");

	Params::LearningAgentsManagerListener_GetAllAgents Parms{};

	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgents != nullptr)
		*OutAgents = std::move(Parms.OutAgents);

	if (OutAgentIds != nullptr)
		*OutAgentIds = std::move(Parms.OutAgentIds);
}


// Function LearningAgents.LearningAgentsManagerListener.IsSetup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsManagerListener::IsSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManagerListener", "IsSetup");

	Params::LearningAgentsManagerListener_IsSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsController.MakeController
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsController>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsController*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsController* ULearningAgentsController::MakeController(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsController> Class_0, const class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsController", "MakeController");

	Params::LearningAgentsController_MakeController Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsController.EvaluateAgentController
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLearningAgentsActionObjectElement*OutActionObjectElement                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsActionObject*      InActionObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*InObservationObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&InObservationObjectElement                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsController::EvaluateAgentController(struct FLearningAgentsActionObjectElement* OutActionObjectElement, class ULearningAgentsActionObject* InActionObject, const class ULearningAgentsObservationObject* InObservationObject, const struct FLearningAgentsObservationObjectElement& InObservationObjectElement, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "EvaluateAgentController");

	Params::LearningAgentsController_EvaluateAgentController Parms{};

	Parms.InActionObject = InActionObject;
	Parms.InObservationObject = InObservationObject;
	Parms.InObservationObjectElement = std::move(InObservationObjectElement);
	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionObjectElement != nullptr)
		*OutActionObjectElement = std::move(Parms.OutActionObjectElement);
}


// Function LearningAgents.LearningAgentsController.EvaluateAgentControllers
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FLearningAgentsActionObjectElement>*OutActionObjectElements                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class ULearningAgentsActionObject*      InActionObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*InObservationObject                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&InObservationObjectElements                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsController::EvaluateAgentControllers(TArray<struct FLearningAgentsActionObjectElement>* OutActionObjectElements, class ULearningAgentsActionObject* InActionObject, const class ULearningAgentsObservationObject* InObservationObject, const TArray<struct FLearningAgentsObservationObjectElement>& InObservationObjectElements, const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "EvaluateAgentControllers");

	Params::LearningAgentsController_EvaluateAgentControllers Parms{};

	Parms.InActionObject = InActionObject;
	Parms.InObservationObject = InObservationObject;
	Parms.InObservationObjectElements = std::move(InObservationObjectElements);
	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionObjectElements != nullptr)
		*OutActionObjectElements = std::move(Parms.OutActionObjectElements);
}


// Function LearningAgents.LearningAgentsController.EvaluateController
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsController::EvaluateController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "EvaluateController");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsController.RunController
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsController::RunController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "RunController");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsController.SetupController
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsController::SetupController(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "SetupController");

	Params::LearningAgentsController_SetupController Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsController.GetInteractor
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TSubclassOf<class ULearningAgentsInteractor>InteractorClass                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsInteractor* ULearningAgentsController::GetInteractor(const TSubclassOf<class ULearningAgentsInteractor> InteractorClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsController", "GetInteractor");

	Params::LearningAgentsController_GetInteractor Parms{};

	Parms.InteractorClass = InteractorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsCritic.MakeCritic
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsCritic>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     CriticNeuralNetworkAsset                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeCriticNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsCriticSettings&CriticSettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Seed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsCritic*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsCritic* ULearningAgentsCritic::MakeCritic(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, TSubclassOf<class ULearningAgentsCritic> Class_0, const class FName Name_0, class ULearningAgentsNeuralNetwork* CriticNeuralNetworkAsset, const bool bReinitializeCriticNetwork, const struct FLearningAgentsCriticSettings& CriticSettings, const int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsCritic", "MakeCritic");

	Params::LearningAgentsCritic_MakeCritic Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;
	Parms.CriticNeuralNetworkAsset = CriticNeuralNetworkAsset;
	Parms.bReinitializeCriticNetwork = bReinitializeCriticNetwork;
	Parms.CriticSettings = std::move(CriticSettings);
	Parms.Seed = Seed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsCritic.EvaluateCritic
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsCritic::EvaluateCritic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsCritic", "EvaluateCritic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsCritic.GetCriticNetworkAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsNeuralNetwork*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsNeuralNetwork* ULearningAgentsCritic::GetCriticNetworkAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsCritic", "GetCriticNetworkAsset");

	Params::LearningAgentsCritic_GetCriticNetworkAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsCritic.SetupCritic
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            InPolicy                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     CriticNeuralNetworkAsset                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeCriticNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsCriticSettings&CriticSettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Seed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsCritic::SetupCritic(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsPolicy* InPolicy, class ULearningAgentsNeuralNetwork* CriticNeuralNetworkAsset, const bool bReinitializeCriticNetwork, const struct FLearningAgentsCriticSettings& CriticSettings, const int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsCritic", "SetupCritic");

	Params::LearningAgentsCritic_SetupCritic Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.InPolicy = InPolicy;
	Parms.CriticNeuralNetworkAsset = CriticNeuralNetworkAsset;
	Parms.bReinitializeCriticNetwork = bReinitializeCriticNetwork;
	Parms.CriticSettings = std::move(CriticSettings);
	Parms.Seed = Seed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsCritic.GetEstimatedDiscountedReturn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULearningAgentsCritic::GetEstimatedDiscountedReturn(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsCritic", "GetEstimatedDiscountedReturn");

	Params::LearningAgentsCritic_GetEstimatedDiscountedReturn Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.MakeInteractor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsInteractor>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsInteractor* ULearningAgentsInteractor::MakeInteractor(class ULearningAgentsManager* InManager, TSubclassOf<class ULearningAgentsInteractor> Class_0, const class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsInteractor", "MakeInteractor");

	Params::LearningAgentsInteractor_MakeInteractor Parms{};

	Parms.InManager = InManager;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.GatherAgentObservation
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLearningAgentsObservationObjectElement*OutObservationObjectElement                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsObservationObject* InObservationObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::GatherAgentObservation(struct FLearningAgentsObservationObjectElement* OutObservationObjectElement, class ULearningAgentsObservationObject* InObservationObject, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GatherAgentObservation");

	Params::LearningAgentsInteractor_GatherAgentObservation Parms{};

	Parms.InObservationObject = InObservationObject;
	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObservationObjectElement != nullptr)
		*OutObservationObjectElement = std::move(Parms.OutObservationObjectElement);
}


// Function LearningAgents.LearningAgentsInteractor.GatherAgentObservations
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FLearningAgentsObservationObjectElement>*OutObservationObjectElements                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class ULearningAgentsObservationObject* InObservationObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::GatherAgentObservations(TArray<struct FLearningAgentsObservationObjectElement>* OutObservationObjectElements, class ULearningAgentsObservationObject* InObservationObject, const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GatherAgentObservations");

	Params::LearningAgentsInteractor_GatherAgentObservations Parms{};

	Parms.InObservationObject = InObservationObject;
	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObservationObjectElements != nullptr)
		*OutObservationObjectElements = std::move(Parms.OutObservationObjectElements);
}


// Function LearningAgents.LearningAgentsInteractor.GatherObservations
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsInteractor::GatherObservations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GatherObservations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.GetActionVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutActionVector                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutActionCompatibilityHash                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::GetActionVector(TArray<float>* OutActionVector, int32* OutActionCompatibilityHash, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetActionVector");

	Params::LearningAgentsInteractor_GetActionVector Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionVector != nullptr)
		*OutActionVector = std::move(Parms.OutActionVector);

	if (OutActionCompatibilityHash != nullptr)
		*OutActionCompatibilityHash = Parms.OutActionCompatibilityHash;
}


// Function LearningAgents.LearningAgentsInteractor.GetObservationVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutObservationVector                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32*                                  OutObservationCompatibilityHash                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::GetObservationVector(TArray<float>* OutObservationVector, int32* OutObservationCompatibilityHash, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetObservationVector");

	Params::LearningAgentsInteractor_GetObservationVector Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObservationVector != nullptr)
		*OutObservationVector = std::move(Parms.OutObservationVector);

	if (OutObservationCompatibilityHash != nullptr)
		*OutObservationCompatibilityHash = Parms.OutObservationCompatibilityHash;
}


// Function LearningAgents.LearningAgentsInteractor.PerformActions
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsInteractor::PerformActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "PerformActions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.PerformAgentAction
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class ULearningAgentsActionObject*InActionObject                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsActionObjectElement&InActionObjectElement                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::PerformAgentAction(const class ULearningAgentsActionObject* InActionObject, const struct FLearningAgentsActionObjectElement& InActionObjectElement, const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "PerformAgentAction");

	Params::LearningAgentsInteractor_PerformAgentAction Parms{};

	Parms.InActionObject = InActionObject;
	Parms.InActionObjectElement = std::move(InActionObjectElement);
	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.PerformAgentActions
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class ULearningAgentsActionObject*InActionObject                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsActionObjectElement>&InActionObjectElements                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::PerformAgentActions(const class ULearningAgentsActionObject* InActionObject, const TArray<struct FLearningAgentsActionObjectElement>& InActionObjectElements, const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "PerformAgentActions");

	Params::LearningAgentsInteractor_PerformAgentActions Parms{};

	Parms.InActionObject = InActionObject;
	Parms.InActionObjectElements = std::move(InActionObjectElements);
	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.SetActionVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    ActionVector                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             InActionCompatibilityHash                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncrementIteration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::SetActionVector(const TArray<float>& ActionVector, const int32 InActionCompatibilityHash, const int32 AgentId, bool bIncrementIteration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "SetActionVector");

	Params::LearningAgentsInteractor_SetActionVector Parms{};

	Parms.ActionVector = std::move(ActionVector);
	Parms.InActionCompatibilityHash = InActionCompatibilityHash;
	Parms.AgentId = AgentId;
	Parms.bIncrementIteration = bIncrementIteration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.SetObservationVector
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    ObservationVector                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             InObservationCompatibilityHash                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncrementIteration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::SetObservationVector(const TArray<float>& ObservationVector, const int32 InObservationCompatibilityHash, const int32 AgentId, bool bIncrementIteration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "SetObservationVector");

	Params::LearningAgentsInteractor_SetObservationVector Parms{};

	Parms.ObservationVector = std::move(ObservationVector);
	Parms.InObservationCompatibilityHash = InObservationCompatibilityHash;
	Parms.AgentId = AgentId;
	Parms.bIncrementIteration = bIncrementIteration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.SetupInteractor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::SetupInteractor(class ULearningAgentsManager* InManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "SetupInteractor");

	Params::LearningAgentsInteractor_SetupInteractor Parms{};

	Parms.InManager = InManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsInteractor.SpecifyAgentAction
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLearningAgentsActionSchemaElement*OutActionSchemaElement                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class ULearningAgentsActionSchema*      InActionSchema                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::SpecifyAgentAction(struct FLearningAgentsActionSchemaElement* OutActionSchemaElement, class ULearningAgentsActionSchema* InActionSchema)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "SpecifyAgentAction");

	Params::LearningAgentsInteractor_SpecifyAgentAction Parms{};

	Parms.InActionSchema = InActionSchema;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActionSchemaElement != nullptr)
		*OutActionSchemaElement = std::move(Parms.OutActionSchemaElement);
}


// Function LearningAgents.LearningAgentsInteractor.SpecifyAgentObservation
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FLearningAgentsObservationSchemaElement*OutObservationSchemaElement                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class ULearningAgentsObservationSchema* InObservationSchema                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsInteractor::SpecifyAgentObservation(struct FLearningAgentsObservationSchemaElement* OutObservationSchemaElement, class ULearningAgentsObservationSchema* InObservationSchema)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "SpecifyAgentObservation");

	Params::LearningAgentsInteractor_SpecifyAgentObservation Parms{};

	Parms.InObservationSchema = InObservationSchema;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutObservationSchemaElement != nullptr)
		*OutObservationSchemaElement = std::move(Parms.OutObservationSchemaElement);
}


// Function LearningAgents.LearningAgentsInteractor.GetActionDistributionVectorSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsInteractor::GetActionDistributionVectorSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetActionDistributionVectorSize");

	Params::LearningAgentsInteractor_GetActionDistributionVectorSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.GetActionEncodedVectorSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsInteractor::GetActionEncodedVectorSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetActionEncodedVectorSize");

	Params::LearningAgentsInteractor_GetActionEncodedVectorSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.GetActionVectorSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsInteractor::GetActionVectorSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetActionVectorSize");

	Params::LearningAgentsInteractor_GetActionVectorSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.GetObservationEncodedVectorSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsInteractor::GetObservationEncodedVectorSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetObservationEncodedVectorSize");

	Params::LearningAgentsInteractor_GetObservationEncodedVectorSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.GetObservationVectorSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsInteractor::GetObservationVectorSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "GetObservationVectorSize");

	Params::LearningAgentsInteractor_GetObservationVectorSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.HasActionVector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsInteractor::HasActionVector(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "HasActionVector");

	Params::LearningAgentsInteractor_HasActionVector Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsInteractor.HasObservationVector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsInteractor::HasObservationVector(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsInteractor", "HasObservationVector");

	Params::LearningAgentsInteractor_HasObservationVector Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.AddAgent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Agent                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsManager::AddAgent(class UObject* Agent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "AddAgent");

	Params::LearningAgentsManager_AddAgent Parms{};

	Parms.Agent = Agent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.AddAgents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>*                          OutAgentIds                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class UObject*>&           InAgents                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManager::AddAgents(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "AddAgents");

	Params::LearningAgentsManager_AddAgents Parms{};

	Parms.InAgents = std::move(InAgents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgentIds != nullptr)
		*OutAgentIds = std::move(Parms.OutAgentIds);
}


// Function LearningAgents.LearningAgentsManager.AddListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManagerListener*   Listener                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::AddListener(class ULearningAgentsManagerListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "AddListener");

	Params::LearningAgentsManager_AddListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.RemoveAgent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::RemoveAgent(const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "RemoveAgent");

	Params::LearningAgentsManager_RemoveAgent Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.RemoveAgents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManager::RemoveAgents(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "RemoveAgents");

	Params::LearningAgentsManager_RemoveAgents Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.RemoveAllAgents
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsManager::RemoveAllAgents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "RemoveAllAgents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.RemoveListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsManagerListener*   Listener                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::RemoveListener(class ULearningAgentsManagerListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "RemoveListener");

	Params::LearningAgentsManager_RemoveListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.ResetAgent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::ResetAgent(const int32 AgentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "ResetAgent");

	Params::LearningAgentsManager_ResetAgent Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.ResetAgents
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManager::ResetAgents(const TArray<int32>& AgentIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "ResetAgents");

	Params::LearningAgentsManager_ResetAgents Parms{};

	Parms.AgentIds = std::move(AgentIds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.ResetAllAgents
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsManager::ResetAllAgents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "ResetAllAgents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsManager.GetAgent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* ULearningAgentsManager::GetAgent(const int32 AgentId, const TSubclassOf<class UObject> AgentClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAgent");

	Params::LearningAgentsManager_GetAgent Parms{};

	Parms.AgentId = AgentId;
	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.GetAgentId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          Agent                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsManager::GetAgentId(class UObject* Agent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAgentId");

	Params::LearningAgentsManager_GetAgentId Parms{};

	Parms.Agent = Agent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.GetAgentIds
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<int32>*                          OutAgentIds                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<class UObject*>&           InAgents                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsManager::GetAgentIds(TArray<int32>* OutAgentIds, const TArray<class UObject*>& InAgents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAgentIds");

	Params::LearningAgentsManager_GetAgentIds Parms{};

	Parms.InAgents = std::move(InAgents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgentIds != nullptr)
		*OutAgentIds = std::move(Parms.OutAgentIds);
}


// Function LearningAgents.LearningAgentsManager.GetAgentNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsManager::GetAgentNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAgentNum");

	Params::LearningAgentsManager_GetAgentNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.GetAgents
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class UObject*>*                 OutAgents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<int32>&                    AgentIds                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::GetAgents(TArray<class UObject*>* OutAgents, const TArray<int32>& AgentIds, const TSubclassOf<class UObject> AgentClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAgents");

	Params::LearningAgentsManager_GetAgents Parms{};

	Parms.AgentIds = std::move(AgentIds);
	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgents != nullptr)
		*OutAgents = std::move(Parms.OutAgents);
}


// Function LearningAgents.LearningAgentsManager.GetAllAgents
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class UObject*>*                 OutAgents                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<int32>*                          OutAgentIds                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TSubclassOf<class UObject>        AgentClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsManager::GetAllAgents(TArray<class UObject*>* OutAgents, TArray<int32>* OutAgentIds, const TSubclassOf<class UObject> AgentClass) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetAllAgents");

	Params::LearningAgentsManager_GetAllAgents Parms{};

	Parms.AgentClass = AgentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAgents != nullptr)
		*OutAgents = std::move(Parms.OutAgents);

	if (OutAgentIds != nullptr)
		*OutAgentIds = std::move(Parms.OutAgentIds);
}


// Function LearningAgents.LearningAgentsManager.GetMaxAgentNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsManager::GetMaxAgentNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "GetMaxAgentNum");

	Params::LearningAgentsManager_GetMaxAgentNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.HasAgent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsManager::HasAgent(const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "HasAgent");

	Params::LearningAgentsManager_HasAgent Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsManager.HasAgentObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          Agent                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsManager::HasAgentObject(class UObject* Agent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsManager", "HasAgentObject");

	Params::LearningAgentsManager_HasAgentObject Parms{};

	Parms.Agent = Agent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsNeuralNetwork.LoadNetworkFromAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsNeuralNetwork*     NeuralNetworkAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsNeuralNetwork::LoadNetworkFromAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsNeuralNetwork", "LoadNetworkFromAsset");

	Params::LearningAgentsNeuralNetwork_LoadNetworkFromAsset Parms{};

	Parms.NeuralNetworkAsset = NeuralNetworkAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsNeuralNetwork.LoadNetworkFromSnapshot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFilePath&                 File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsNeuralNetwork::LoadNetworkFromSnapshot(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsNeuralNetwork", "LoadNetworkFromSnapshot");

	Params::LearningAgentsNeuralNetwork_LoadNetworkFromSnapshot Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsNeuralNetwork.ResetNetwork
// (Final, Native, Public)

void ULearningAgentsNeuralNetwork::ResetNetwork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsNeuralNetwork", "ResetNetwork");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsNeuralNetwork.SaveNetworkToAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULearningAgentsNeuralNetwork*     NeuralNetworkAsset                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsNeuralNetwork::SaveNetworkToAsset(class ULearningAgentsNeuralNetwork* NeuralNetworkAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsNeuralNetwork", "SaveNetworkToAsset");

	Params::LearningAgentsNeuralNetwork_SaveNetworkToAsset Parms{};

	Parms.NeuralNetworkAsset = NeuralNetworkAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsNeuralNetwork.SaveNetworkToSnapshot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FFilePath&                 File                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsNeuralNetwork::SaveNetworkToSnapshot(const struct FFilePath& File)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsNeuralNetwork", "SaveNetworkToSnapshot");

	Params::LearningAgentsNeuralNetwork_SaveNetworkToSnapshot Parms{};

	Parms.File = std::move(File);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsObservations.FindEnumByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UEnum*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnum* ULearningAgentsObservations::FindEnumByName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "FindEnumByName");

	Params::LearningAgentsObservations_FindEnumByName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetAngleObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetAngleObservation(float* OutAngle, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const float RelativeAngle, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetAngleObservation");

	Params::LearningAgentsObservations_GetAngleObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetAngleObservationRadians
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetAngleObservationRadians(float* OutAngle, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const float RelativeAngle, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetAngleObservationRadians");

	Params::LearningAgentsObservations_GetAngleObservationRadians Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetArrayObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetArrayObservation(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const int32 MaxNum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetArrayObservation");

	Params::LearningAgentsObservations_GetArrayObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.MaxNum = MaxNum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetArrayObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetArrayObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetArrayObservationNum");

	Params::LearningAgentsObservations_GetArrayObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetBitmaskObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutBitmaskValue                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetBitmaskObservation(int32* OutBitmaskValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class UEnum* Enum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetBitmaskObservation");

	Params::LearningAgentsObservations_GetBitmaskObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Enum = Enum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBitmaskValue != nullptr)
		*OutBitmaskValue = Parms.OutBitmaskValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetBoolObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   bOutValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetBoolObservation(bool* bOutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetBoolObservation");

	Params::LearningAgentsObservations_GetBoolObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutValue != nullptr)
		*bOutValue = Parms.bOutValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetContinuousObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>*                          OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetContinuousObservation(TArray<float>* OutValues, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetContinuousObservation");

	Params::LearningAgentsObservations_GetContinuousObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetContinuousObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetContinuousObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetContinuousObservationNum");

	Params::LearningAgentsObservations_GetContinuousObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetCountObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetCountObservation(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const int32 MaxNum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetCountObservation");

	Params::LearningAgentsObservations_GetCountObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.MaxNum = MaxNum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetDirectionAlongSplineObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetDirectionAlongSplineObservation(struct FVector* OutDirection, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetDirectionAlongSplineObservation");

	Params::LearningAgentsObservations_GetDirectionAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetDirectionObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutDirection                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetDirectionObservation(struct FVector* OutDirection, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetDirectionObservation");

	Params::LearningAgentsObservations_GetDirectionObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDirection != nullptr)
		*OutDirection = std::move(Parms.OutDirection);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetEitherObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELearningAgentsEitherObservation*       OutEither                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetEitherObservation(ELearningAgentsEitherObservation* OutEither, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetEitherObservation");

	Params::LearningAgentsObservations_GetEitherObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEither != nullptr)
		*OutEither = Parms.OutEither;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetEncodingObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsObservationObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetEncodingObservation(struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetEncodingObservation");

	Params::LearningAgentsObservations_GetEncodingObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetEnumObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8*                                  OutEnumValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetEnumObservation(uint8* OutEnumValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class UEnum* Enum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetEnumObservation");

	Params::LearningAgentsObservations_GetEnumObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Enum = Enum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEnumValue != nullptr)
		*OutEnumValue = Parms.OutEnumValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetExclusiveDiscreteObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetExclusiveDiscreteObservation(int32* OutIndex, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetExclusiveDiscreteObservation");

	Params::LearningAgentsObservations_GetExclusiveDiscreteObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndex != nullptr)
		*OutIndex = Parms.OutIndex;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetExclusiveUnionObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName*                            OutElementName                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetExclusiveUnionObservation(class FName* OutElementName, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetExclusiveUnionObservation");

	Params::LearningAgentsObservations_GetExclusiveUnionObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementName != nullptr)
		*OutElementName = Parms.OutElementName;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetFloatObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetFloatObservation(float* OutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetFloatObservation");

	Params::LearningAgentsObservations_GetFloatObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetInclusiveDiscreteObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>*                          OutIndices                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetInclusiveDiscreteObservation(TArray<int32>* OutIndices, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetInclusiveDiscreteObservation");

	Params::LearningAgentsObservations_GetInclusiveDiscreteObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIndices != nullptr)
		*OutIndices = std::move(Parms.OutIndices);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetInclusiveDiscreteObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetInclusiveDiscreteObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetInclusiveDiscreteObservationNum");

	Params::LearningAgentsObservations_GetInclusiveDiscreteObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetInclusiveUnionObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetInclusiveUnionObservation(TMap<class FName, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetInclusiveUnionObservation");

	Params::LearningAgentsObservations_GetInclusiveUnionObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetInclusiveUnionObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetInclusiveUnionObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetInclusiveUnionObservationNum");

	Params::LearningAgentsObservations_GetInclusiveUnionObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetInclusiveUnionObservationToArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>*                    OutElementNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetInclusiveUnionObservationToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetInclusiveUnionObservationToArrays");

	Params::LearningAgentsObservations_GetInclusiveUnionObservationToArrays Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementNames != nullptr)
		*OutElementNames = std::move(Parms.OutElementNames);

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetLocationAlongSplineObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetLocationAlongSplineObservation(struct FVector* OutLocation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetLocationAlongSplineObservation");

	Params::LearningAgentsObservations_GetLocationAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetLocationObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetLocationObservation(struct FVector* OutLocation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetLocationObservation");

	Params::LearningAgentsObservations_GetLocationObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetMapObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetMapObservation(TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetMapObservation");

	Params::LearningAgentsObservations_GetMapObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetMapObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetMapObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetMapObservationNum");

	Params::LearningAgentsObservations_GetMapObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetMapObservationToArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLearningAgentsObservationObjectElement>*OutKeys                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLearningAgentsObservationObjectElement>*OutValues                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetMapObservationToArrays(TArray<struct FLearningAgentsObservationObjectElement>* OutKeys, TArray<struct FLearningAgentsObservationObjectElement>* OutValues, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetMapObservationToArrays");

	Params::LearningAgentsObservations_GetMapObservationToArrays Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKeys != nullptr)
		*OutKeys = std::move(Parms.OutKeys);

	if (OutValues != nullptr)
		*OutValues = std::move(Parms.OutValues);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetNullObservation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetNullObservation(const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetNullObservation");

	Params::LearningAgentsObservations_GetNullObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetOptionalObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ELearningAgentsOptionalObservation*     OutOption                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElement*OutElement                                             (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetOptionalObservation(ELearningAgentsOptionalObservation* OutOption, struct FLearningAgentsObservationObjectElement* OutElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetOptionalObservation");

	Params::LearningAgentsObservations_GetOptionalObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOption != nullptr)
		*OutOption = Parms.OutOption;

	if (OutElement != nullptr)
		*OutElement = std::move(Parms.OutElement);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetPairObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLearningAgentsObservationObjectElement*OutKey                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElement*OutValue                                               (Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetPairObservation(struct FLearningAgentsObservationObjectElement* OutKey, struct FLearningAgentsObservationObjectElement* OutValue, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetPairObservation");

	Params::LearningAgentsObservations_GetPairObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutKey != nullptr)
		*OutKey = std::move(Parms.OutKey);

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetProportionAlongRayObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float*                                  OutProportion                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetProportionAlongRayObservation(float* OutProportion, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetProportionAlongRayObservation");

	Params::LearningAgentsObservations_GetProportionAlongRayObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutProportion != nullptr)
		*OutProportion = Parms.OutProportion;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetProportionAlongSplineObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   bOutIsClosedLoop                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutPropotion                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetProportionAlongSplineObservation(bool* bOutIsClosedLoop, float* OutAngle, float* OutPropotion, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetProportionAlongSplineObservation");

	Params::LearningAgentsObservations_GetProportionAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutIsClosedLoop != nullptr)
		*bOutIsClosedLoop = Parms.bOutIsClosedLoop;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	if (OutPropotion != nullptr)
		*OutPropotion = Parms.OutPropotion;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetRotationObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator*                        OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetRotationObservation(struct FRotator* OutRotation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FRotator& RelativeRotation, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetRotationObservation");

	Params::LearningAgentsObservations_GetRotationObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetRotationObservationAsQuat
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FQuat*                           OutRotation                                            (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     RelativeRotation                                       (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetRotationObservationAsQuat(struct FQuat* OutRotation, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FQuat& RelativeRotation, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetRotationObservationAsQuat");

	Params::LearningAgentsObservations_GetRotationObservationAsQuat Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetScaleObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetScaleObservation(struct FVector* OutScale, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FVector& RelativeScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetScaleObservation");

	Params::LearningAgentsObservations_GetScaleObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeScale = std::move(RelativeScale);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScale != nullptr)
		*OutScale = std::move(Parms.OutScale);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetSetObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSet<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetSetObservation(TSet<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetSetObservation");

	Params::LearningAgentsObservations_GetSetObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetSetObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetSetObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetSetObservationNum");

	Params::LearningAgentsObservations_GetSetObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetSetObservationToArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetSetObservationToArray(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetSetObservationToArray");

	Params::LearningAgentsObservations_GetSetObservationToArray Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetStaticArrayObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetStaticArrayObservation(TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetStaticArrayObservation");

	Params::LearningAgentsObservations_GetStaticArrayObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetStaticArrayObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetStaticArrayObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetStaticArrayObservationNum");

	Params::LearningAgentsObservations_GetStaticArrayObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetStructObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetStructObservation(TMap<class FName, struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetStructObservation");

	Params::LearningAgentsObservations_GetStructObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetStructObservationNum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  OutNum                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetStructObservationNum(int32* OutNum, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetStructObservationNum");

	Params::LearningAgentsObservations_GetStructObservationNum Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNum != nullptr)
		*OutNum = Parms.OutNum;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetStructObservationToArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>*                    OutElementNames                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FLearningAgentsObservationObjectElement>*OutElements                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetStructObservationToArrays(TArray<class FName>* OutElementNames, TArray<struct FLearningAgentsObservationObjectElement>* OutElements, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetStructObservationToArrays");

	Params::LearningAgentsObservations_GetStructObservationToArrays Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutElementNames != nullptr)
		*OutElementNames = std::move(Parms.OutElementNames);

	if (OutElements != nullptr)
		*OutElements = std::move(Parms.OutElements);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetTransformObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform*                      OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetTransformObservation(struct FTransform* OutTransform, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetTransformObservation");

	Params::LearningAgentsObservations_GetTransformObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.GetVelocityObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector*                         OutVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::GetVelocityObservation(struct FVector* OutVelocity, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const struct FTransform& RelativeTransform, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "GetVelocityObservation");

	Params::LearningAgentsObservations_GetVelocityObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVelocity != nullptr)
		*OutVelocity = std::move(Parms.OutVelocity);

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.LogObservation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsObservations::LogObservation(const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "LogObservation");

	Params::LearningAgentsObservations_LogObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsObservations.MakeAngleObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeAngleObservation(class ULearningAgentsObservationObject* Object, const float Angle, const float RelativeAngle, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeAngleObservation");

	Params::LearningAgentsObservations_MakeAngleObservation Parms{};

	Parms.Object = Object;
	Parms.Angle = Angle;
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeAngleObservationRadians
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             RelativeAngle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeAngleObservationRadians(class ULearningAgentsObservationObject* Object, const float Angle, const float RelativeAngle, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeAngleObservationRadians");

	Params::LearningAgentsObservations_MakeAngleObservationRadians Parms{};

	Parms.Object = Object;
	Parms.Angle = Angle;
	Parms.RelativeAngle = RelativeAngle;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeArrayObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeArrayObservation(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const int32 MaxNum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeArrayObservation");

	Params::LearningAgentsObservations_MakeArrayObservation Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.MaxNum = MaxNum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeBitmaskObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             BitmaskValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeBitmaskObservation(class ULearningAgentsObservationObject* Object, const class UEnum* Enum, const int32 BitmaskValue, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeBitmaskObservation");

	Params::LearningAgentsObservations_MakeBitmaskObservation Parms{};

	Parms.Object = Object;
	Parms.Enum = Enum;
	Parms.BitmaskValue = BitmaskValue;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeBoolObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeBoolObservation(class ULearningAgentsObservationObject* Object, const bool bValue, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeBoolObservation");

	Params::LearningAgentsObservations_MakeBoolObservation Parms{};

	Parms.Object = Object;
	Parms.bValue = bValue;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeContinuousObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeContinuousObservation(class ULearningAgentsObservationObject* Object, const TArray<float>& Values, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeContinuousObservation");

	Params::LearningAgentsObservations_MakeContinuousObservation Parms{};

	Parms.Object = Object;
	Parms.Values = std::move(Values);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeCountObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Num                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeCountObservation(class ULearningAgentsObservationObject* Object, const int32 Num, const int32 MaxNum, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeCountObservation");

	Params::LearningAgentsObservations_MakeCountObservation Parms{};

	Parms.Object = Object;
	Parms.Num = Num;
	Parms.MaxNum = MaxNum;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeDirectionAlongSplineObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           SplineComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceAlongSpline                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VisualLoggerArrowLength                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeDirectionAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeDirectionAlongSplineObservation");

	Params::LearningAgentsObservations_MakeDirectionAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.SplineComponent = SplineComponent;
	Parms.DistanceAlongSpline = DistanceAlongSpline;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerArrowLength = VisualLoggerArrowLength;
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeDirectionObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerDirectionLocation                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VisualLoggerArrowLength                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeDirectionObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Direction, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerDirectionLocation, const struct FVector& VisualLoggerLocation, const float VisualLoggerArrowLength, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeDirectionObservation");

	Params::LearningAgentsObservations_MakeDirectionObservation Parms{};

	Parms.Object = Object;
	Parms.Direction = std::move(Direction);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerDirectionLocation = std::move(VisualLoggerDirectionLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerArrowLength = VisualLoggerArrowLength;
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeEitherAObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&A                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeEitherAObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& A, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeEitherAObservation");

	Params::LearningAgentsObservations_MakeEitherAObservation Parms{};

	Parms.Object = Object;
	Parms.A = std::move(A);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeEitherBObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&B                                                      (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeEitherBObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& B, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeEitherBObservation");

	Params::LearningAgentsObservations_MakeEitherBObservation Parms{};

	Parms.Object = Object;
	Parms.B = std::move(B);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeEitherObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsEitherObservation  Either                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeEitherObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const ELearningAgentsEitherObservation Either, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeEitherObservation");

	Params::LearningAgentsObservations_MakeEitherObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Either = Either;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeEncodingObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeEncodingObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeEncodingObservation");

	Params::LearningAgentsObservations_MakeEncodingObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeEnumObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const uint8                             EnumValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeEnumObservation(class ULearningAgentsObservationObject* Object, const class UEnum* Enum, const uint8 EnumValue, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeEnumObservation");

	Params::LearningAgentsObservations_MakeEnumObservation Parms{};

	Parms.Object = Object;
	Parms.Enum = Enum;
	Parms.EnumValue = EnumValue;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeExclusiveDiscreteObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             DiscreteIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeExclusiveDiscreteObservation(class ULearningAgentsObservationObject* Object, const int32 DiscreteIndex, const int32 Size, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeExclusiveDiscreteObservation");

	Params::LearningAgentsObservations_MakeExclusiveDiscreteObservation Parms{};

	Parms.Object = Object;
	Parms.DiscreteIndex = DiscreteIndex;
	Parms.Size = Size;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeExclusiveUnionObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       ElementName                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeExclusiveUnionObservation(class ULearningAgentsObservationObject* Object, const class FName ElementName, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeExclusiveUnionObservation");

	Params::LearningAgentsObservations_MakeExclusiveUnionObservation Parms{};

	Parms.Object = Object;
	Parms.ElementName = ElementName;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeFloatObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeFloatObservation(class ULearningAgentsObservationObject* Object, const float Value, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeFloatObservation");

	Params::LearningAgentsObservations_MakeFloatObservation Parms{};

	Parms.Object = Object;
	Parms.Value = Value;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeInclusiveDiscreteObservation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<int32>&                    DiscreteIndices                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeInclusiveDiscreteObservation(class ULearningAgentsObservationObject* Object, const TArray<int32>& DiscreteIndices, const int32 Size, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeInclusiveDiscreteObservation");

	Params::LearningAgentsObservations_MakeInclusiveDiscreteObservation Parms{};

	Parms.Object = Object;
	Parms.DiscreteIndices = std::move(DiscreteIndices);
	Parms.Size = Size;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeInclusiveUnionObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeInclusiveUnionObservation(class ULearningAgentsObservationObject* Object, const TMap<class FName, struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeInclusiveUnionObservation");

	Params::LearningAgentsObservations_MakeInclusiveUnionObservation Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeInclusiveUnionObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeInclusiveUnionObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeInclusiveUnionObservationFromArrays");

	Params::LearningAgentsObservations_MakeInclusiveUnionObservationFromArrays Parms{};

	Parms.Object = Object;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeLocationAlongSplineObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           SplineComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceAlongSpline                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeLocationAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeLocationAlongSplineObservation");

	Params::LearningAgentsObservations_MakeLocationAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.SplineComponent = SplineComponent;
	Parms.DistanceAlongSpline = DistanceAlongSpline;
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeLocationObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeLocationObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Location, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeLocationObservation");

	Params::LearningAgentsObservations_MakeLocationObservation Parms{};

	Parms.Object = Object;
	Parms.Location = std::move(Location);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeMapObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>&Map                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeMapObservation(class ULearningAgentsObservationObject* Object, const TMap<struct FLearningAgentsObservationObjectElement, struct FLearningAgentsObservationObjectElement>& Map, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeMapObservation");

	Params::LearningAgentsObservations_MakeMapObservation Parms{};

	Parms.Object = Object;
	Parms.Map = std::move(Map);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeMapObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeMapObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Keys, const TArray<struct FLearningAgentsObservationObjectElement>& Values, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeMapObservationFromArrays");

	Params::LearningAgentsObservations_MakeMapObservationFromArrays Parms{};

	Parms.Object = Object;
	Parms.Keys = std::move(Keys);
	Parms.Values = std::move(Values);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeNullObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeNullObservation(class ULearningAgentsObservationObject* Object, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeNullObservation");

	Params::LearningAgentsObservations_MakeNullObservation Parms{};

	Parms.Object = Object;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeOptionalNullObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeOptionalNullObservation(class ULearningAgentsObservationObject* Object, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeOptionalNullObservation");

	Params::LearningAgentsObservations_MakeOptionalNullObservation Parms{};

	Parms.Object = Object;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeOptionalObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsOptionalObservationOption                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeOptionalObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const ELearningAgentsOptionalObservation Option, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeOptionalObservation");

	Params::LearningAgentsObservations_MakeOptionalObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.Option = Option;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeOptionalValidObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Element                                                (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeOptionalValidObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Element, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeOptionalValidObservation");

	Params::LearningAgentsObservations_MakeOptionalValidObservation Parms{};

	Parms.Object = Object;
	Parms.Element = std::move(Element);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakePairObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Key                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&Value                                                  (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakePairObservation(class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& Key, const struct FLearningAgentsObservationObjectElement& Value, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakePairObservation");

	Params::LearningAgentsObservations_MakePairObservation Parms{};

	Parms.Object = Object;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeProportionAlongRayObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayStart                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RayEnd                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RayTransform                                           (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ECollisionChannel                 CollisionChannel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeProportionAlongRayObservation(class ULearningAgentsObservationObject* Object, const struct FVector& RayStart, const struct FVector& RayEnd, const struct FTransform& RayTransform, const ECollisionChannel CollisionChannel, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeProportionAlongRayObservation");

	Params::LearningAgentsObservations_MakeProportionAlongRayObservation Parms{};

	Parms.Object = Object;
	Parms.RayStart = std::move(RayStart);
	Parms.RayEnd = std::move(RayEnd);
	Parms.RayTransform = std::move(RayTransform);
	Parms.CollisionChannel = CollisionChannel;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeProportionAlongSplineObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USplineComponent*           SplineComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             DistanceAlongSpline                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeProportionAlongSplineObservation(class ULearningAgentsObservationObject* Object, const class USplineComponent* SplineComponent, const float DistanceAlongSpline, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeProportionAlongSplineObservation");

	Params::LearningAgentsObservations_MakeProportionAlongSplineObservation Parms{};

	Parms.Object = Object;
	Parms.SplineComponent = SplineComponent;
	Parms.DistanceAlongSpline = DistanceAlongSpline;
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeRotationObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  RelativeRotation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeRotationObservation(class ULearningAgentsObservationObject* Object, const struct FRotator& Rotation, const struct FRotator& RelativeRotation, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeRotationObservation");

	Params::LearningAgentsObservations_MakeRotationObservation Parms{};

	Parms.Object = Object;
	Parms.Rotation = std::move(Rotation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocation = std::move(VisualLoggerRotationLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeRotationObservationFromQuat
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     Rotation                                               (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FQuat&                     RelativeRotation                                       (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerRotationLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeRotationObservationFromQuat(class ULearningAgentsObservationObject* Object, const struct FQuat& Rotation, const struct FQuat& RelativeRotation, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerRotationLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeRotationObservationFromQuat");

	Params::LearningAgentsObservations_MakeRotationObservationFromQuat Parms{};

	Parms.Object = Object;
	Parms.Rotation = std::move(Rotation);
	Parms.RelativeRotation = std::move(RelativeRotation);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerRotationLocation = std::move(VisualLoggerRotationLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeScaleObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   RelativeScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerScaleLocation                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeScaleObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Scale, const struct FVector& RelativeScale, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerScaleLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeScaleObservation");

	Params::LearningAgentsObservations_MakeScaleObservation Parms{};

	Parms.Object = Object;
	Parms.Scale = std::move(Scale);
	Parms.RelativeScale = std::move(RelativeScale);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerScaleLocation = std::move(VisualLoggerScaleLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeSetObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeSetObservation(class ULearningAgentsObservationObject* Object, const TSet<struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeSetObservation");

	Params::LearningAgentsObservations_MakeSetObservation Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeSetObservationFromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeSetObservationFromArray(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeSetObservationFromArray");

	Params::LearningAgentsObservations_MakeSetObservationFromArray Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeStaticArrayObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeStaticArrayObservation(class ULearningAgentsObservationObject* Object, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeStaticArrayObservation");

	Params::LearningAgentsObservations_MakeStaticArrayObservation Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeStructObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeStructObservation(class ULearningAgentsObservationObject* Object, const TMap<class FName, struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeStructObservation");

	Params::LearningAgentsObservations_MakeStructObservation Parms{};

	Parms.Object = Object;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeStructObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationObjectElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeStructObservationFromArrays(class ULearningAgentsObservationObject* Object, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationObjectElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeStructObservationFromArrays");

	Params::LearningAgentsObservations_MakeStructObservationFromArrays Parms{};

	Parms.Object = Object;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeTransformObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeTransformObservation(class ULearningAgentsObservationObject* Object, const struct FTransform& Transform, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeTransformObservation");

	Params::LearningAgentsObservations_MakeTransformObservation Parms{};

	Parms.Object = Object;
	Parms.Transform = std::move(Transform);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.MakeVelocityObservation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationObject* Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                RelativeTransform                                      (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bVisualLoggerEnabled                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsManagerListener*   VisualLoggerListener                                   (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             VisualLoggerAgentId                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerVelocityLocation                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   VisualLoggerLocation                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              VisualLoggerColor                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationObjectElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationObjectElement ULearningAgentsObservations::MakeVelocityObservation(class ULearningAgentsObservationObject* Object, const struct FVector& Velocity, const struct FTransform& RelativeTransform, const class FName tag, const bool bVisualLoggerEnabled, class ULearningAgentsManagerListener* VisualLoggerListener, const int32 VisualLoggerAgentId, const struct FVector& VisualLoggerVelocityLocation, const struct FVector& VisualLoggerLocation, const struct FLinearColor& VisualLoggerColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "MakeVelocityObservation");

	Params::LearningAgentsObservations_MakeVelocityObservation Parms{};

	Parms.Object = Object;
	Parms.Velocity = std::move(Velocity);
	Parms.RelativeTransform = std::move(RelativeTransform);
	Parms.tag = tag;
	Parms.bVisualLoggerEnabled = bVisualLoggerEnabled;
	Parms.VisualLoggerListener = VisualLoggerListener;
	Parms.VisualLoggerAgentId = VisualLoggerAgentId;
	Parms.VisualLoggerVelocityLocation = std::move(VisualLoggerVelocityLocation);
	Parms.VisualLoggerLocation = std::move(VisualLoggerLocation);
	Parms.VisualLoggerColor = std::move(VisualLoggerColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.ProjectTransformOntoGroundPlane
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                Transform                                              (ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   LocalForwardVector                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             GroundPlaneHeight                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform ULearningAgentsObservations::ProjectTransformOntoGroundPlane(const struct FTransform& Transform, const struct FVector& LocalForwardVector, const float GroundPlaneHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "ProjectTransformOntoGroundPlane");

	Params::LearningAgentsObservations_ProjectTransformOntoGroundPlane Parms{};

	Parms.Transform = std::move(Transform);
	Parms.LocalForwardVector = std::move(LocalForwardVector);
	Parms.GroundPlaneHeight = GroundPlaneHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyAngleObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyAngleObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyAngleObservation");

	Params::LearningAgentsObservations_SpecifyAngleObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyArrayObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionEncodingSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionHeadNum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ValueEncodingSize                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyArrayObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyArrayObservation");

	Params::LearningAgentsObservations_SpecifyArrayObservation Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.MaxNum = MaxNum;
	Parms.AttentionEncodingSize = AttentionEncodingSize;
	Parms.AttentionHeadNum = AttentionHeadNum;
	Parms.ValueEncodingSize = ValueEncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyBitmaskObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyBitmaskObservation(class ULearningAgentsObservationSchema* Schema, const class UEnum* Enum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyBitmaskObservation");

	Params::LearningAgentsObservations_SpecifyBitmaskObservation Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyBoolObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyBoolObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyBoolObservation");

	Params::LearningAgentsObservations_SpecifyBoolObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyContinuousObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyContinuousObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const float Scale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyContinuousObservation");

	Params::LearningAgentsObservations_SpecifyContinuousObservation Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.Scale = Scale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyCountObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyCountObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyCountObservation");

	Params::LearningAgentsObservations_SpecifyCountObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyDirectionAlongSplineObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyDirectionAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyDirectionAlongSplineObservation");

	Params::LearningAgentsObservations_SpecifyDirectionAlongSplineObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyDirectionObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyDirectionObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyDirectionObservation");

	Params::LearningAgentsObservations_SpecifyDirectionObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyEitherObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&A                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&B                                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyEitherObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& A, const struct FLearningAgentsObservationSchemaElement& B, const int32 EncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyEitherObservation");

	Params::LearningAgentsObservations_SpecifyEitherObservation Parms{};

	Parms.Schema = Schema;
	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.EncodingSize = EncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyEncodingObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             HiddenLayerNum                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const ELearningAgentsActivationFunction ActivationFunction                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyEncodingObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 EncodingSize, const int32 HiddenLayerNum, const ELearningAgentsActivationFunction ActivationFunction, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyEncodingObservation");

	Params::LearningAgentsObservations_SpecifyEncodingObservation Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.EncodingSize = EncodingSize;
	Parms.HiddenLayerNum = HiddenLayerNum;
	Parms.ActivationFunction = ActivationFunction;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyEnumObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UEnum*                      Enum                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyEnumObservation(class ULearningAgentsObservationSchema* Schema, const class UEnum* Enum, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyEnumObservation");

	Params::LearningAgentsObservations_SpecifyEnumObservation Parms{};

	Parms.Schema = Schema;
	Parms.Enum = Enum;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyExclusiveDiscreteObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyExclusiveDiscreteObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyExclusiveDiscreteObservation");

	Params::LearningAgentsObservations_SpecifyExclusiveDiscreteObservation Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyExclusiveUnionObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyExclusiveUnionObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const int32 EncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyExclusiveUnionObservation");

	Params::LearningAgentsObservations_SpecifyExclusiveUnionObservation Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.EncodingSize = EncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyExclusiveUnionObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyExclusiveUnionObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const int32 EncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyExclusiveUnionObservationFromArrays");

	Params::LearningAgentsObservations_SpecifyExclusiveUnionObservationFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.EncodingSize = EncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyFloatObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             FloatScale                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyFloatObservation(class ULearningAgentsObservationSchema* Schema, const float FloatScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyFloatObservation");

	Params::LearningAgentsObservations_SpecifyFloatObservation Parms{};

	Parms.Schema = Schema;
	Parms.FloatScale = FloatScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyInclusiveDiscreteObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Size                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyInclusiveDiscreteObservation(class ULearningAgentsObservationSchema* Schema, const int32 Size, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyInclusiveDiscreteObservation");

	Params::LearningAgentsObservations_SpecifyInclusiveDiscreteObservation Parms{};

	Parms.Schema = Schema;
	Parms.Size = Size;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyInclusiveUnionObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             AttentionEncodingSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionHeadNum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ValueEncodingSize                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyInclusiveUnionObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyInclusiveUnionObservation");

	Params::LearningAgentsObservations_SpecifyInclusiveUnionObservation Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.AttentionEncodingSize = AttentionEncodingSize;
	Parms.AttentionHeadNum = AttentionHeadNum;
	Parms.ValueEncodingSize = ValueEncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyInclusiveUnionObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             AttentionEncodingSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionHeadNum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ValueEncodingSize                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyInclusiveUnionObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyInclusiveUnionObservationFromArrays");

	Params::LearningAgentsObservations_SpecifyInclusiveUnionObservationFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.AttentionEncodingSize = AttentionEncodingSize;
	Parms.AttentionHeadNum = AttentionHeadNum;
	Parms.ValueEncodingSize = ValueEncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyLocationAlongSplineObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyLocationAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyLocationAlongSplineObservation");

	Params::LearningAgentsObservations_SpecifyLocationAlongSplineObservation Parms{};

	Parms.Schema = Schema;
	Parms.LocationScale = LocationScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyLocationObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyLocationObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyLocationObservation");

	Params::LearningAgentsObservations_SpecifyLocationObservation Parms{};

	Parms.Schema = Schema;
	Parms.LocationScale = LocationScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyMapObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&KeyElement                                             (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&ValueElement                                           (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionEncodingSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionHeadNum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ValueEncodingSize                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyMapObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& KeyElement, const struct FLearningAgentsObservationSchemaElement& ValueElement, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyMapObservation");

	Params::LearningAgentsObservations_SpecifyMapObservation Parms{};

	Parms.Schema = Schema;
	Parms.KeyElement = std::move(KeyElement);
	Parms.ValueElement = std::move(ValueElement);
	Parms.MaxNum = MaxNum;
	Parms.AttentionEncodingSize = AttentionEncodingSize;
	Parms.AttentionHeadNum = AttentionHeadNum;
	Parms.ValueEncodingSize = ValueEncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyNullObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyNullObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyNullObservation");

	Params::LearningAgentsObservations_SpecifyNullObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyOptionalObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             EncodingSize                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyOptionalObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 EncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyOptionalObservation");

	Params::LearningAgentsObservations_SpecifyOptionalObservation Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.EncodingSize = EncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyPairObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Key                                                    (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Value                                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyPairObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Key, const struct FLearningAgentsObservationSchemaElement& Value, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyPairObservation");

	Params::LearningAgentsObservations_SpecifyPairObservation Parms{};

	Parms.Schema = Schema;
	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyProportionAlongRayObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyProportionAlongRayObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyProportionAlongRayObservation");

	Params::LearningAgentsObservations_SpecifyProportionAlongRayObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyProportionAlongSplineObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyProportionAlongSplineObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyProportionAlongSplineObservation");

	Params::LearningAgentsObservations_SpecifyProportionAlongSplineObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyRotationObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyRotationObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyRotationObservation");

	Params::LearningAgentsObservations_SpecifyRotationObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyScaleObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyScaleObservation(class ULearningAgentsObservationSchema* Schema, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyScaleObservation");

	Params::LearningAgentsObservations_SpecifyScaleObservation Parms{};

	Parms.Schema = Schema;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifySetObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             MaxNum                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionEncodingSize                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             AttentionHeadNum                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ValueEncodingSize                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifySetObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 MaxNum, const int32 AttentionEncodingSize, const int32 AttentionHeadNum, const int32 ValueEncodingSize, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifySetObservation");

	Params::LearningAgentsObservations_SpecifySetObservation Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.MaxNum = MaxNum;
	Parms.AttentionEncodingSize = AttentionEncodingSize;
	Parms.AttentionHeadNum = AttentionHeadNum;
	Parms.ValueEncodingSize = ValueEncodingSize;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyStaticArrayObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&Element                                                (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Num                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyStaticArrayObservation(class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& Element, const int32 Num, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyStaticArrayObservation");

	Params::LearningAgentsObservations_SpecifyStaticArrayObservation Parms{};

	Parms.Schema = Schema;
	Parms.Element = std::move(Element);
	Parms.Num = Num;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyStructObservation
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyStructObservation(class ULearningAgentsObservationSchema* Schema, const TMap<class FName, struct FLearningAgentsObservationSchemaElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyStructObservation");

	Params::LearningAgentsObservations_SpecifyStructObservation Parms{};

	Parms.Schema = Schema;
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyStructObservationFromArrays
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>&              ElementNames                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<struct FLearningAgentsObservationSchemaElement>&Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyStructObservationFromArrays(class ULearningAgentsObservationSchema* Schema, const TArray<class FName>& ElementNames, const TArray<struct FLearningAgentsObservationSchemaElement>& Elements, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyStructObservationFromArrays");

	Params::LearningAgentsObservations_SpecifyStructObservationFromArrays Parms{};

	Parms.Schema = Schema;
	Parms.ElementNames = std::move(ElementNames);
	Parms.Elements = std::move(Elements);
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyTransformObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             LocationScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyTransformObservation(class ULearningAgentsObservationSchema* Schema, const float LocationScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyTransformObservation");

	Params::LearningAgentsObservations_SpecifyTransformObservation Parms{};

	Parms.Schema = Schema;
	Parms.LocationScale = LocationScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.SpecifyVelocityObservation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsObservationSchema* Schema                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             VelocityScale                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       tag                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLearningAgentsObservationSchemaElementReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLearningAgentsObservationSchemaElement ULearningAgentsObservations::SpecifyVelocityObservation(class ULearningAgentsObservationSchema* Schema, const float VelocityScale, const class FName tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "SpecifyVelocityObservation");

	Params::LearningAgentsObservations_SpecifyVelocityObservation Parms{};

	Parms.Schema = Schema;
	Parms.VelocityScale = VelocityScale;
	Parms.tag = tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsObservations.ValidateObservationObjectMatchesSchema
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULearningAgentsObservationSchema*Schema                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationSchemaElement&SchemaElement                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// const class ULearningAgentsObservationObject*Object                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsObservationObjectElement&ObjectElement                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULearningAgentsObservations::ValidateObservationObjectMatchesSchema(const class ULearningAgentsObservationSchema* Schema, const struct FLearningAgentsObservationSchemaElement& SchemaElement, const class ULearningAgentsObservationObject* Object, const struct FLearningAgentsObservationObjectElement& ObjectElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsObservations", "ValidateObservationObjectMatchesSchema");

	Params::LearningAgentsObservations_ValidateObservationObjectMatchesSchema Parms{};

	Parms.Schema = Schema;
	Parms.SchemaElement = std::move(SchemaElement);
	Parms.Object = Object;
	Parms.ObjectElement = std::move(ObjectElement);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsPolicy.MakePolicy
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ULearningAgentsPolicy>Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     EncoderNeuralNetworkAsset                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     PolicyNeuralNetworkAsset                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     DecoderNeuralNetworkAsset                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeEncoderNetwork                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeDecoderNetwork                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsPolicySettings&PolicySettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Seed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsPolicy*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsPolicy* ULearningAgentsPolicy::MakePolicy(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, TSubclassOf<class ULearningAgentsPolicy> Class_0, const class FName Name_0, class ULearningAgentsNeuralNetwork* EncoderNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* PolicyNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* DecoderNeuralNetworkAsset, const bool bReinitializeEncoderNetwork, const bool bReinitializePolicyNetwork, const bool bReinitializeDecoderNetwork, const struct FLearningAgentsPolicySettings& PolicySettings, const int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LearningAgentsPolicy", "MakePolicy");

	Params::LearningAgentsPolicy_MakePolicy Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.Class_0 = Class_0;
	Parms.Name_0 = Name_0;
	Parms.EncoderNeuralNetworkAsset = EncoderNeuralNetworkAsset;
	Parms.PolicyNeuralNetworkAsset = PolicyNeuralNetworkAsset;
	Parms.DecoderNeuralNetworkAsset = DecoderNeuralNetworkAsset;
	Parms.bReinitializeEncoderNetwork = bReinitializeEncoderNetwork;
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;
	Parms.bReinitializeDecoderNetwork = bReinitializeDecoderNetwork;
	Parms.PolicySettings = std::move(PolicySettings);
	Parms.Seed = Seed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsPolicy.DecodeAndSampleActions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             ActionNoiseScale                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsPolicy::DecodeAndSampleActions(const float ActionNoiseScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "DecodeAndSampleActions");

	Params::LearningAgentsPolicy_DecodeAndSampleActions Parms{};

	Parms.ActionNoiseScale = ActionNoiseScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.EncodeObservations
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsPolicy::EncodeObservations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "EncodeObservations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.EvaluatePolicy
// (Final, Native, Public, BlueprintCallable)

void ULearningAgentsPolicy::EvaluatePolicy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "EvaluatePolicy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.GetDecoderNetworkAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsNeuralNetwork*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsNeuralNetwork* ULearningAgentsPolicy::GetDecoderNetworkAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "GetDecoderNetworkAsset");

	Params::LearningAgentsPolicy_GetDecoderNetworkAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsPolicy.GetEncoderNetworkAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsNeuralNetwork*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsNeuralNetwork* ULearningAgentsPolicy::GetEncoderNetworkAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "GetEncoderNetworkAsset");

	Params::LearningAgentsPolicy_GetEncoderNetworkAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsPolicy.GetPolicyNetworkAsset
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ULearningAgentsNeuralNetwork*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULearningAgentsNeuralNetwork* ULearningAgentsPolicy::GetPolicyNetworkAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "GetPolicyNetworkAsset");

	Params::LearningAgentsPolicy_GetPolicyNetworkAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LearningAgents.LearningAgentsPolicy.RunInference
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             ActionNoiseScale                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsPolicy::RunInference(const float ActionNoiseScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "RunInference");

	Params::LearningAgentsPolicy_RunInference Parms{};

	Parms.ActionNoiseScale = ActionNoiseScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.SetMemoryState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<float>&                    InMemoryState                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULearningAgentsPolicy::SetMemoryState(const int32 AgentId, const TArray<float>& InMemoryState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "SetMemoryState");

	Params::LearningAgentsPolicy_SetMemoryState Parms{};

	Parms.AgentId = AgentId;
	Parms.InMemoryState = std::move(InMemoryState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.SetupPolicy
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ULearningAgentsManager*           InManager                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsInteractor*        InInteractor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     EncoderNeuralNetworkAsset                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     PolicyNeuralNetworkAsset                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULearningAgentsNeuralNetwork*     DecoderNeuralNetworkAsset                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeEncoderNetwork                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializePolicyNetwork                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              bReinitializeDecoderNetwork                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLearningAgentsPolicySettings&PolicySettings                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const int32                             Seed                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsPolicy::SetupPolicy(class ULearningAgentsManager* InManager, class ULearningAgentsInteractor* InInteractor, class ULearningAgentsNeuralNetwork* EncoderNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* PolicyNeuralNetworkAsset, class ULearningAgentsNeuralNetwork* DecoderNeuralNetworkAsset, const bool bReinitializeEncoderNetwork, const bool bReinitializePolicyNetwork, const bool bReinitializeDecoderNetwork, const struct FLearningAgentsPolicySettings& PolicySettings, const int32 Seed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "SetupPolicy");

	Params::LearningAgentsPolicy_SetupPolicy Parms{};

	Parms.InManager = InManager;
	Parms.InInteractor = InInteractor;
	Parms.EncoderNeuralNetworkAsset = EncoderNeuralNetworkAsset;
	Parms.PolicyNeuralNetworkAsset = PolicyNeuralNetworkAsset;
	Parms.DecoderNeuralNetworkAsset = DecoderNeuralNetworkAsset;
	Parms.bReinitializeEncoderNetwork = bReinitializeEncoderNetwork;
	Parms.bReinitializePolicyNetwork = bReinitializePolicyNetwork;
	Parms.bReinitializeDecoderNetwork = bReinitializeDecoderNetwork;
	Parms.PolicySettings = std::move(PolicySettings);
	Parms.Seed = Seed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LearningAgents.LearningAgentsPolicy.GetMemoryState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<float>*                          OutMemoryState                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const int32                             AgentId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULearningAgentsPolicy::GetMemoryState(TArray<float>* OutMemoryState, const int32 AgentId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "GetMemoryState");

	Params::LearningAgentsPolicy_GetMemoryState Parms{};

	Parms.AgentId = AgentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMemoryState != nullptr)
		*OutMemoryState = std::move(Parms.OutMemoryState);
}


// Function LearningAgents.LearningAgentsPolicy.GetMemoryStateSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULearningAgentsPolicy::GetMemoryStateSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LearningAgentsPolicy", "GetMemoryStateSize");

	Params::LearningAgentsPolicy_GetMemoryStateSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

