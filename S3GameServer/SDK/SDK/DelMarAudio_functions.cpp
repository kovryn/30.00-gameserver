#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DelMarAudio

#include "Basic.hpp"

#include "DelMarAudio_classes.hpp"
#include "DelMarAudio_parameters.hpp"


namespace SDK
{

// Function DelMarAudio.DelMarAudioCheatManager.DelMarPrintMusicTrackName
// (Final, Exec, Native, Protected)

void UDelMarAudioCheatManager::DelMarPrintMusicTrackName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioCheatManager", "DelMarPrintMusicTrackName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioCheatManager.DelMarSetMusicTrigger
// (Final, Exec, Native, Protected)
// Parameters:
// class FName                             TriggerName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioCheatManager::DelMarSetMusicTrigger(class FName TriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioCheatManager", "DelMarSetMusicTrigger");

	Params::DelMarAudioCheatManager_DelMarSetMusicTrigger Parms{};

	Parms.TriggerName = TriggerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioCheatManager.DelMarSkipMusic
// (Final, Exec, Native, Protected)

void UDelMarAudioCheatManager::DelMarSkipMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioCheatManager", "DelMarSkipMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioCheatManager.DelMarStartMusic
// (Final, Exec, Native, Protected)

void UDelMarAudioCheatManager::DelMarStartMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioCheatManager", "DelMarStartMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioCheatManager.DelMarStopMusic
// (Final, Exec, Native, Protected)

void UDelMarAudioCheatManager::DelMarStopMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioCheatManager", "DelMarStopMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioProximityComponentBase.BP_StartProximity
// (Event, Public, BlueprintEvent)

void UDelMarAudioProximityComponentBase::BP_StartProximity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioProximityComponentBase", "BP_StartProximity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarAudioProximityComponentBase.BP_StopProximity
// (Event, Public, BlueprintEvent)

void UDelMarAudioProximityComponentBase::BP_StopProximity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioProximityComponentBase", "BP_StopProximity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarAudioProximityComponentBase.BP_Update
// (Event, Public, BlueprintEvent)
// Parameters:
// const class APlayerCameraManager*       Camera                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ADelMarVehicle*             Vehicle                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioProximityComponentBase::BP_Update(const class APlayerCameraManager* Camera, const class ADelMarVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioProximityComponentBase", "BP_Update");

	Params::DelMarAudioProximityComponentBase_BP_Update Parms{};

	Parms.Camera = Camera;
	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarAudioProximityComponentBase.CreateSoundAttached
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopWhenAttachedToDestroyed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UDelMarAudioProximityComponentBase::CreateSoundAttached(class USoundBase* Sound, class USceneComponent* AttachComponent, class FName AttachPointName, float VolumeMultiplier, float PitchMultiplier, bool bStopWhenAttachedToDestroyed, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioProximityComponentBase", "CreateSoundAttached");

	Params::DelMarAudioProximityComponentBase_CreateSoundAttached Parms{};

	Parms.Sound = Sound;
	Parms.AttachComponent = AttachComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarAudio.DelMarAudioProximityComponent.GetObjectScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDelMarAudioProximityComponent::GetObjectScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioProximityComponent", "GetObjectScale");

	Params::DelMarAudioProximityComponent_GetObjectScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarAudio.DelMarAudioPassbyComponent.BP_StartPassby
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             PassbySpeed                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioPassbyComponent::BP_StartPassby(class AActor* Instigator, const float PassbySpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioPassbyComponent", "BP_StartPassby");

	Params::DelMarAudioPassbyComponent_BP_StartPassby Parms{};

	Parms.Instigator = Instigator;
	Parms.PassbySpeed = PassbySpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarAudioPassbyComponent.BP_StopPassby
// (Event, Public, BlueprintEvent)

void UDelMarAudioPassbyComponent::BP_StopPassby()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioPassbyComponent", "BP_StopPassby");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarAudioPassbyComponent.HandlePassbyFinished
// (Final, Native, Public)

void UDelMarAudioPassbyComponent::HandlePassbyFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioPassbyComponent", "HandlePassbyFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioPassbyComponent.IsPlayingPassby
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarAudioPassbyComponent::IsPlayingPassby() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioPassbyComponent", "IsPlayingPassby");

	Params::DelMarAudioPassbyComponent_IsPlayingPassby Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarAudio.DelMarAudioStateMixerSubsystem.AddMixes
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName                       GroupName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FDelMarStateMix>&   Mixes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UDelMarAudioStateMixerSubsystem::AddMixes(const class FName GroupName, const TArray<struct FDelMarStateMix>& Mixes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStateMixerSubsystem", "AddMixes");

	Params::DelMarAudioStateMixerSubsystem_AddMixes Parms{};

	Parms.GroupName = GroupName;
	Parms.Mixes = std::move(Mixes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStateMixerSubsystem.ClearMixState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MixState                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivateChildren                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioStateMixerSubsystem::ClearMixState(const struct FGameplayTag& MixState, bool bDeactivateChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStateMixerSubsystem", "ClearMixState");

	Params::DelMarAudioStateMixerSubsystem_ClearMixState Parms{};

	Parms.MixState = std::move(MixState);
	Parms.bDeactivateChildren = bDeactivateChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStateMixerSubsystem.RemoveMixes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FName                       GroupName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioStateMixerSubsystem::RemoveMixes(const class FName GroupName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStateMixerSubsystem", "RemoveMixes");

	Params::DelMarAudioStateMixerSubsystem_RemoveMixes Parms{};

	Parms.GroupName = GroupName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStateMixerSubsystem.SetMixState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              MixState                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFallBackToNearestParent                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeactivateChildren                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDelMarAudioStateMixerSubsystem::SetMixState(const struct FGameplayTag& MixState, bool bFallBackToNearestParent, bool bDeactivateChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStateMixerSubsystem", "SetMixState");

	Params::DelMarAudioStateMixerSubsystem_SetMixState Parms{};

	Parms.MixState = std::move(MixState);
	Parms.bFallBackToNearestParent = bFallBackToNearestParent;
	Parms.bDeactivateChildren = bDeactivateChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarAudio.DelMarAudioStateMixerSubsystem.GetActiveMixes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<struct FGameplayTag, struct FDelMarStateMix>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<struct FGameplayTag, struct FDelMarStateMix> UDelMarAudioStateMixerSubsystem::GetActiveMixes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStateMixerSubsystem", "GetActiveMixes");

	Params::DelMarAudioStateMixerSubsystem_GetActiveMixes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleBigAirStarted
// (Final, Native, Public)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleBigAirStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleBigAirStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleBigAirStopped
// (Final, Native, Public)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleBigAirStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleBigAirStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleDemolished
// (Final, Native, Public)
// Parameters:
// const struct FGameplayTag&              CausedByTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleDemolished(const struct FGameplayTag& CausedByTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleDemolished");

	Params::DelMarAudioStatePlayspaceComponent_HandleVehicleDemolished Parms{};

	Parms.CausedByTag = std::move(CausedByTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleHitHazard
// (Final, Native, Public)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleHitHazard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleHitHazard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleTurboStarted
// (Final, Native, Public)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleTurboStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleTurboStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioStatePlayspaceComponent.HandleVehicleTurboStopped
// (Final, Native, Public)

void UDelMarAudioStatePlayspaceComponent::HandleVehicleTurboStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioStatePlayspaceComponent", "HandleVehicleTurboStopped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnApproachingFinishLine
// (Event, Public, BlueprintEvent)

void UDelMarCrowdAudioManager::BP_OnApproachingFinishLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnApproachingFinishLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnGameplayStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewStateTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCrowdAudioManager::BP_OnGameplayStateChanged(const struct FGameplayTag& NewStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnGameplayStateChanged");

	Params::DelMarCrowdAudioManager_BP_OnGameplayStateChanged Parms{};

	Parms.NewStateTag = std::move(NewStateTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnPlayerFinishedRace
// (Event, Public, BlueprintEvent)

void UDelMarCrowdAudioManager::BP_OnPlayerFinishedRace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnPlayerFinishedRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnRaceModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewRaceModeTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCrowdAudioManager::BP_OnRaceModeChanged(const struct FGameplayTag& NewRaceModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnRaceModeChanged");

	Params::DelMarCrowdAudioManager_BP_OnRaceModeChanged Parms{};

	Parms.NewRaceModeTag = std::move(NewRaceModeTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnRacerStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewStateTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarCrowdAudioManager::BP_OnRacerStateChanged(const struct FGameplayTag& NewStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnRacerStateChanged");

	Params::DelMarCrowdAudioManager_BP_OnRacerStateChanged Parms{};

	Parms.NewStateTag = std::move(NewStateTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarCrowdAudioManager.BP_OnVehicleDemolished
// (Event, Public, BlueprintEvent)

void UDelMarCrowdAudioManager::BP_OnVehicleDemolished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarCrowdAudioManager", "BP_OnVehicleDemolished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarRaceMusicManager.BP_OnCountdownTimeSet
// (Event, Public, BlueprintEvent)
// Parameters:
// const float                             TimeUntilRunStart                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::BP_OnCountdownTimeSet(const float TimeUntilRunStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "BP_OnCountdownTimeSet");

	Params::DelMarRaceMusicManager_BP_OnCountdownTimeSet Parms{};

	Parms.TimeUntilRunStart = TimeUntilRunStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarRaceMusicManager.BP_OnGameplayStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewStateTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::BP_OnGameplayStateChanged(const struct FGameplayTag& NewStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "BP_OnGameplayStateChanged");

	Params::DelMarRaceMusicManager_BP_OnGameplayStateChanged Parms{};

	Parms.NewStateTag = std::move(NewStateTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarRaceMusicManager.BP_OnPlayerFinishedRace
// (Event, Public, BlueprintEvent)

void UDelMarRaceMusicManager::BP_OnPlayerFinishedRace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "BP_OnPlayerFinishedRace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DelMarAudio.DelMarRaceMusicManager.BP_OnRaceModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewModeTag                                             (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::BP_OnRaceModeChanged(const struct FGameplayTag& NewModeTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "BP_OnRaceModeChanged");

	Params::DelMarRaceMusicManager_BP_OnRaceModeChanged Parms{};

	Parms.NewModeTag = std::move(NewModeTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarRaceMusicManager.BP_OnRacerStateChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              NewStateTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::BP_OnRacerStateChanged(const struct FGameplayTag& NewStateTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "BP_OnRacerStateChanged");

	Params::DelMarRaceMusicManager_BP_OnRacerStateChanged Parms{};

	Parms.NewStateTag = std::move(NewStateTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DelMarAudio.DelMarRaceMusicManager.HandleSpectatorViewTargetChange
// (Final, Native, Protected)
// Parameters:
// class AFortPlayerController*            PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OldViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewViewTarget                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::HandleSpectatorViewTargetChange(class AFortPlayerController* PlayerController, class AActor* OldViewTarget, class AActor* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "HandleSpectatorViewTargetChange");

	Params::DelMarRaceMusicManager_HandleSpectatorViewTargetChange Parms{};

	Parms.PlayerController = PlayerController;
	Parms.OldViewTarget = OldViewTarget;
	Parms.NewViewTarget = NewViewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.SetAudioTrigger
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const class FName                       InTrigger                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::SetAudioTrigger(const class FName InTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "SetAudioTrigger");

	Params::DelMarRaceMusicManager_SetAudioTrigger Parms{};

	Parms.InTrigger = InTrigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.SetPlaylist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDelMarRaceMusicPlaylist*         InPlaylist                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::SetPlaylist(class UDelMarRaceMusicPlaylist* InPlaylist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "SetPlaylist");

	Params::DelMarRaceMusicManager_SetPlaylist Parms{};

	Parms.InPlaylist = InPlaylist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.SetPostRaceMusic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       InPostRaceMusic                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::SetPostRaceMusic(class USoundBase* InPostRaceMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "SetPostRaceMusic");

	Params::DelMarRaceMusicManager_SetPostRaceMusic Parms{};

	Parms.InPostRaceMusic = InPostRaceMusic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.SetPreRaceMusic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       InPreRaceMusic                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::SetPreRaceMusic(class USoundBase* InPreRaceMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "SetPreRaceMusic");

	Params::DelMarRaceMusicManager_SetPreRaceMusic Parms{};

	Parms.InPreRaceMusic = InPreRaceMusic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.SkipTrack
// (Final, Native, Public, BlueprintCallable)

void UDelMarRaceMusicManager::SkipTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "SkipTrack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.StartRaceMusic
// (Final, Native, Public, BlueprintCallable)

void UDelMarRaceMusicManager::StartRaceMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "StartRaceMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.StartStartLineMusic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const float                             CountdownLength                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelMarRaceMusicManager::StartStartLineMusic(const float CountdownLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "StartStartLineMusic");

	Params::DelMarRaceMusicManager_StartStartLineMusic Parms{};

	Parms.CountdownLength = CountdownLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarRaceMusicManager.StopMusic
// (Final, Native, Public, BlueprintCallable)

void UDelMarRaceMusicManager::StopMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarRaceMusicManager", "StopMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DelMarAudio.DelMarAudioVirtualizationSubsystem.HandleRaceModeChanged
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FDelMarEvent_RaceModeSet&  Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDelMarAudioVirtualizationSubsystem::HandleRaceModeChanged(const struct FDelMarEvent_RaceModeSet& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelMarAudioVirtualizationSubsystem", "HandleRaceModeChanged");

	Params::DelMarAudioVirtualizationSubsystem_HandleRaceModeChanged Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

