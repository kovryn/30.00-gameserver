#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleCosmeticsAudioRuntime

#include "Basic.hpp"

#include "VehicleCosmeticsAudioRuntime_classes.hpp"
#include "VehicleCosmeticsAudioRuntime_parameters.hpp"


namespace SDK
{

// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.BP_OnAudioDataEjected
// (Event, Public, BlueprintEvent)

void AVehicleCosmeticsAudioController::BP_OnAudioDataEjected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "BP_OnAudioDataEjected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.BP_OnAudioDataLoaded
// (Event, Public, BlueprintEvent)
// Parameters:
// const class USoundBase*                 Sound                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::BP_OnAudioDataLoaded(const class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "BP_OnAudioDataLoaded");

	Params::VehicleCosmeticsAudioController_BP_OnAudioDataLoaded Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.BP_OnCosmeticsFailed
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FVehicleCosmeticsFailureInfo&ReasonInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::BP_OnCosmeticsFailed(const struct FVehicleCosmeticsFailureInfo& ReasonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "BP_OnCosmeticsFailed");

	Params::VehicleCosmeticsAudioController_BP_OnCosmeticsFailed Parms{};

	Parms.ReasonInfo = std::move(ReasonInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.BP_OnUpdateAudioData
// (Event, Public, BlueprintEvent)
// Parameters:
// const class UVehicleAudioCosmeticData*  CosmeticData                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::BP_OnUpdateAudioData(const class UVehicleAudioCosmeticData* CosmeticData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "BP_OnUpdateAudioData");

	Params::VehicleCosmeticsAudioController_BP_OnUpdateAudioData Parms{};

	Parms.CosmeticData = CosmeticData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.HandleEngineAudioCosmeticsFailed
// (Final, Native, Public)
// Parameters:
// const struct FVehicleCosmeticsFailureInfo&ReasonInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::HandleEngineAudioCosmeticsFailed(const struct FVehicleCosmeticsFailureInfo& ReasonInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "HandleEngineAudioCosmeticsFailed");

	Params::VehicleCosmeticsAudioController_HandleEngineAudioCosmeticsFailed Parms{};

	Parms.ReasonInfo = std::move(ReasonInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.HandleEngineAudioItemUpdated
// (Final, Native, Public)
// Parameters:
// TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_EngineAudio>EngineAudioItem                                        (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::HandleEngineAudioItemUpdated(TSoftObjectPtr<class UVehicleCosmeticsItemDefinition_EngineAudio> EngineAudioItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "HandleEngineAudioItemUpdated");

	Params::VehicleCosmeticsAudioController_HandleEngineAudioItemUpdated Parms{};

	Parms.EngineAudioItem = EngineAudioItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioController.UpdateAudioData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UVehicleAudioCosmeticData*  CosmeticData                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleCosmeticsAudioController::UpdateAudioData(const class UVehicleAudioCosmeticData* CosmeticData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioController", "UpdateAudioData");

	Params::VehicleCosmeticsAudioController_UpdateAudioData Parms{};

	Parms.CosmeticData = CosmeticData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioManager.RegisterVehicleWithAsset
// (Final, RequiredAPI, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FVehicleCosmeticLoadRequestInfo&RequestInfo                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAudioManager::RegisterVehicleWithAsset(const struct FVehicleCosmeticLoadRequestInfo& RequestInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioManager", "RegisterVehicleWithAsset");

	Params::VehicleCosmeticsAudioManager_RegisterVehicleWithAsset Parms{};

	Parms.RequestInfo = std::move(RequestInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioManager.RemoveVehicleBudgetOverride
// (Final, RequiredAPI, Native, Public, BlueprintCallable)

void UVehicleCosmeticsAudioManager::RemoveVehicleBudgetOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioManager", "RemoveVehicleBudgetOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioManager.SetVehicleBudgetOverride
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewBudget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAudioManager::SetVehicleBudgetOverride(int32 NewBudget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioManager", "SetVehicleBudgetOverride");

	Params::VehicleCosmeticsAudioManager_SetVehicleBudgetOverride Parms{};

	Parms.NewBudget = NewBudget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleCosmeticsAudioRuntime.VehicleCosmeticsAudioManager.UnregisterVehcle
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IVehicleCosmeticsAudioUser>Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleCosmeticsAudioManager::UnregisterVehcle(TScriptInterface<class IVehicleCosmeticsAudioUser> Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleCosmeticsAudioManager", "UnregisterVehcle");

	Params::VehicleCosmeticsAudioManager_UnregisterVehcle Parms{};

	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

