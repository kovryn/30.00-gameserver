#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MotionWarping

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MotionWarping_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class MotionWarping.AnimNotifyState_MotionWarping
// 0x0008 (0x0038 - 0x0030)
class UAnimNotifyState_MotionWarping final : public UAnimNotifyState
{
public:
	class URootMotionModifier*                    RootMotionModifier;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class URootMotionModifier* AddRootMotionModifier(class UMotionWarpingComponent* MotionWarpingComp, const class UAnimSequenceBase* Animation, float StartTime, float EndTime) const;
	void OnRootMotionModifierActivate(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;
	void OnRootMotionModifierDeactivate(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;
	void OnRootMotionModifierUpdate(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;
	void OnWarpBegin(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;
	void OnWarpEnd(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;
	void OnWarpUpdate(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* Modifier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_MotionWarping">();
	}
	static class UAnimNotifyState_MotionWarping* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_MotionWarping>();
	}
};

// Class MotionWarping.MotionWarpingUtilities
// 0x0000 (0x0028 - 0x0028)
class UMotionWarpingUtilities final : public UBlueprintFunctionLibrary
{
public:
	static struct FTransform ExtractRootMotionFromAnimation(const class UAnimSequenceBase* Animation, float StartTime, float EndTime);
	static void GetMotionWarpingWindowsForWarpTargetFromAnimation(const class UAnimSequenceBase* Animation, class FName WarpTargetName, TArray<struct FMotionWarpingWindowData>* OutWindows);
	static void GetMotionWarpingWindowsFromAnimation(const class UAnimSequenceBase* Animation, TArray<struct FMotionWarpingWindowData>* OutWindows);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotionWarpingUtilities">();
	}
	static class UMotionWarpingUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotionWarpingUtilities>();
	}
};

// Class MotionWarping.MotionWarpingComponent
// 0x0040 (0x00E0 - 0x00A0)
class UMotionWarpingComponent final : public UActorComponent
{
public:
	bool                                          bSearchForWindowsInAnimsWithinMontages;            // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UMotionWarpingComponent* MotionWarpingComp)> OnPreUpdate;    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACharacter>              CharacterOwner;                                    // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class URootMotionModifier*>            Modifiers;                                         // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FMotionWarpingTarget>           WarpTargets;                                       // 0x00D0(0x0010)(Net, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddOrUpdateWarpTarget(const struct FMotionWarpingTarget& WarpTarget);
	void AddOrUpdateWarpTargetFromComponent(class FName WarpTargetName, const class USceneComponent* Component, class FName BoneName, bool bFollowComponent, const struct FVector& LocationOffset, const struct FRotator& RotationOffset);
	void AddOrUpdateWarpTargetFromLocation(class FName WarpTargetName, const struct FVector& TargetLocation);
	void AddOrUpdateWarpTargetFromLocationAndRotation(class FName WarpTargetName, const struct FVector& TargetLocation, const struct FRotator& TargetRotation);
	void AddOrUpdateWarpTargetFromTransform(class FName WarpTargetName, const struct FTransform& TargetTransform);
	void DisableAllRootMotionModifiers();
	int32 RemoveAllWarpTargets();
	int32 RemoveWarpTarget(class FName WarpTargetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotionWarpingComponent">();
	}
	static class UMotionWarpingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotionWarpingComponent>();
	}
};

// Class MotionWarping.RootMotionModifier
// 0x00B8 (0x00E0 - 0x0028)
class URootMotionModifier : public UObject
{
public:
	TWeakObjectPtr<class UAnimSequenceBase>       Animation;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousPosition;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentPosition;                                   // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0050(0x0060)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualStartTime;                                   // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* RootMotionModifier)> OnActivateDelegate; // 0x00B4(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* RootMotionModifier)> OnUpdateDelegate; // 0x00C0(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UMotionWarpingComponent* MotionWarpingComp, class URootMotionModifier* RootMotionModifier)> OnDeactivateDelegate; // 0x00CC(0x000C)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERootMotionModifierState                      State;                                             // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier">();
	}
	static class URootMotionModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier>();
	}
};

// Class MotionWarping.RootMotionModifier_Warp
// 0x0160 (0x0240 - 0x00E0)
class URootMotionModifier_Warp : public URootMotionModifier
{
public:
	class FName                                   WarpTargetName;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWarpPointAnimProvider                        WarpPointAnimProvider;                             // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0xB];                                       // 0x00E5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WarpPointAnimTransform;                            // 0x00F0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WarpPointAnimBoneName;                             // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpTranslation;                                  // 0x0154(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreZAxis;                                      // 0x0155(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAlphaBlendOption                             AddTranslationEasingFunc;                          // 0x0156(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AddTranslationEasingCurve;                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWarpRotation;                                     // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionWarpRotationType                       RotationType;                                      // 0x0161(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMotionWarpRotationMethod                     RotationMethod;                                    // 0x0162(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WarpRotationTimeMultiplier;                        // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WarpMaxRotationRate;                               // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CachedTargetTransform;                             // 0x0170(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x70];                                     // 0x01D0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier_Warp">();
	}
	static class URootMotionModifier_Warp* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier_Warp>();
	}
};

// Class MotionWarping.RootMotionModifier_SimpleWarp
// 0x0000 (0x0240 - 0x0240)
class URootMotionModifier_SimpleWarp final : public URootMotionModifier_Warp
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier_SimpleWarp">();
	}
	static class URootMotionModifier_SimpleWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier_SimpleWarp>();
	}
};

// Class MotionWarping.RootMotionModifier_Scale
// 0x0020 (0x0100 - 0x00E0)
class URootMotionModifier_Scale final : public URootMotionModifier
{
public:
	struct FVector                                Scale;                                             // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8];                                       // 0x00F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URootMotionModifier_Scale* AddRootMotionModifierScale(class UMotionWarpingComponent* InMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, const struct FVector& InScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier_Scale">();
	}
	static class URootMotionModifier_Scale* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier_Scale>();
	}
};

// Class MotionWarping.RootMotionModifier_AdjustmentBlendWarp
// 0x0160 (0x03A0 - 0x0240)
class URootMotionModifier_AdjustmentBlendWarp final : public URootMotionModifier_Warp
{
public:
	bool                                          bWarpIKBones;                                      // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           IKBones;                                           // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CachedMeshTransform;                               // 0x0260(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             CachedMeshRelativeTransform;                       // 0x02C0(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                             CachedRootMotion;                                  // 0x0320(0x0060)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAnimSequenceTrackContainer            Result;                                            // 0x0380(0x0020)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier_AdjustmentBlendWarp">();
	}
	static class URootMotionModifier_AdjustmentBlendWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier_AdjustmentBlendWarp>();
	}
};

// Class MotionWarping.RootMotionModifier_SkewWarp
// 0x0000 (0x0240 - 0x0240)
class URootMotionModifier_SkewWarp final : public URootMotionModifier_Warp
{
public:
	static class URootMotionModifier_SkewWarp* AddRootMotionModifierSkewWarp(class UMotionWarpingComponent* InMotionWarpingComp, const class UAnimSequenceBase* InAnimation, float InStartTime, float InEndTime, class FName InWarpTargetName, EWarpPointAnimProvider InWarpPointAnimProvider, const struct FTransform& InWarpPointAnimTransform, class FName InWarpPointAnimBoneName, bool bInWarpTranslation, bool bInIgnoreZAxis, bool bInWarpRotation, EMotionWarpRotationType InRotationType, EMotionWarpRotationMethod InRotationMethod, float InWarpRotationTimeMultiplier, float InWarpMaxRotationRate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootMotionModifier_SkewWarp">();
	}
	static class URootMotionModifier_SkewWarp* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootMotionModifier_SkewWarp>();
	}
};

}

