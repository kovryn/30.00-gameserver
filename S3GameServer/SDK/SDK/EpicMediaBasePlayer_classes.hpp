#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EpicMediaBasePlayer

#include "Basic.hpp"

#include "EpicMediaBasePlayer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EpicStreamMediaSource_structs.hpp"


namespace SDK
{

// Class EpicMediaBasePlayer.EpicBaseStreamingVideo
// 0x0138 (0x0160 - 0x0028)
class UEpicBaseStreamingVideo : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EBaseMediaTerminalErrorReason Reason)> VideoOnTerminalError;       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnSuccess;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnClosed;                                     // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnEndReached;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnOpened;                                     // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnOpenTimeout;                                // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              VideoOnResumed;                                    // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UEpicStreamMediaSource*                 MediaSource;                                       // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMediaPlayer*                           MediaPlayer;                                       // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              VideoSize;                                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x90];                                      // 0x00B8(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundSubmixBase*                       DefaultSubmix;                                     // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundSubmixBase*                       LicensedSubmix;                                    // 0x0150(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMediaSoundComponent*                   MediaSoundComponent;                               // 0x0158(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ClearSyncTimes();
	bool GetLicensedAudio();
	class UMediaPlayer* GetMediaPlayer();
	struct FMediaPlayerOptions GetMediaPlayerOptions();
	class UEpicStreamMediaSource* GetMediaSource();
	class UMediaSoundComponent* GetSoundComponent();
	void HandleLicensedAudioTreatmentChanged(EUCPTypes UCPType);
	void HandleMediaClosed();
	void HandleMediaEndReached();
	void HandleMediaOpened(const class FString& OpenedUrl);
	void HandleMediaOpenedFailed(const class FString& FailedUrl);
	void HandleMediaResumed();
	bool Init(class UMediaTexture* InVideoTexture, class UMediaPlayer* InMediaPlayer, class UEpicStreamMediaSource* InMediaSource, bool InCDNFailover);
	void MethodDebounce(bool bDebounce);
	void OnFailedURL(const class FString& URL);
	void OnSuccessfulURL(const class FString& URL);
	bool Open(const struct FMediaPlayerOptions& InMediaOptions);
	void Release();
	bool RetryOnError(EBaseMediaTerminalErrorReason Reason);
	void SetCreateAudioComponent(bool bInCreateAudioComponent);
	void SetEnableExternalCloseCallback(bool bInEnable);
	void SetOpenTimeout(double InTimeoutTime);
	void SetSoundSubmixes(class UMediaSoundComponent* InSoundComponent, class USoundSubmixBase* InDefault, class USoundSubmixBase* InLicensed);
	void SetSyncTimes(const struct FDateTime& InNowTime, const struct FDateTime& InStartTime, bool DynamicStart, float InOffset_s, float InDelay_s);
	void SetVideoSize(const int32 Width, const int32 Height);
	void Start(const class FString& InVUID, class UMediaTexture* InVideoTexture);
	void Stop(bool bRelease, bool bStopPlayer);

	bool IsSyncStartTimeSet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicBaseStreamingVideo">();
	}
	static class UEpicBaseStreamingVideo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicBaseStreamingVideo>();
	}
};

}

