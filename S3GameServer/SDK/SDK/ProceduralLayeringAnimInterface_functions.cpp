#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProceduralLayeringAnimInterface

#include "Basic.hpp"

#include "ProceduralLayeringAnimInterface_classes.hpp"
#include "ProceduralLayeringAnimInterface_parameters.hpp"


namespace SDK
{

// Function ProceduralLayeringAnimInterface.ProceduralLayeringAnimInterface_C.ProceduralAdditivePose
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 InSourceLocomotionPose                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InMotionMatchingPose                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InProceduralLayeredPose                                (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       ProceduralAdditivePose_0                               (Parm, OutParm, NoDestructor)

void IProceduralLayeringAnimInterface_C::ProceduralAdditivePose(const struct FPoseLink& InSourceLocomotionPose, const struct FPoseLink& InMotionMatchingPose, const struct FPoseLink& InProceduralLayeredPose, struct FPoseLink* ProceduralAdditivePose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ProceduralLayeringAnimInterface_C", "ProceduralAdditivePose");

	Params::ProceduralLayeringAnimInterface_C_ProceduralAdditivePose Parms{};

	Parms.InSourceLocomotionPose = std::move(InSourceLocomotionPose);
	Parms.InMotionMatchingPose = std::move(InMotionMatchingPose);
	Parms.InProceduralLayeredPose = std::move(InProceduralLayeredPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ProceduralAdditivePose_0 != nullptr)
		*ProceduralAdditivePose_0 = std::move(Parms.ProceduralAdditivePose_0);
}


// Function ProceduralLayeringAnimInterface.ProceduralLayeringAnimInterface_C.ProceduralLayeredPose
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FPoseLink&                 InLocomotionPose                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const struct FPoseLink&                 InPassThroughPose                                      (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// struct FPoseLink*                       ProceduralLayeredPose_0                                (Parm, OutParm, NoDestructor)

void IProceduralLayeringAnimInterface_C::ProceduralLayeredPose(const struct FPoseLink& InLocomotionPose, const struct FPoseLink& InPassThroughPose, struct FPoseLink* ProceduralLayeredPose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ProceduralLayeringAnimInterface_C", "ProceduralLayeredPose");

	Params::ProceduralLayeringAnimInterface_C_ProceduralLayeredPose Parms{};

	Parms.InLocomotionPose = std::move(InLocomotionPose);
	Parms.InPassThroughPose = std::move(InPassThroughPose);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ProceduralLayeredPose_0 != nullptr)
		*ProceduralLayeredPose_0 = std::move(Parms.ProceduralLayeredPose_0);
}

}

