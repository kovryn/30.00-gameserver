#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StateDrivenActorRuntime

#include "Basic.hpp"

#include "StateDrivenActorRuntime_classes.hpp"
#include "StateDrivenActorRuntime_parameters.hpp"


namespace SDK
{

// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FHitResult&                SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::HandleBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "HandleBeginOverlap");

	Params::FortActorComponent_StateDriven_HandleBeginOverlap Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleDamaged
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::HandleDamaged(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "HandleDamaged");

	Params::FortActorComponent_StateDriven_HandleDamaged Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleDied
// (Final, Native, Private, HasDefaults)
// Parameters:
// class AActor*                           DamagedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedBy                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   HitLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              FHitComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Momentum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::HandleDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "HandleDied");

	Params::FortActorComponent_StateDriven_HandleDied Parms{};

	Parms.DamagedActor = DamagedActor;
	Parms.Damage = Damage;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;
	Parms.HitLocation = std::move(HitLocation);
	Parms.FHitComponent = FHitComponent;
	Parms.BoneName = BoneName;
	Parms.Momentum = std::move(Momentum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "HandleEndOverlap");

	Params::FortActorComponent_StateDriven_HandleEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.HandleInteraction
// (Final, Native, Private)
// Parameters:
// class ABuildingActor*                   SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFortPawn*                        InteractingPawn                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::HandleInteraction(class ABuildingActor* SelfActor, class AFortPawn* InteractingPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "HandleInteraction");

	Params::FortActorComponent_StateDriven_HandleInteraction Parms{};

	Parms.SelfActor = SelfActor;
	Parms.InteractingPawn = InteractingPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnHandleStateTreeEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              TransitionTag                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayCueTag&           BurstGameplayCueTag                                    (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::OnHandleStateTreeEvent(const struct FGameplayTag& TransitionTag, const struct FGameplayCueTag& BurstGameplayCueTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnHandleStateTreeEvent");

	Params::FortActorComponent_StateDriven_OnHandleStateTreeEvent Parms{};

	Parms.TransitionTag = std::move(TransitionTag);
	Parms.BurstGameplayCueTag = std::move(BurstGameplayCueTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnMulticastStateTreeEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              TransitionTag                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayCueTag&           BurstGameplayCueTag                                    (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::OnMulticastStateTreeEvent(const struct FGameplayTag& TransitionTag, const struct FGameplayCueTag& BurstGameplayCueTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnMulticastStateTreeEvent");

	Params::FortActorComponent_StateDriven_OnMulticastStateTreeEvent Parms{};

	Parms.TransitionTag = std::move(TransitionTag);
	Parms.BurstGameplayCueTag = std::move(BurstGameplayCueTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnResetCollisionSettings
// (Event, Protected, BlueprintEvent)

void UFortActorComponent_StateDriven::OnResetCollisionSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnResetCollisionSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnSetupDamageEventSettings
// (Event, Protected, BlueprintEvent)

void UFortActorComponent_StateDriven::OnSetupDamageEventSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnSetupDamageEventSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnSetupInteractionEventSettings
// (Event, Protected, BlueprintEvent)

void UFortActorComponent_StateDriven::OnSetupInteractionEventSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnSetupInteractionEventSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.OnSetupOverlapEventSettings
// (Event, Protected, BlueprintEvent)

void UFortActorComponent_StateDriven::OnSetupOverlapEventSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "OnSetupOverlapEventSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.PopSlottedItem
// (Final, Native, Public, BlueprintCallable)

void UFortActorComponent_StateDriven::PopSlottedItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "PopSlottedItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.SetCurrentState
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStateDrivenState&         InCurrentState                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::SetCurrentState(const struct FStateDrivenState& InCurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "SetCurrentState");

	Params::FortActorComponent_StateDriven_SetCurrentState Parms{};

	Parms.InCurrentState = std::move(InCurrentState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.TriggerCustomEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::TriggerCustomEvent(const struct FGameplayTag& EventTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "TriggerCustomEvent");

	Params::FortActorComponent_StateDriven_TriggerCustomEvent Parms{};

	Parms.EventTag = std::move(EventTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetFailedInteractionString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AFortPawn*                  InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EInteractionBeingAttempted        InteractionBeingAttempted                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortActorComponent_StateDriven::GetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "GetFailedInteractionString");

	Params::FortActorComponent_StateDriven_GetFailedInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetInteractionString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AFortPawn*                  InteractingPawn                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const EInteractionBeingAttempted        InteractionBeingAttempted                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortActorComponent_StateDriven::GetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "GetInteractionString");

	Params::FortActorComponent_StateDriven_GetInteractionString Parms{};

	Parms.InteractingPawn = InteractingPawn;
	Parms.InteractionBeingAttempted = InteractionBeingAttempted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetSlottedItemDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UFortActorComponent_StateDriven::GetSlottedItemDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "GetSlottedItemDisplayName");

	Params::FortActorComponent_StateDriven_GetSlottedItemDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.GetSlottedItemEntry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FFortItemEntry             ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FFortItemEntry UFortActorComponent_StateDriven::GetSlottedItemEntry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "GetSlottedItemEntry");

	Params::FortActorComponent_StateDriven_GetSlottedItemEntry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function StateDrivenActorRuntime.FortActorComponent_StateDriven.PlayBurstGameplayCue
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTag&              GameplayCueTag                                         (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortActorComponent_StateDriven::PlayBurstGameplayCue(const struct FGameplayTag& GameplayCueTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortActorComponent_StateDriven", "PlayBurstGameplayCue");

	Params::FortActorComponent_StateDriven_PlayBurstGameplayCue Parms{};

	Parms.GameplayCueTag = std::move(GameplayCueTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

