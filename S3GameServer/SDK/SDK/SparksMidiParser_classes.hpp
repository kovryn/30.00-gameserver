#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SparksMidiParser

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SparksMidiParser_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "SparksCoreRuntime_structs.hpp"


namespace SDK
{

// Class SparksMidiParser.AsyncAction_ListenForMidiEventBase
// 0x0030 (0x0060 - 0x0030)
class UAsyncAction_ListenForMidiEventBase : public UCancellableAsyncAction
{
public:
	TMulticastInlineDelegate<void(const bool bCanceled)> OnFinished;                                 // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_ListenForMidiEventBase">();
	}
	static class UAsyncAction_ListenForMidiEventBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_ListenForMidiEventBase>();
	}
};

// Class SparksMidiParser.AsyncAction_ListenForMidiNoteEvent
// 0x0040 (0x00A0 - 0x0060)
class UAsyncAction_ListenForMidiNoteEvent final : public UAsyncAction_ListenForMidiEventBase
{
public:
	TMulticastInlineDelegate<void(const uint8 MidiEventNote, const struct FParsedMidiNoteEvent& MidiEventData)> OnMidiEventStart; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const uint8 MidiEventNote, const struct FParsedMidiNoteEvent& MidiEventData)> OnMidiEventEnd; // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_ListenForMidiNoteEvent* ListenForMidiNoteEvent(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const uint8 EventNote, const float SecondsBeforeEventStart, const float SecondsBeforeEventEnd, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiNoteEvent* ListenForMidiNoteEvents(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<uint8>& EventNotes, const float SecondsBeforeEventStart, const float SecondsBeforeEventEnd, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiNoteEvent* ListenForMidiNoteEvents_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiNoteEventListenerParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_ListenForMidiNoteEvent">();
	}
	static class UAsyncAction_ListenForMidiNoteEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_ListenForMidiNoteEvent>();
	}
};

// Class SparksMidiParser.AsyncAction_ListenForMidiTextEvent
// 0x0030 (0x0090 - 0x0060)
class UAsyncAction_ListenForMidiTextEvent final : public UAsyncAction_ListenForMidiEventBase
{
public:
	TMulticastInlineDelegate<void(const class FString& MidiEventText, const struct FParsedMidiTextEvent& MidiEventData)> OnMidiEventStart; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x20];                                      // 0x0070(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_ListenForMidiTextEvent* ListenForMidiTextEvent(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const class FString& EventString, const float SecondsBeforeEventStart, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiTextEvent* ListenForMidiTextEvents(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<class FString>& EventStrings, const float SecondsBeforeEventStart, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiTextEvent* ListenForMidiTextEvents_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiTextEventListenerParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_ListenForMidiTextEvent">();
	}
	static class UAsyncAction_ListenForMidiTextEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_ListenForMidiTextEvent>();
	}
};

// Class SparksMidiParser.AsyncAction_ListenForMidiNoteEventPools
// 0x0048 (0x00A8 - 0x0060)
class UAsyncAction_ListenForMidiNoteEventPools final : public UAsyncAction_ListenForMidiEventBase
{
public:
	TMulticastInlineDelegate<void(const uint8 MidiNote, const struct FParsedMidiNoteEvent& MidiNoteData, const class FName WaitPoolID, const float ActualDelay, const float MaxDelayShortenedBy)> OnMidiNoteStart; // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAsyncAction_ListenForMidiNoteEventPools* ListenForMidiNoteEventPools(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const uint8 EventNote, const TArray<uint8>& WatchNotes, const TArray<struct FMidiNoteEvent_DelayPool>& DelayPools, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiNoteEventPools* ListenForMidiNoteEventsPools(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const class FName MidiTrackName, const TArray<uint8>& EventNotes, const TArray<uint8>& WatchNotes, const TArray<struct FMidiNoteEvent_DelayPool>& DelayPools, const EMidiEventListenerInitBroadcast InitBroadcast);
	static class UAsyncAction_ListenForMidiNoteEventPools* ListenForMidiNoteEventsPools_WithParams(const TScriptInterface<class IMidiEventDriverInterface> MidiEventDriver, const struct FMidiNotePoolEventListenerParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AsyncAction_ListenForMidiNoteEventPools">();
	}
	static class UAsyncAction_ListenForMidiNoteEventPools* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAsyncAction_ListenForMidiNoteEventPools>();
	}
};

// Class SparksMidiParser.MidiEventDriverInterface
// 0x0000 (0x0000 - 0x0000)
class IMidiEventDriverInterface final
{
public:
	float GetCurrentMidiSeconds() const;
	int32 GetCurrentMidiTick() const;
	struct FMidiPlaybackState GetMidiPlaybackState() const;
	class FName GetMidiTrackNameFromSparksInstrument(const ESparksInstrumentType InstrumentType) const;
	class UParsedMidiEventData* GetParsedMidiEventData() const;
	ESparksInstrumentType GetSparksInstrumentFromMidiTrackName(const class FName TrackName) const;
	bool IsPlaybackEnded() const;
	int32 SecondsToTick(const float Seconds) const;
	float TickToSeconds(const int32 Tick) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidiEventDriverInterface">();
	}
	static class IMidiEventDriverInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMidiEventDriverInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};

// Class SparksMidiParser.MidiEventListenerSubsystem
// 0x0018 (0x0058 - 0x0040)
class UMidiEventListenerSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelAllListenersForDriver(const TScriptInterface<class IMidiEventDriverInterface>& Driver);
	void CancelListener(const struct FMidiEventListenerHandle& Handle);
	bool IsListenerActive(const struct FMidiEventListenerHandle& Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MidiEventListenerSubsystem">();
	}
	static class UMidiEventListenerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMidiEventListenerSubsystem>();
	}
};

// Class SparksMidiParser.ParsedMidiEventData
// 0x00A8 (0x00D0 - 0x0028)
class UParsedMidiEventData : public UObject
{
public:
	TMap<class FName, struct FMidiNoteEventList>  MidiNoteEvents;                                    // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FMidiTextEventList>  MidiTextEvents;                                    // 0x0078(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UMidiFile*                              MidiFilePtr;                                       // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	const TMap<class FName, struct FMidiNoteEventList> GetAllMidiNoteEvents() const;
	const TMap<class FName, struct FMidiTextEventList> GetAllMidiTextEvents() const;
	const class UMidiFile* GetMidiFile() const;
	const TArray<struct FParsedMidiNoteEvent> GetMidiNoteEvents(const class FName TrackName) const;
	void GetMidiNoteEventsWithInts(const class FName TrackName, const TArray<uint8>& MidiEventInts, TArray<struct FParsedMidiNoteEvent>* OutArray) const;
	const TArray<struct FParsedMidiTextEvent> GetMidiTextEvents(const class FName TrackName) const;
	void GetMidiTextEventsWithStrings(const class FName TrackName, const TArray<class FString>& MidiEventStrings, TArray<struct FParsedMidiTextEvent>* OutArray) const;
	void GetPreviousMidiNoteEventsWithInts(const class FName TrackName, const TArray<uint8>& MidiEventInts, const int32 UpToMidiTick, TArray<struct FMidiNoteEventList>* OutResults) const;
	void GetPreviousMidiTextEventsWithStrings(const class FName TrackName, const TArray<class FString>& MidiEventStrings, const int32 UpToMidiTick, TArray<struct FMidiTextEventList>* OutResults) const;
	bool GetRecentOrFirstMidiNoteEvent(const class FName TrackName, const TArray<uint8>& MidiEventInts, const int32 UpToMidiTick, struct FParsedMidiNoteEvent* OutResult) const;
	bool GetRecentOrFirstMidiTextEvent(const class FName TrackName, const TArray<class FString>& MidiEventStrings, const int32 UpToMidiTick, struct FParsedMidiTextEvent* OutResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ParsedMidiEventData">();
	}
	static class UParsedMidiEventData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UParsedMidiEventData>();
	}
};

}

