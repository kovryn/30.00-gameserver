#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NitroDromeRuntime

#include "Basic.hpp"

#include "NitroDromeRuntime_classes.hpp"
#include "NitroDromeRuntime_parameters.hpp"


namespace SDK
{

// Function NitroDromeRuntime.FortCheatManager_NitroDrome.AddNitroDromeReactionToQueue
// (Final, BlueprintAuthorityOnly, Exec, Native, Public)
// Parameters:
// class FName                             ReactionRowName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortCheatManager_NitroDrome::AddNitroDromeReactionToQueue(class FName ReactionRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortCheatManager_NitroDrome", "AddNitroDromeReactionToQueue");

	Params::FortCheatManager_NitroDrome_AddNitroDromeReactionToQueue Parms{};

	Parms.ReactionRowName = ReactionRowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.FinishNitroDromeSession
// (Final, Native, Protected, BlueprintCallable)

void UFortNitroDromeAnalyticsComponent::FinishNitroDromeSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "FinishNitroDromeSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.FireEvent_SessionFinished
// (Final, Native, Protected, BlueprintCallable)

void UFortNitroDromeAnalyticsComponent::FireEvent_SessionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "FireEvent_SessionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.OnVehicleBeginOverlap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortAthenaVehicle*               OverlappingVehicle                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeAnalyticsComponent::OnVehicleBeginOverlap(class AFortAthenaVehicle* OverlappingVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "OnVehicleBeginOverlap");

	Params::FortNitroDromeAnalyticsComponent_OnVehicleBeginOverlap Parms{};

	Parms.OverlappingVehicle = OverlappingVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.OnVehicleEndOverlap
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class AFortAthenaVehicle*               OverlappingVehicle                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeAnalyticsComponent::OnVehicleEndOverlap(class AFortAthenaVehicle* OverlappingVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "OnVehicleEndOverlap");

	Params::FortNitroDromeAnalyticsComponent_OnVehicleEndOverlap Parms{};

	Parms.OverlappingVehicle = OverlappingVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.OnVehicleOutOfHealth
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class AFortAthenaVehicle*               DeadVehicle                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagContainer&     InTags                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeAnalyticsComponent::OnVehicleOutOfHealth(class AFortAthenaVehicle* DeadVehicle, const struct FGameplayTagContainer& InTags, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "OnVehicleOutOfHealth");

	Params::FortNitroDromeAnalyticsComponent_OnVehicleOutOfHealth Parms{};

	Parms.DeadVehicle = DeadVehicle;
	Parms.InTags = std::move(InTags);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.GetMidMatchObjectiveAnalyticsAttributeList
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// TArray<struct FFortAnalyticsEventAttribute>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFortAnalyticsEventAttribute> UFortNitroDromeAnalyticsComponent::GetMidMatchObjectiveAnalyticsAttributeList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "GetMidMatchObjectiveAnalyticsAttributeList");

	Params::FortNitroDromeAnalyticsComponent_GetMidMatchObjectiveAnalyticsAttributeList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function NitroDromeRuntime.FortNitroDromeAnalyticsComponent.WasNitroDromeCaptured
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFortNitroDromeAnalyticsComponent::WasNitroDromeCaptured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeAnalyticsComponent", "WasNitroDromeCaptured");

	Params::FortNitroDromeAnalyticsComponent_WasNitroDromeCaptured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitroDromeRuntime.FortNitroDromeDirector.BroadcastNitroDromeReactableEvent
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagContainer&     TagContainer                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFortNitroDromeDirector::BroadcastNitroDromeReactableEvent(const struct FGameplayTagContainer& TagContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "BroadcastNitroDromeReactableEvent");

	Params::FortNitroDromeDirector_BroadcastNitroDromeReactableEvent Parms{};

	Parms.TagContainer = std::move(TagContainer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeDirector.OnBossAlertLevelChanged
// (Final, Native, Private)
// Parameters:
// class AFortAthenaAIBotController*       BotController                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlertLevel                             OldAlertLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAlertLevel                             NewAlertLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeDirector::OnBossAlertLevelChanged(class AFortAthenaAIBotController* BotController, EAlertLevel OldAlertLevel, EAlertLevel NewAlertLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "OnBossAlertLevelChanged");

	Params::FortNitroDromeDirector_OnBossAlertLevelChanged Parms{};

	Parms.BotController = BotController;
	Parms.OldAlertLevel = OldAlertLevel;
	Parms.NewAlertLevel = NewAlertLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeDirector.OnEventFinishedCooldown
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             ReactionRow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeDirector::OnEventFinishedCooldown(class FName ReactionRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "OnEventFinishedCooldown");

	Params::FortNitroDromeDirector_OnEventFinishedCooldown Parms{};

	Parms.ReactionRow = ReactionRow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitroDromeRuntime.FortNitroDromeDirector.OnEventTriggered
// (Event, Public, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              EventTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeDirector::OnEventTriggered(const struct FGameplayTag& EventTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "OnEventTriggered");

	Params::FortNitroDromeDirector_OnEventTriggered Parms{};

	Parms.EventTag = std::move(EventTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitroDromeRuntime.FortNitroDromeDirector.OnRep_CurrentReactionData
// (Final, Native, Private)

void UFortNitroDromeDirector::OnRep_CurrentReactionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "OnRep_CurrentReactionData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeDirector.PlaySoundOnLoudSpeakers
// (Event, Public, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFortNitroDromeDirector::PlaySoundOnLoudSpeakers(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeDirector", "PlaySoundOnLoudSpeakers");

	Params::FortNitroDromeDirector_PlaySoundOnLoudSpeakers Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.AffectTimer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FOnDromeTimeAffectingActionHappened&AffectingData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortNitroDromeRewardManager::AffectTimer(const struct FOnDromeTimeAffectingActionHappened& AffectingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "AffectTimer");

	Params::FortNitroDromeRewardManager_AffectTimer Parms{};

	Parms.AffectingData = std::move(AffectingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnRewardApproaching
// (Event, Protected, BlueprintEvent)

void AFortNitroDromeRewardManager::BP_OnRewardApproaching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnRewardApproaching");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnRewardStatusChanged
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FNitroDromeRewardStatusData&OldRewardStatus                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FNitroDromeRewardStatusData&NewRewardStatus                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AFortNitroDromeRewardManager::BP_OnRewardStatusChanged(const struct FNitroDromeRewardStatusData& OldRewardStatus, const struct FNitroDromeRewardStatusData& NewRewardStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnRewardStatusChanged");

	Params::FortNitroDromeRewardManager_BP_OnRewardStatusChanged Parms{};

	Parms.OldRewardStatus = std::move(OldRewardStatus);
	Parms.NewRewardStatus = std::move(NewRewardStatus);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnTimerAffected
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FOnDromeTimeAffectingActionHappened&AffectingData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void AFortNitroDromeRewardManager::BP_OnTimerAffected(const struct FOnDromeTimeAffectingActionHappened& AffectingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnTimerAffected");

	Params::FortNitroDromeRewardManager_BP_OnTimerAffected Parms{};

	Parms.AffectingData = std::move(AffectingData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnTimerCleared
// (Event, Protected, BlueprintEvent)

void AFortNitroDromeRewardManager::BP_OnTimerCleared()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnTimerCleared");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnTimerFinished
// (Event, Protected, BlueprintEvent)

void AFortNitroDromeRewardManager::BP_OnTimerFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnTimerFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.BP_OnTimerStarted
// (Event, Protected, BlueprintEvent)

void AFortNitroDromeRewardManager::BP_OnTimerStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "BP_OnTimerStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.ClearTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortNitroDromeRewardManager::ClearTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "ClearTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.OnRep_CurrentAffectingData
// (Final, Native, Private)

void AFortNitroDromeRewardManager::OnRep_CurrentAffectingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "OnRep_CurrentAffectingData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.OnRep_CurrentRewardStatus
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FNitroDromeRewardStatusData&OldStatus                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AFortNitroDromeRewardManager::OnRep_CurrentRewardStatus(const struct FNitroDromeRewardStatusData& OldStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "OnRep_CurrentRewardStatus");

	Params::FortNitroDromeRewardManager_OnRep_CurrentRewardStatus Parms{};

	Parms.OldStatus = std::move(OldStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.PauseTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortNitroDromeRewardManager::PauseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "PauseTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.ResumeTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void AFortNitroDromeRewardManager::ResumeTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "ResumeTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.StartTimer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartTimeDelta                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFortNitroDromeRewardManager::StartTimer(float StartTimeDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "StartTimer");

	Params::FortNitroDromeRewardManager_StartTimer Parms{};

	Parms.StartTimeDelta = StartTimeDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.GetCurrentRewardStatus
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ENitroDromeRewardStatus                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ENitroDromeRewardStatus AFortNitroDromeRewardManager::GetCurrentRewardStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "GetCurrentRewardStatus");

	Params::FortNitroDromeRewardManager_GetCurrentRewardStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.GetLootTierForCurrentPlaylist
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName AFortNitroDromeRewardManager::GetLootTierForCurrentPlaylist() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "GetLootTierForCurrentPlaylist");

	Params::FortNitroDromeRewardManager_GetLootTierForCurrentPlaylist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.GetProgressPercentage
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFortNitroDromeRewardManager::GetProgressPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "GetProgressPercentage");

	Params::FortNitroDromeRewardManager_GetProgressPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NitroDromeRuntime.FortNitroDromeRewardManager.GetRewardTimerHandle
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTimerHandle               ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTimerHandle AFortNitroDromeRewardManager::GetRewardTimerHandle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FortNitroDromeRewardManager", "GetRewardTimerHandle");

	Params::FortNitroDromeRewardManager_GetRewardTimerHandle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

